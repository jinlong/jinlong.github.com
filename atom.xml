<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Alon's Blog]]></title>
  <subtitle><![CDATA[一边翻译一边学习---涂鸦码龙]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jinlong.github.io/"/>
  <updated>2016-04-09T04:51:22.000Z</updated>
  <id>http://jinlong.github.io/</id>
  
  <author>
    <name><![CDATA[Alon Zhang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[你好 ES2015]]></title>
    <link href="http://jinlong.github.io/2016/04/09/Say-Hello-To-ES2015/"/>
    <id>http://jinlong.github.io/2016/04/09/Say-Hello-To-ES2015/</id>
    <published>2016-04-09T03:22:43.000Z</published>
    <updated>2016-04-09T04:51:22.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文： <a href="https://tutor.mantrajs.com/say-hello-to-ES2015/introduction" target="_blank" rel="external">Say Hello To ES2015</a><br>笔记：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<h1 id="1-_介绍_ES2015">1. 介绍 ES2015</h1><p>ES2015 是新版的 JavaScript，Node.js 已经完全支持，浏览器端可以用 <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a> 库编译。</p>
<p>运行本文的示例代码，可以用 <a href="https://jsbin.com/defeba/edit?js,console" target="_blank" rel="external">JSBin 环境</a>，也可以结合原文中的测试题检测学习效果。</p>
<h1 id="2-_使用_let_和_const">2. 使用 let 和 const</h1><p>ES2015 可以用 <code>const</code> 或 <code>let</code> 替换 <code>var</code> ，它们定义了块级作用域变量。</p>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> lc=<span class="number">0</span>; lc &lt; <span class="number">10</span>; lc++) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = lc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">//抛出错误</span></span><br></pre></td></tr></table></figure>
<p>变量 <code>value</code> 只能在 <code>for</code> 循环中使用。</p>
<p><code>const</code> 跟 <code>let</code> 很像，但是它定义的变量值无法改变。</p>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;name: <span class="string">"Arunoda"</span>&#125;;</span><br><span class="line">user.name = <span class="string">"Susiripala"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.name);</span><br></pre></td></tr></table></figure>
<p>改变的是变量 <code>user</code> 内部的属性，并没有改变 <code>user</code> 本身。</p>
<p>许多人更喜欢用 <code>const</code> 代替 <code>let</code> 。</p>
<h1 id="3-_使用箭头函数整理你的代码">3. 使用箭头函数整理你的代码</h1><p>熟悉的方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">const</span> multiplyBy10 = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(multiplyBy10);</span><br></pre></td></tr></table></figure>
<p>使用箭头函数以后：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">const</span> multiplyBy10 = numbers.map(a =&gt; a * <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(multiplyBy10);</span><br></pre></td></tr></table></figure>
<p>如果方法接受不止1个参数，可以这么写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">const</span> multiplyByIndex = numbers.map((a, i) =&gt; a * i);</span><br><span class="line"><span class="built_in">console</span>.log(multiplyByIndex);</span><br></pre></td></tr></table></figure>
<p>箭头函数返回一个对象的话，需要加圆括号：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">const</span> multiplyBy10 = numbers.map(a =&gt; (&#123;res: a * <span class="number">10</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(multiplyBy10);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="4-_不再使用“self=this”">4. 不再使用“self=this”</h1><p>以前的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Clock.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        self.currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以用箭头函数代替 <code>self=this</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Clock.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setInterval(() =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>setInterval</code> 里面用了箭头函数，它携带了 <code>start</code> 方法的上下文<code>（this）</code>。</p>
<p><strong>使用箭头函数要多加小心，并不是随处可用的，箭头函数会携带函数定义时的上下文。</strong></p>
<p>正如这个例子：</p>
<p><a class="jsbin-embed" href="https://jsbin.com/zuseqap/1/embed?js,console" target="_blank" rel="external">JS Bin on jsbin.com</a><script src="https://static.jsbin.com/js/embed.min.js?3.35.12"></script></p>
<h1 id="5-_改良的对象字面量">5. 改良的对象字面量</h1><p>在对象里面定义一个方法，可以这么写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Arunoda'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.getName());</span><br></pre></td></tr></table></figure>
<p>不必每次都写 <code>function</code> 关键字。</p>
<p>这是最酷的特性，你会喜欢的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Arunoda'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;name, age&#125;;</span><br></pre></td></tr></table></figure>
<p>瞅瞅多简单，并不用这么啰嗦：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Arunoda'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    age: age</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="6-_解构对象">6. 解构对象</h1><p>很容易地提取 <code>user</code> 对象的 <code>name</code> 和 <code>age</code> 字段：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    name: <span class="string">'Arunoda'</span>,</span><br><span class="line">    age: <span class="number">80</span>,</span><br><span class="line">    city: <span class="string">'Colombo'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name, age&#125; = user;</span><br><span class="line"><span class="built_in">console</span>.log(name, age);</span><br></pre></td></tr></table></figure>
<p>对于函数相当有用，上代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">&#123;name&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Name is: '</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    name: <span class="string">'Arunoda'</span>,</span><br><span class="line">    age: <span class="number">80</span>,</span><br><span class="line">    city: <span class="string">'Colombo'</span></span><br><span class="line">&#125;;</span><br><span class="line">printName(user);</span><br></pre></td></tr></table></figure>
<p>不仅简化了代码，而且可以自描述。看到函数第一行时，我们便会明白使用传入对象的哪个字段。</p>
<p>可以定义传入对象的默认值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printUser</span>(<span class="params">&#123;name, age = 20&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Name is: '</span> + name + <span class="string">' Age: '</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像传入对象一样，同样可以从传入的数组中解构值：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printUser</span>(<span class="params">[name, age = 20]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Name is: '</span> + name + <span class="string">' Age: '</span> + age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printUser([<span class="string">"Arunoda"</span>, <span class="number">80</span>]);</span><br></pre></td></tr></table></figure>
<h1 id="7-_前所未见的方式传递（spread）数组">7. 前所未见的方式传递（spread）数组</h1><p>以前的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAndLog</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = sum(a, b);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Result is: '</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumAndLog(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p>ES2015 代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAndLog</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = sum(...args);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Result is: '</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumAndLog(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p>在 <code>sumAndLog</code> 方法中使用 <code>spread</code> 操作符（<code>...</code>），可以很简单地把所有参数存入 <code>args</code> 变量，然后再用 <code>spread</code> 操作符把 <code>args</code> 传入 <code>sum</code> 方法。</p>
<p>再看以下例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printTeam</span>(<span class="params">leader, ...others</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Leader: '</span> + leader + <span class="string">' - Others: '</span> + others);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printTeam(<span class="string">'Arunoda'</span>, <span class="string">'John'</span>, <span class="string">'Singh'</span>);</span><br><span class="line"><span class="comment">//输出结果："Leader: Arunoda - Others: John,Singh"</span></span><br></pre></td></tr></table></figure>
<h1 id="8-_克隆、合并对象">8. 克隆、合并对象</h1><p>以往都是用 <a href="http://underscorejs.org/" target="_blank" rel="external">underscore</a> 或者 <a href="https://lodash.com/" target="_blank" rel="external">lodash</a>，克隆、合并对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;name: <span class="string">"Arunoda"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> newUser = _.clone(user);</span><br><span class="line"><span class="keyword">var</span> withAge = _.extend(user, &#123;age: <span class="number">20</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> newUserVersion = _.defaults(&#123;age: <span class="number">80</span>&#125;, user);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newUser, withAge, newUserVersion);</span><br></pre></td></tr></table></figure>
<p>ES2015 不需要任何工具库，轻松实现以上功能。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;name: <span class="string">"Arunoda"</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> newUser = &#123;...user&#125;;</span><br><span class="line"><span class="keyword">const</span> withAge = &#123;...user, age: <span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> newUserVersion = &#123;age: <span class="number">80</span>, ...user&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newUser, withAge, newUserVersion);</span><br></pre></td></tr></table></figure>
<p>看以下例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">'Arunoda'</span>,</span><br><span class="line">  emails: [<span class="string">'hello@arunoda.io'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newUser = &#123;...user&#125;;</span><br><span class="line">newUser.emails.push(<span class="string">'mail@arunoda.io'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.emails);</span><br><span class="line"><span class="comment">//输出结果：["hello@arunoda.io", "mail@arunoda.io"]</span></span><br></pre></td></tr></table></figure>
<p>尽管我们克隆了对象，但不是深度克隆，只克隆了顶层字段，emails 数组字段使用的仍是同一个。</p>
<p><strong>往数组里添加元素</strong></p>
<p>跟对象类似，我们同样可以克隆数组：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> marks = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">const</span> newMarks = [...marks, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(marks, newMarks);</span><br></pre></td></tr></table></figure>
<h1 id="9-_JavaScript_不变性（Immutability）">9. JavaScript 不变性（Immutability）</h1><p>这些日子，JavaScript 也兴起函数式编程的概念。因此，我们可以尝试写写纯函数。</p>
<blockquote>
<p>纯函数：一个函数接收一些值，并且返回一些值，但是通过参数接收到的值不会被改变。 同样的输入总是返回同样的值。<br>random() 就不是一个纯函数，任何可以修改全局状态的函数都不能称之为纯。</p>
</blockquote>
<p>用 <code>spread</code> 操作符可以轻松实现。</p>
<p>用于对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMarks</span>(<span class="params">user, marks</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...user,</span><br><span class="line">    marks</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;username: <span class="string">'arunoda'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> userWithMarks = addMarks(user, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user, userWithMarks);</span><br></pre></td></tr></table></figure>
<p>用于数组：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params">users, username</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> user = &#123;username&#125;;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    ...users,</span><br><span class="line">    user</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;username: <span class="string">'arunoda'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> users = [user];</span><br><span class="line"><span class="keyword">const</span> newUsers = addUser(users, <span class="string">'john'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(users, newUsers);</span><br></pre></td></tr></table></figure>
<h1 id="10-_以_Python_方式合并字符串">10. 以 Python 方式合并字符串</h1><p>合并字符串通常很烦，可以用 + 操作符，或者类似 <code>underscore</code> 的模板。</p>
<p>ES2015 的模板字符串，非常简单，看例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"Arunoda"</span>;</span><br><span class="line"><span class="keyword">const</span> welcome = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, Good Morning!`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(welcome);</span><br></pre></td></tr></table></figure>
<p>注意 <strong>“`”</strong> 的使用。</p>
<h2 id="多行字符串">多行字符串</h2><p>既然支持模板字符串，多行字符串也不在话下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">`</span><br><span class="line">  # Title</span><br><span class="line"></span><br><span class="line">  This is a multi line string as markdown.</span><br><span class="line">  It's pretty nice.</span><br><span class="line">`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br></pre></td></tr></table></figure>
<p>没有模板字符串的话，是这个样子的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"\n  # Title\n\n  This is a multi line string as markdown.\n  It's pretty nice.\n"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br></pre></td></tr></table></figure>
<h1 id="11-_像_Java_一样写_Class">11. 像 Java 一样写 Class</h1><p>JavaScript 并不是真正的面向对象语言，但是可以用函数和原型模拟类。ES2015 可以写真正原生的类了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  constructor(type, number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.number = number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Number: <span class="subst">$&#123;this.number&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="keyword">new</span> Vehicle(<span class="string">'Car'</span>, <span class="string">'GH-2343'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1.display());</span><br></pre></td></tr></table></figure>
<p>继承一个类：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  constructor(type, number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.number = number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Number: <span class="subst">$&#123;this.number&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  constructor(number) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'Car'</span>, number);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">super</span>.display();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Car <span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="keyword">new</span> Car(<span class="string">'GH-2343'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1.display());</span><br></pre></td></tr></table></figure>
<p>小汽车继承了车辆：</p>
<ul>
<li>在 Car constructor 内部调用了 <code>super constructor</code> （Vehicle 的 constructor）。</li>
<li>Car 的 display() 方法内部，调用了 <code>super.display()</code> 。这里展示了子类如何继承方法。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  constructor(type, number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.number = number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Number: <span class="subst">$&#123;this.number&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">super</span>.display();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Car <span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="keyword">new</span> Car(<span class="string">'GH-2343'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1.display());</span><br></pre></td></tr></table></figure>
<p>Car 类没有实现 constructor 的话，它会用 Vehicle 的 constructor 。</p>
<h1 id="12-_ES2015_模块系统">12. ES2015 模块系统</h1><p>ES2015 的模块系统很像 CommonJS 模块系统（或者 Node.js 的模块系统），但是有一点主要的区别：</p>
<blockquote>
<p>所有的模块导入应该是静态的，无法在运行时导入模块。编译时间应该完成导入（或者最好在解释 JavaScript 期间完成）。<br>以下代码在 ES2015 模块里无法使用：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> router;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'function'</span>) &#123;</span><br><span class="line">  router = <span class="keyword">import</span> <span class="string">'./client-router'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  router = <span class="keyword">import</span> <span class="string">'./server-router'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="命名导出函数">命名导出函数</h2><p>定义一个简单的导出函数 <code>sum</code> ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后导入它：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;sum&#125; <span class="keyword">from</span> <span class="string">'./lib/math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> total = sum(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br></pre></td></tr></table></figure>
<p>导入多个函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;sum, multiply&#125;</span><br></pre></td></tr></table></figure>
<p>像函数一样，可以导出任何类型的变量，包括类。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> BASE = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'Arunoda'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="默认导出">默认导出</h2><p>有时需要导出一个独立的模块，叫做默认导出。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  constructor(type, number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.number = number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Number: <span class="subst">$&#123;this.number&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以这么导入：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vehicle <span class="keyword">from</span> <span class="string">'./lib/vehicle'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="keyword">new</span> Vehicle(<span class="string">'Car'</span>, <span class="string">'GH-3355'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v1.display());</span><br></pre></td></tr></table></figure>
<p>如果再导出一个 <code>print</code> 函数，这么写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vehicle, &#123;print&#125; <span class="keyword">from</span> <span class="string">'./lib/vehicle'</span>;</span><br></pre></td></tr></table></figure>
<p>这便是我们如何在同一模块导入 “默认导出” 和 “命名导出” 的方式。</p>
<p>重命名导入，一次导入所有命名导出，以及更多知识，参见 <a href="https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import" target="_blank" rel="external">MDN 文档</a>。</p>
<h1 id="13-_在实际的项目中使用_ES2015？">13. 在实际的项目中使用 ES2015？</h1><p>至今还没有浏览器完全实现 ES2015 的所有规范。因此，无法直接在浏览器里使用 ES2015 。</p>
<p>那么我们该怎么做？</p>
<p>欢迎来到 transpiling 的世界。</p>
<p>现在可以按 ES2015 写代码，然后使用一个工具把它转换成 ES5，最有名的一个 transpiler 便是 <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>。</p>
<p>设置 Babel 并没那么简单，需要一定的经验，这是一些新手包，拿去用吧。</p>
<ul>
<li>在 Node.js 中使用 <a href="https://github.com/kadirahq/node-base" target="_blank" rel="external">node-base</a> </li>
<li>在 NPM 模块中使用 <a href="https://github.com/kadirahq/npm-base" target="_blank" rel="external">npm-base</a> </li>
<li>在 React app 中使用 <a href="https://github.com/gaearon/react-hot-boilerplate" target="_blank" rel="external">react-hot-boilerplate</a></li>
</ul>
<blockquote>
<p>此外，可以使用 <a href="https://www.meteor.com/" target="_blank" rel="external">Meteor</a>，默认支持 ES2015 了。</p>
</blockquote>
<h1 id="14-_深入研究_ES2015">14. 深入研究 ES2015</h1><p>深入研究，可以参考以下链接：</p>
<ul>
<li><a href="https://babeljs.io/docs/learn-es2015/" target="_blank" rel="external">Babel’s Learn ES2015 Guide</a></li>
<li><a href="https://github.com/ericdouglas/ES6-Learning" target="_blank" rel="external">Massive List of ES2015 Learning Resources</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文： <a href="https://tutor.mantrajs.com/say-hello-to-ES2015/introduction">Say Hello To ES2015</a><br>笔记：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<h1 id="1-_介绍_ES2015">1. 介绍 ES2015</h1><p>ES2015 是新版的 JavaScript，Node.js 已经完全支持，浏览器端可以用 <a href="https://babeljs.io/">Babel</a> 库编译。</p>
<p>运行本文的示例代码，可以用 <a href="https://jsbin.com/defeba/edit?js,console">JSBin 环境</a>，也可以结合原文中的测试题检测学习效果。</p>
<h1 id="2-_使用_let_和_const">2. 使用 let 和 const</h1><p>ES2015 可以用 <code>const</code> 或 <code>let</code> 替换 <code>var</code> ，它们定义了块级作用域变量。</p>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> lc=<span class="number">0</span>; lc &lt; <span class="number">10</span>; lc++) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = lc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">//抛出错误</span></span><br></pre></td></tr></table></figure>
<p>变量 <code>value</code> 只能在 <code>for</code> 循环中使用。</p>
<p><code>const</code> 跟 <code>let</code> 很像，但是它定义的变量值无法改变。</p>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;name: <span class="string">"Arunoda"</span>&#125;;</span><br><span class="line">user.name = <span class="string">"Susiripala"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.name);</span><br></pre></td></tr></table></figure>
<p>改变的是变量 <code>user</code> 内部的属性，并没有改变 <code>user</code> 本身。</p>
<p>许多人更喜欢用 <code>const</code> 代替 <code>let</code> 。</p>
<h1 id="3-_使用箭头函数整理你的代码">3. 使用箭头函数整理你的代码</h1><p>熟悉的方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">const</span> multiplyBy10 = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(multiplyBy10);</span><br></pre></td></tr></table></figure>
<p>使用箭头函数以后：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">const</span> multiplyBy10 = numbers.map(a =&gt; a * <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(multiplyBy10);</span><br></pre></td></tr></table></figure>
<p>如果方法接受不止1个参数，可以这么写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">const</span> multiplyByIndex = numbers.map((a, i) =&gt; a * i);</span><br><span class="line"><span class="built_in">console</span>.log(multiplyByIndex);</span><br></pre></td></tr></table></figure>
<p>箭头函数返回一个对象的话，需要加圆括号：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">const</span> multiplyBy10 = numbers.map(a =&gt; (&#123;res: a * <span class="number">10</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(multiplyBy10);</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="ES2015" scheme="http://jinlong.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://jinlong.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[flex-grow 不易理解，难道不是吗?]]></title>
    <link href="http://jinlong.github.io/2016/02/04/flex-grow-is-weird/"/>
    <id>http://jinlong.github.io/2016/02/04/flex-grow-is-weird/</id>
    <published>2016-02-04T14:40:39.000Z</published>
    <updated>2016-02-04T15:22:12.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="https://css-tricks.com/flex-grow-is-weird/" target="_blank" rel="external">‘flex-grow’ is weird. Or is it?</a><br>翻译：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>当我刚接触 <code>flex-grow</code> 时，为了探寻它的工作原理，做了一个<a href="http://codepen.io/matuzo/pen/zvXQyj" target="_blank" rel="external">简单的例子</a>。</p>
<p>我以为理解的挺透彻了，但是当我把它应用到同事的网站上时，效果跟我想象的完全不同。无论怎么改，布局都无法像我的demo那样展示。这时我才意识到，我并没有完全掌握 <code>flex-grow</code> 。</p>
<h1 id="flex-grow_为何不正常">flex-grow 为何不正常</h1><p>在我深入剖析 <code>flex-grow</code> 的功能之前，我想解释一下我起初犯了什么错。</p>
<p>我认为所有 flex 元素的 <code>flex-grow</code> 如果设置为 <code>1</code> ，它们将一样宽。如果某一项的 <code>flex-grow</code> 设置为 <code>2</code> ，它将是其它元素的二倍宽。</p>
<p>一切听起来顺理成章。我<a href="http://codepen.io/matuzo/pen/zvXQyj" target="_blank" rel="external">上面的例子</a> 貌似也印证了这点。父元素是900px宽，<code>flex-grow: 2</code> 的 section 元素计算后是600px宽，<code>flex-grow: 1</code> 的 aside 元素计算后是300px宽。</p>
<p>如你所见，它在这个例子中展现的近乎完美，可是在真实的例子中却不尽人意，即使我们用了完全相同的 CSS。事实证明，问题不在 CSS，而在于内容（或者说缺乏内容）。我的测试用例只用了两个空元素，无法展示这个属性最重要的细节。</p>
<h1 id="flex-grow_到底如何工作">flex-grow 到底如何工作</h1><p>啰嗦了半天，我终于要解释 <code>flex-grow</code> 没有尽如人意的原因了。</p>
<p>为了阐明原因，我又搞了个<a href="http://codepen.io/matuzo/pen/ZQEWjg" target="_blank" rel="external">栗子</a> ，所有的设置跟<a href="http://codepen.io/matuzo/pen/zvXQyj" target="_blank" rel="external">第一个栗子</a> 完全一致，只不过 section 和 aside 元素不再是空的。看吧，两个元素的比例不再是 2 : 1，flex-grow 为 1 的元素的确比 flex-grow 为 2 的元素宽不少呐。</p>
<a id="more"></a>
<h2 id="解析">解析</h2><p>如果给父元素设置了 <code>display: flex;</code> ，子元素仅仅是水平排列，没有其它效果了。如果没有足够的空间，它们会收缩一些尺寸。另一方面，如果有足够的空间，它们也不会扩展，因为 Flexbox 希望我们自己定义扩展多少。<strong><em>flex-grow</em></strong> 恰恰用来定义剩余空间如何分配，每一项分享多大宽度。</p>
<p>换言之：</p>
<blockquote>
<p>flex 容器为它的子元素分配剩余空间（它们的扩展系数是成比例的），从而填满整个容器，或者收缩元素（它们的收缩系数也是成比例的），从而阻止溢出。</p>
</blockquote>
<p><a href="https://drafts.csswg.org/css-flexbox/#flexibility" target="_blank" rel="external">https://drafts.csswg.org/css-flexbox/#flexibility</a></p>
<h2 id="证明">证明</h2><p>如果我们可视化一把，概念就很清晰明了了。</p>
<p>首先，我们给父元素设置了 <code>display: flex</code>，然后它的子元素成了 flex 元素，一个挨一个的横向排列。 </p>
<p><img src="/image/flex-grow-weird/pic1.png" alt="附图1"></p>
<p>下一步，我们要决定每个元素能获得多少剩余空间。先前的例子中，第一个元素获得了 2/3 的剩余空间（<code>flex-grow: 2</code>），第二个元素获得了 1/3 的剩余空间（<code>flex-grow: 1</code>）。想知道 flex-grow 总共的值是多少，看看剩余空间被分成了几份吧。</p>
<p><img src="/image/flex-grow-weird/pic2.png" alt="附图2"></p>
<p>最终我们得出了可分配的块数，根据 <code>flex-grow</code> 的值，每个元素可以获得适当的块数。</p>
<p><img src="/image/flex-grow-weird/pic3.png" alt="附图3"></p>
<h2 id="计算结果">计算结果</h2><p>理论和视觉展示都不错，让我们为<a href="http://codepen.io/matuzo/pen/ZQEWjg" target="_blank" rel="external">上面例子</a> 做点算术吧。</p>
<p>我们需要4组数字：父容器宽度， section 和 aside 元素的初始宽度，以及 flex-grow 的总值。</p>
<p>父容器宽：<strong>900px</strong><br>section 宽：<strong>99px</strong><br>aside 宽：<strong>623px</strong><br>flex-grow 总值：<strong>3</strong></p>
<p><strong>1. 首先计算剩余空间</strong></p>
<p>父容器宽减去每一个子元素的初始宽度。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">900</span> - <span class="number">99</span> - <span class="number">623</span> = <span class="number">178</span></span><br></pre></td></tr></table></figure>
<p>父容器宽 - section 宽 - aside 宽 = 剩余空间</p>
<p><strong>2. 然后计算 flex-grow 的1份是多宽</strong></p>
<p>既然有了剩余空间，我们还需要确定把它切成几份。重要的是，我们不按元素的个数切分剩余空间，而是按 flex-grow 总值，所以这里是 3 （<code>flex-grow: 2</code> + <code>flex-grow: 1</code>）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">178</span> / <span class="number">3</span> = <span class="number">59.33</span></span><br></pre></td></tr></table></figure>
<p>剩余空间 / flex-grow 总值 = “1份 flex-grow 的宽”</p>
<p><strong>3. 最终所有的元素瓜分剩余空间</strong></p>
<p>依据它们的 flex-grow 值，section 需要 2 份（2 <em> 59.33），aside 需要 1 份（1</em> 59.33）。这个数字再与每个元素的初始宽度相加。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">99</span> + (<span class="number">2</span> * <span class="number">59.33</span>) = <span class="number">217.66</span> (≈<span class="number">218</span>px)</span><br></pre></td></tr></table></figure>
<p>初始 section 宽度 + （section 的 flex-grow 值 * “1 份 flex-grow 的宽”） = 新的宽度</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">623</span> + (<span class="number">1</span> * <span class="number">59.33</span>) = <span class="number">682.33</span> (≈<span class="number">682</span>px)</span><br></pre></td></tr></table></figure>
<p>初始 aside 宽度 + （aside 的 flex-grow 值 * “1 份 flex-grow 的宽”） = 新的宽度</p>
<p>so easy，不是吗？</p>
<h1 id="好吧，那为什么第一个例子正常呢？">好吧，那为什么第一个例子正常呢？</h1><p>我们按已有的公式，算下<a href="http://codepen.io/matuzo/pen/zvXQyj" target="_blank" rel="external">第一个例子</a> 。</p>
<p>父容器宽：<strong>900px</strong><br>section 宽：<strong>0px</strong><br>aside 宽：<strong>0px</strong><br>flex-grow 总值：<strong>3</strong></p>
<p><strong>1. 计算剩余空间</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">900</span> - <span class="number">0</span> - <span class="number">0</span> = <span class="number">900</span></span><br></pre></td></tr></table></figure>
<p><strong>2. 计算 flex-grow 的1份是多宽</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">900</span> / <span class="number">3</span> = <span class="number">300</span></span><br></pre></td></tr></table></figure>
<p><strong>3. 分配剩余空间</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> + (<span class="number">2</span> * <span class="number">300</span>) = <span class="number">600</span>  </span><br><span class="line"><span class="number">0</span> + (<span class="number">1</span> * <span class="number">300</span>) = <span class="number">300</span></span><br></pre></td></tr></table></figure>
<p>如果每个元素的宽是 0，剩余空间等于父容器的宽度，因此，看起来像是 <code>flex-grow</code> 按比例划分了父容器的宽度。</p>
<h1 id="flex-grow_和_flex-basis">flex-grow 和 flex-basis</h1><p>快速回顾一下：剩余空间被 <code>flex-grow</code> 的总值划分，由此产生的商，乘以各自的 <code>flex-grow</code> 值，结果再加上每个元素的初始宽度。</p>
<p>但是如果没有剩余空间或者不想依赖元素的初始宽度，我们可以设置它吗？还能用 <code>flex-grow</code> 吗？</p>
<p>当然可以。有个 <code>flex-basis</code> 属性，它可以定义元素的初始宽度。如果 <code>flex-basis</code> 和 <code>flex-grow</code> 一起设置，宽度的计算方式得变一下。</p>
<blockquote>
<p><code>&lt;‘flex-basis’&gt;</code> ：按 flex 因子分配剩余空间之前，每个 flex 元素的最初主要尺寸。</p>
</blockquote>
<p><a href="https://drafts.csswg.org/css-flexbox/#valdef-flex-flex-basis" target="_blank" rel="external">https://drafts.csswg.org/css-flexbox/#valdef-flex-flex-basis</a> </p>
<p>如果给某个元素设置了 <code>flex-basis</code> 属性，我们计算的时候就不能再用元素本身的初始宽度了，而要用 <code>flex-basis</code> 属性的值。</p>
<p>我调整了一下<a href="http://codepen.io/matuzo/pen/GoRqOP" target="_blank" rel="external">先前的例子</a> ，给每个元素加了 <code>flex-basis</code> 属性。</p>
<p>父容器宽：<strong>900px</strong><br>section 宽：<strong>400px</strong>（flex-basis 值）<br>aside 宽：<strong>200px</strong>（flex-basis 值）<br>flex-grow 总值：<strong>3</strong></p>
<p><strong>1. 计算剩余空间</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">900</span> - <span class="number">400</span> - <span class="number">200</span> = <span class="number">300</span></span><br></pre></td></tr></table></figure>
<p><strong>2. 计算 flex-grow 的1份是多宽</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">300</span> / <span class="number">3</span> = <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p><strong>3. 分配剩余空间</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">400</span> + (<span class="number">2</span> * <span class="number">100</span>) = <span class="number">600</span>  </span><br><span class="line"><span class="number">200</span> + (<span class="number">1</span> * <span class="number">100</span>) = <span class="number">300</span></span><br></pre></td></tr></table></figure>
<p>仅仅是为了完整性，我才用到 px 值，用<a href="http://codepen.io/matuzo/pen/pgobag" target="_blank" rel="external">百分比的话当然也没问题</a> 。</p>
<h1 id="与盒模型结合">与盒模型结合</h1><p>为了覆盖所有情况，如果我们加上 padding 和 margin 看看会发生什么，<a href="http://codepen.io/matuzo/pen/Qybgee" target="_blank" rel="external">啥也没发生</a>  ，第一步计算的时候，只要减去 margin 就好了。</p>
<p>唯一需要注意的是，使用 <code>box-sizing</code> 的话， <code>flex-basis</code> 跟 <code>width</code> 属性表现相似。<a href="http://codepen.io/matuzo/pen/wMaeVO" target="_blank" rel="external">如果 box-sizing 属性改变</a>，计算结果也会变化。如果 <code>box-sizing</code> 设置为 <code>border-box</code> ，计算时只需用到 <code>flex-basis</code> 和 <code>margin</code> 值，因为 <code>padding</code> 已经包含到宽度里面了。</p>
<h1 id="更多实用的例子">更多实用的例子</h1><p>好吧，算术是玩够了。我再展示一些项目中合理使用 <code>flex-grow</code> 的例子吧。</p>
<h2 id="不限宽度：[_x_]%">不限宽度：[ x ]%</h2><p>实际应用中，剩余空间是自动分配的，如果想让子元素填满父容器的话，我们没必要再考虑宽度值。</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="QyWEBb" data-default-tab="result" data-user="matuzo" class="codepen">See the Pen <a href="http://codepen.io/matuzo/pen/QyWEBb/" target="_blank" rel="external">flex-grow</a> by Manuel Matuzovic (<a href="http://codepen.io/matuzo" target="_blank" rel="external">@matuzo</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h2 id="固定宽度的_“圣杯”_3列流式布局">固定宽度的 “圣杯” 3列流式布局</h2><p>固定加自适应宽度的混合布局，可以用浮动实现，但是既不简单直观，又不灵活。Flexbox 实现的话，加点儿 flex-grow 和 flex-basis 魔法，简直小菜一碟。</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="jbRjMG" data-default-tab="result" data-user="matuzo" class="codepen">See the Pen <a href="http://codepen.io/matuzo/pen/jbRjMG/" target="_blank" rel="external">Layout using fluid and fixed widths</a> by Manuel Matuzovic (<a href="http://codepen.io/matuzo" target="_blank" rel="external">@matuzo</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h2 id="使用任何元素填满剩余空间">使用任何元素填满剩余空间</h2><p>比如，一个 label 元素后面紧跟着输入框，想让输入框填满剩余空间，不再需要丑陋的 hacks 。</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="eJYdWV" data-default-tab="result" data-user="matuzo" class="codepen">See the Pen <a href="http://codepen.io/matuzo/pen/eJYdWV/" target="_blank" rel="external">Filling up the remaining space in a form</a> by Manuel Matuzovic (<a href="http://codepen.io/matuzo" target="_blank" rel="external">@matuzo</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>Philip Waltons 的 <a href="https://philipwalton.github.io/solved-by-flexbox/" target="_blank" rel="external">Solved by Flexbox</a> 一文可以找到更多示例。</p>
<h1 id="听听标准规范怎么说">听听标准规范怎么说</h1><p>根据标准，使用 <code>flex</code> 的简写，比直接用 <code>flex-grow</code> 更好。</p>
<blockquote>
<p>Authors are encouraged to control flexibility using the flex shorthand rather than flex-grow directly, as the shorthand correctly resets any unspecified components to accommodate common uses.</p>
</blockquote>
<p><a href="https://drafts.csswg.org/css-flexbox/#flex-grow-property" target="_blank" rel="external">https://drafts.csswg.org/css-flexbox/#flex-grow-property</a> </p>
<p>但是小心！如果仅仅使用 <code>flex: 1;</code> ，以上某些例子可能无法正常展示。</p>
<p>我们的例子要用 <code>flex</code> 的话，应该这么定义：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex: <span class="number">2</span> <span class="number">1</span> <span class="keyword">auto</span>;  <span class="comment">/* (&lt;flex-grow&gt; | &lt;flex-shrink&gt; | &lt;flex-basis&gt;) */</span></span><br></pre></td></tr></table></figure>
<h1 id="深入学习_Flexbox">深入学习 Flexbox</h1><p>如果你想深入学习 Flexbox，可以看看这些不错的资源：</p>
<ul>
<li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">A Complete Guide to Flexbox</a> by Chris Coyier</li>
<li><a href="https://chriswrightdesign.com/experiments/flexbox-adventures/" target="_blank" rel="external">Flexbox adventures</a> by Chris Wright</li>
<li><a href="http://flexboxfroggy.com/" target="_blank" rel="external">Flexbox Froggy</a> by Thomas Park</li>
<li><a href="http://flexbox.io/" target="_blank" rel="external">What the Flexbox?</a> by Wes Bos</li>
<li><a href="https://cvan.io/flexboxin5/" target="_blank" rel="external">flexboxin5</a> </li>
<li><a href="http://madebymike.com.au/demos/flexbox-tester/" target="_blank" rel="external">Flexbox Tester</a> by Mike Riethmuller</li>
</ul>
<h1 id="总结经验教训">总结经验教训</h1><p><code>flex-grow</code> 不易理解吗？也不全是。我们只需理解它如何工作，它做了什么。如果一个元素设置 <code>flex-grow</code> 为 <code>3</code> ，并不代表它是 <code>flex-grow</code> 为 <code>1</code> 的元素的3倍大，准确含义是：它的初始宽度可以增加的像素值是另一个元素的3倍。</p>
<p>我通过<a href="http://codepen.io/matuzo/pen/zvXQyj" target="_blank" rel="external">两个空元素</a> 测试 flex-grow ，得到的结论跟<a href="http://codepen.io/matuzo/pen/ZQEWjg" target="_blank" rel="external">真实情况</a> 完全不符。应该在尽可能真实的环境中验证新事物，这样才能得到最切合实际的结论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="https://css-tricks.com/flex-grow-is-weird/">‘flex-grow’ is weird. Or is it?</a><br>翻译：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<p>当我刚接触 <code>flex-grow</code> 时，为了探寻它的工作原理，做了一个<a href="http://codepen.io/matuzo/pen/zvXQyj">简单的例子</a>。</p>
<p>我以为理解的挺透彻了，但是当我把它应用到同事的网站上时，效果跟我想象的完全不同。无论怎么改，布局都无法像我的demo那样展示。这时我才意识到，我并没有完全掌握 <code>flex-grow</code> 。</p>
<h1 id="flex-grow_为何不正常">flex-grow 为何不正常</h1><p>在我深入剖析 <code>flex-grow</code> 的功能之前，我想解释一下我起初犯了什么错。</p>
<p>我认为所有 flex 元素的 <code>flex-grow</code> 如果设置为 <code>1</code> ，它们将一样宽。如果某一项的 <code>flex-grow</code> 设置为 <code>2</code> ，它将是其它元素的二倍宽。</p>
<p>一切听起来顺理成章。我<a href="http://codepen.io/matuzo/pen/zvXQyj">上面的例子</a> 貌似也印证了这点。父元素是900px宽，<code>flex-grow: 2</code> 的 section 元素计算后是600px宽，<code>flex-grow: 1</code> 的 aside 元素计算后是300px宽。</p>
<p>如你所见，它在这个例子中展现的近乎完美，可是在真实的例子中却不尽人意，即使我们用了完全相同的 CSS。事实证明，问题不在 CSS，而在于内容（或者说缺乏内容）。我的测试用例只用了两个空元素，无法展示这个属性最重要的细节。</p>
<h1 id="flex-grow_到底如何工作">flex-grow 到底如何工作</h1><p>啰嗦了半天，我终于要解释 <code>flex-grow</code> 没有尽如人意的原因了。</p>
<p>为了阐明原因，我又搞了个<a href="http://codepen.io/matuzo/pen/ZQEWjg">栗子</a> ，所有的设置跟<a href="http://codepen.io/matuzo/pen/zvXQyj">第一个栗子</a> 完全一致，只不过 section 和 aside 元素不再是空的。看吧，两个元素的比例不再是 2 : 1，flex-grow 为 1 的元素的确比 flex-grow 为 2 的元素宽不少呐。</p>]]>
    
    </summary>
    
      <category term="flexbox" scheme="http://jinlong.github.io/tags/flexbox/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS分层动画可以让元素沿弧形路径运动]]></title>
    <link href="http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/"/>
    <id>http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/</id>
    <published>2016-01-14T14:48:56.000Z</published>
    <updated>2016-02-04T14:42:48.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://tobiasahlin.com/blog/curved-path-animations-in-css/" target="_blank" rel="external">Moving along a curved path in CSS with layered animation</a><br>翻译：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
<p>译者注：部分代码示例在原文中可以看效果（作者写在博文里面了…），我偷懒把它做成Gif图了。</p>
</blockquote>
<p>CSS 的 animations （动画） 和 transitions（变换）擅于实现从点 A 到点 B 的直线运动，运动轨迹是直线路径。给一个元素添加了 <code>animation</code> 或者 <code>transition</code> 以后，无论你如何调整<a href="https://developer.mozilla.org/en/docs/Web/CSS/timing-function" target="_blank" rel="external">贝塞尔曲线</a>，都无法让它沿着弧形路径运动。你可以通过自定义 timing function 属性，做出弹动的效果，但是它沿着 X 和 Y 轴相对移动的值永远是相同的。</p>
<p>与其使用 JavaScript 实现外观自然的运动，不如尝试用这种简单的方式：分层动画，绕过已有的限制。通过使用两个或多个元素实现动画效果，我们可以更加细粒度地控制某个元素的路径，沿着 X 轴运动使用一种 timing function ，沿着 Y 轴运动使用另一种 timing function 。</p>
<h1 id="问题所在">问题所在</h1><p><img src="/image/layered-anim/exp1.gif" alt="附图1"></p>
<p>当我们深入探讨解决方案之前，看看到底问题在哪。CSS <code>animations</code> 和 <code>transitions</code> 限制我们只能沿直线路径运动。元素总是沿着点 A 到点 B 的最短路径运动，如果我们另辟蹊径，告诉 CSS 沿着“更好的路径”，而不是“最短路径”运动呢？</p>
<p>用 CSS （开启硬件加速）实现两点之间的运动，最直截了当的方式是使用 <code>transform</code> 的 <code>translate</code> 在一定时间内移动某个元素。这就产生了直线运动。在 <code>@keyframes</code> 中，我们打算在 (0,0) 和 (100,-100) 间来回运动，见上图例子：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">keyframes</span> straightLine </span>&#123;</span><br><span class="line">  50% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate3D</span>(<span class="number">100px</span>, -<span class="number">100px</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.dot</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">animation</span>:<span class="value"> straightLine <span class="number">2.5s</span> infinite linear</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这些看起来并不难懂，但我们稍等片刻，思考一下我们需要的解决方案，拆分开来的动画，视觉上长什么样子呢。</p>
<p><code>0%</code> 时，元素从 (0,0) 出发，<code>50%</code> 时，我们用了 <code>translate3D(100px, -100px, 0)</code> 把它移动到 (100,-100)，然后原路返回。换句话说，我们把元素向右移动了 <code>100px</code>，向上移动了 <code>100px</code>，两个方向联合作用使元素沿着一个角度运动。</p>
<a id="more"></a>
<p><img src="/image/layered-anim/exp2.gif" alt="附图2"></p>
<h1 id="解决方案：每个轴执行自己的动画函数">解决方案：每个轴执行自己的动画函数</h1><p>那么，原先展示的例子中我们如何实现的弧形路径呢？为了让创建的路径不是直线，<strong><em>我们想让元素沿 X 轴和 Y 轴的运动速度不同步</em></strong>。</p>
<p>先前例子中都用到了 <code>linear</code> 线性运动函数，如果我们给运动的元素包裹一个容器，我们可以为 X 轴应用一种动画函数，Y 轴应用另一种动画函数。以下例子，我们在 X 轴使用 <code>ease-in</code> ，Y 轴使用 <code>ease-out</code> 。</p>
<p><img src="/image/layered-anim/exp3.gif" alt="附图3"></p>
<h1 id="每个轴元素的具体实现">每个轴元素的具体实现</h1><p>不幸的是，我们不能只把 <code>transform</code> 动画简单叠加：因为只有最后声明的动画会执行。那么我们如何把两个动画效果联合起来呢？可以把一个元素放入另一个元素内部，给容器元素加一种动画，给里面的子元素添加另一种动画。</p>
<p>在以上例子中，你已经看到一个点沿着弧形路径运动，看到两个独立的元素一起做动画，只不过容器元素是完全透明的。为了清晰地看到两个元素沿着弧形路径是如何相互作用的，我们给容器元素加个边框看看呗：</p>
<p><img src="/image/layered-anim/exp4.gif" alt="附图4"></p>
<p>那个点藏在带边框的盒子内部，跟随盒子一起沿 X 轴远动，同时它自己又在 Y 轴方向上下运动。去掉容器盒子的边框，我们就得到了弧形路径。与其在 HTML 中用两个元素，还不如用伪元素实现嘞。如果 HTML 是这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以添加伪元素：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.dot</span> <span class="rules">&#123;</span><br><span class="line">  <span class="comment">/* 容器：沿 X 轴运动 */</span></span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.dot</span><span class="pseudo">::after</span> <span class="rules">&#123;</span><br><span class="line">  <span class="comment">/* 黑点儿，沿 Y 轴运动 */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后，我们需要两块独立的动画代码：X 轴，Y 轴各一块。注意一处用了 <code>ease-in</code>，另一处用了 <code>ease-out</code>：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.dot</span> <span class="rules">&#123;</span><br><span class="line">  <span class="comment">/*省略 一些布局代码...*/</span></span><br><span class="line">  <span class="rule"><span class="attribute">animation</span>:<span class="value"> xAxis <span class="number">2.5s</span> infinite ease-in</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.dot</span><span class="pseudo">::after</span> <span class="rules">&#123;</span><br><span class="line">  <span class="comment">/* 渲染小黑点儿*/</span></span><br><span class="line">  <span class="rule"><span class="attribute">animation</span>:<span class="value"> yAxis <span class="number">2.5s</span> infinite ease-out</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">keyframes</span> xAxis </span>&#123;</span><br><span class="line">  50% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">animation-timing-function</span>:<span class="value"> ease-in</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateX</span>(<span class="number">100px</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">keyframes</span> yAxis </span>&#123;</span><br><span class="line">  50% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">animation-timing-function</span>:<span class="value"> ease-out</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(-<span class="number">100px</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加上 WebKit 前缀，用一些自定义的贝塞尔曲线代替 <code>ease-in</code> 和 <code>ease-out</code>，我们就可以实现文章最开头展示的效果：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.demo-dot</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> xAxis <span class="number">2.5s</span> infinite <span class="function">cubic-bezier</span>(<span class="number">0.02</span>, <span class="number">0.01</span>, <span class="number">0.21</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">animation</span>:<span class="value"> xAxis <span class="number">2.5s</span> infinite <span class="function">cubic-bezier</span>(<span class="number">0.02</span>, <span class="number">0.01</span>, <span class="number">0.21</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.demo-dot</span><span class="pseudo">::after</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">''</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> yAxis <span class="number">2.5s</span> infinite <span class="function">cubic-bezier</span>(<span class="number">0.3</span>, <span class="number">0.27</span>, <span class="number">0.07</span>, <span class="number">1.64</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">animation</span>:<span class="value"> yAxis <span class="number">2.5s</span> infinite <span class="function">cubic-bezier</span>(<span class="number">0.3</span>, <span class="number">0.27</span>, <span class="number">0.07</span>, <span class="number">1.64</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">-webkit-keyframes</span> yAxis </span>&#123;</span><br><span class="line">  50% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-animation-timing-function</span>:<span class="value"> <span class="function">cubic-bezier</span>(<span class="number">0.02</span>, <span class="number">0.01</span>, <span class="number">0.21</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">animation-timing-function</span>:<span class="value"> <span class="function">cubic-bezier</span>(<span class="number">0.02</span>, <span class="number">0.01</span>, <span class="number">0.21</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translateY</span>(-<span class="number">100px</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(-<span class="number">100px</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">keyframes</span> yAxis </span>&#123;</span><br><span class="line">  50% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-animation-timing-function</span>:<span class="value"> <span class="function">cubic-bezier</span>(<span class="number">0.02</span>, <span class="number">0.01</span>, <span class="number">0.21</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">animation-timing-function</span>:<span class="value"> <span class="function">cubic-bezier</span>(<span class="number">0.02</span>, <span class="number">0.01</span>, <span class="number">0.21</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translateY</span>(-<span class="number">100px</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(-<span class="number">100px</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">-webkit-keyframes</span> xAxis </span>&#123;</span><br><span class="line">  50% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-animation-timing-function</span>:<span class="value"> <span class="function">cubic-bezier</span>(<span class="number">0.3</span>, <span class="number">0.27</span>, <span class="number">0.07</span>, <span class="number">1.64</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">animation-timing-function</span>:<span class="value"> <span class="function">cubic-bezier</span>(<span class="number">0.3</span>, <span class="number">0.27</span>, <span class="number">0.07</span>, <span class="number">1.64</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translateX</span>(<span class="number">100px</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateX</span>(<span class="number">100px</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">keyframes</span> xAxis </span>&#123;</span><br><span class="line">  50% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-animation-timing-function</span>:<span class="value"> <span class="function">cubic-bezier</span>(<span class="number">0.3</span>, <span class="number">0.27</span>, <span class="number">0.07</span>, <span class="number">1.64</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">animation-timing-function</span>:<span class="value"> <span class="function">cubic-bezier</span>(<span class="number">0.3</span>, <span class="number">0.27</span>, <span class="number">0.07</span>, <span class="number">1.64</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translateX</span>(<span class="number">100px</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateX</span>(<span class="number">100px</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下是文章起始处的例子：</p>
<p><a class="jsbin-embed" href="http://jsbin.com/waqofexedu/1/embed?html,css,output" target="_blank" rel="external">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?3.35.9"></script></p>
<p>你可能注意到我们在所有例子中都用了 <code>@keyframes</code> ，这纯粹是因为我们想展示黑点儿往返的两种状态。如果只想实现点 A 至点 B 的运动，使用 <code>transition</code> 属性做分层动画同样好用。</p>
<p>如果有个绝对定位的元素，通过给 <code>left</code> 和 <code>bottom</code> 属性加特效，就可以实现弧形路径运动，单个元素就可以，不需要容器元素。为什么不这么做呢：它性能稍差一些，动画的每一帧都会引起重绘。使用带伪元素的分层动画，<code>translate</code> 属性又开了硬件加速，动画效果更好，性能也更高。</p>
<blockquote>
<p>译者自己搞了个绝对定位的例子：</p>
</blockquote>
<p><a class="jsbin-embed" href="http://jsbin.com/zobomaboko/1/embed?html,css,output" target="_blank" rel="external">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?3.35.9"></script>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://tobiasahlin.com/blog/curved-path-animations-in-css/">Moving along a curved path in CSS with layered animation</a><br>翻译：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
<p>译者注：部分代码示例在原文中可以看效果（作者写在博文里面了…），我偷懒把它做成Gif图了。</p>
</blockquote>
<p>CSS 的 animations （动画） 和 transitions（变换）擅于实现从点 A 到点 B 的直线运动，运动轨迹是直线路径。给一个元素添加了 <code>animation</code> 或者 <code>transition</code> 以后，无论你如何调整<a href="https://developer.mozilla.org/en/docs/Web/CSS/timing-function">贝塞尔曲线</a>，都无法让它沿着弧形路径运动。你可以通过自定义 timing function 属性，做出弹动的效果，但是它沿着 X 和 Y 轴相对移动的值永远是相同的。</p>
<p>与其使用 JavaScript 实现外观自然的运动，不如尝试用这种简单的方式：分层动画，绕过已有的限制。通过使用两个或多个元素实现动画效果，我们可以更加细粒度地控制某个元素的路径，沿着 X 轴运动使用一种 timing function ，沿着 Y 轴运动使用另一种 timing function 。</p>
<h1 id="问题所在">问题所在</h1><p><img src="/image/layered-anim/exp1.gif" alt="附图1"></p>
<p>当我们深入探讨解决方案之前，看看到底问题在哪。CSS <code>animations</code> 和 <code>transitions</code> 限制我们只能沿直线路径运动。元素总是沿着点 A 到点 B 的最短路径运动，如果我们另辟蹊径，告诉 CSS 沿着“更好的路径”，而不是“最短路径”运动呢？</p>
<p>用 CSS （开启硬件加速）实现两点之间的运动，最直截了当的方式是使用 <code>transform</code> 的 <code>translate</code> 在一定时间内移动某个元素。这就产生了直线运动。在 <code>@keyframes</code> 中，我们打算在 (0,0) 和 (100,-100) 间来回运动，见上图例子：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">keyframes</span> straightLine </span>&#123;</span><br><span class="line">  50% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate3D</span>(<span class="number">100px</span>, -<span class="number">100px</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.dot</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">animation</span>:<span class="value"> straightLine <span class="number">2.5s</span> infinite linear</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这些看起来并不难懂，但我们稍等片刻，思考一下我们需要的解决方案，拆分开来的动画，视觉上长什么样子呢。</p>
<p><code>0%</code> 时，元素从 (0,0) 出发，<code>50%</code> 时，我们用了 <code>translate3D(100px, -100px, 0)</code> 把它移动到 (100,-100)，然后原路返回。换句话说，我们把元素向右移动了 <code>100px</code>，向上移动了 <code>100px</code>，两个方向联合作用使元素沿着一个角度运动。</p>]]>
    
    </summary>
    
      <category term="animation" scheme="http://jinlong.github.io/tags/animation/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复选框的 CSS 魔法]]></title>
    <link href="http://jinlong.github.io/2016/01/14/checkbox-trickery-with-css/"/>
    <id>http://jinlong.github.io/2016/01/14/checkbox-trickery-with-css/</id>
    <published>2016-01-14T13:54:07.000Z</published>
    <updated>2016-01-14T14:45:14.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://codersblock.com/blog/checkbox-trickery-with-css/" target="_blank" rel="external">Checkbox Trickery with CSS</a><br>翻译：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>Checkbox 复选框相当好用，加对 CSS 魔法有奇效。此文旨在展示一些利用 checkbox 实现的有创意的东西，并且文中的例子<strong><em>没用 JavaScript</em></strong> 哟。</p>
<h1 id="基本配方">基本配方</h1><p>从 HTML 着手。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"toggle"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此处无技巧可言。<code>&lt;label&gt;</code> 的 <code>for</code> 属性匹配 <code>&lt;input&gt;</code> 的 <code>id</code> 属性，因此点击 <code>&lt;label&gt;</code> 可以控制 <code>&lt;input&gt;</code> 复选框。这点尤其重要，因为下一步将隐藏 <code>&lt;input&gt;</code>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">9999px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>为什么不用 <code>display: none</code> ？因为屏幕阅读机和键盘 Tab 会忽略它。此方法让 <code>&lt;input&gt;</code> 保持在文档流中，但是让它离屏隐藏（超出屏幕可见范围达到隐藏）。</p>
<p>隐藏 <code>&lt;input&gt;</code> 以后，我们更容易大展身手。我们仍需传达选中/未选两种状态，但是可以通过 <code>&lt;label&gt;</code> 完成。真正的派对开始啦。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span><span class="pseudo">:checked</span> + <span class="tag">label</span> <span class="rules">&#123;</span><br><span class="line">    <span class="comment">/* 牛X闪闪的样式 */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我们使用 <code>:checked</code> 伪类， 和相邻兄弟元素选择器（<code>+</code>）的组合达到目的，当复选框选中时，找到紧随其后的 <code>&lt;label&gt;</code>元素，加上想要的样式。还可以利用 <code>&lt;label&gt;</code> 中的伪元素（ <code>::before</code> 和 <code>::after</code>）实现更有创意的想法。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span><span class="pseudo">:checked</span> + <span class="tag">label</span><span class="pseudo">::before</span> <span class="rules">&#123;</span><br><span class="line">    <span class="comment">/* 指示器的样式 */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>来，看看实际效果吧。例子用到了以上提及的基本配方，把一个普普通通的复选框改造得当人眼前一亮。<br><a id="more"></a></p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="RPZZPe" data-default-tab="result" data-user="lonekorean" class="codepen">See the Pen <a href="http://codepen.io/lonekorean/pen/RPZZPe/" target="_blank" rel="external">Checkbox Trickery: Simple Toggle</a> by Will Boyd (<a href="http://codepen.io/lonekorean" target="_blank" rel="external">@lonekorean</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>最大的好处是，包含在 <code>&lt;form&gt;</code> 中的复选框的值仍然可以被提交。我们只改变了外观，并没有影响功能。 </p>
<h1 id="隐藏/显示内容">隐藏/显示内容</h1><p>目前为止，我们都是给 <code>&lt;label&gt;</code> 加样式，我们可以更进一步。这个例子会根据用户的选择，动态地隐藏/显示表单的部分内容。</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="NqvvGK" data-default-tab="result" data-user="lonekorean" class="codepen">See the Pen <a href="http://codepen.io/lonekorean/pen/NqvvGK/" target="_blank" rel="external">Checkbox Trickery: Form Disclosure</a> by Will Boyd (<a href="http://codepen.io/lonekorean" target="_blank" rel="external">@lonekorean</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p><code>:checked</code> 伪类对单选按钮同样奏效，考虑到这一点，“How did you hear about us?”这块的 HTML 用到了单选按钮。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"how-friend"</span> <span class="attribute">name</span>=<span class="value">"how"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"how-friend"</span> <span class="attribute">class</span>=<span class="value">"side-label"</span>&gt;</span>From a friend<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"how-internet"</span> <span class="attribute">name</span>=<span class="value">"how"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"how-internet"</span> <span class="attribute">class</span>=<span class="value">"side-label"</span>&gt;</span>Somewhere on the internet<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"how-other"</span> <span class="attribute">name</span>=<span class="value">"how"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"how-other"</span> <span class="attribute">class</span>=<span class="value">"side-label"</span>&gt;</span>Other...<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"how-other-disclosure"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"how-other-explain"</span> <span class="attribute">class</span>=<span class="value">"top-label"</span>&gt;</span>Please explain<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">id</span>=<span class="value">"how-other-explain"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>单选按钮指示器利用 <code>&lt;label&gt;</code> 内的 <code>::before</code> 伪元素（外部的圆环）和 <code>::after</code> 伪元素（内部的绿点）实现，当单选按钮选中 / 未选时显示 / 隐藏 <code>::after</code> 伪元素相当简单。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.side-label</span><span class="pseudo">::after</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 其它样式 */</span></span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">input</span><span class="pseudo">:checked</span> + <span class="class">.side-label</span><span class="pseudo">::after</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;div&gt;</code> 一直隐藏，直到“Other…”单选按钮选中时才显示。我使用了 <code>display: none</code> 隐藏 <code>&lt;div&gt;</code>，因为这次我确实想让屏幕阅读器和键盘 Tab 在内容隐藏时忽略它。当单选按钮选中时，利用 CSS 显示 <code>&lt;div&gt;</code>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#how-other</span><span class="pseudo">:checked</span> ~ <span class="class">.how-other-disclosure</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>之前我们一直使用相邻兄弟选择器（<code>+</code>），不过这次得用一般兄弟选择器（<code>~</code>）。它俩很相似，但是可以找到非相邻的兄弟元素，比如我们的 <code>&lt;div&gt;</code>。</p>
<h1 id="树状文件夹">树状文件夹</h1><p>我们可以活用之前例子中的技巧，实现一个树状文件夹组件，同样具备隐藏 / 显示两种功能。</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="eNEEpB" data-default-tab="result" data-user="lonekorean" class="codepen">See the Pen <a href="http://codepen.io/lonekorean/pen/eNEEpB/" target="_blank" rel="external">Checkbox Trickery: Folder Tree</a> by Will Boyd (<a href="http://codepen.io/lonekorean" target="_blank" rel="external">@lonekorean</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>单个文件夹的 HTML 如下：<code>&lt;label&gt;</code> 是文件夹，两个 <code>&lt;a&gt;</code> 元素是文件夹里的文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"n-1"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"n-1"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sub"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#link"</span>&gt;</span>Mana Leak<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#link"</span>&gt;</span>Time Warp<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="external">Font Awesome</a> 图标用于表示选中（打开）和未选（关闭）状态。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">label</span><span class="pseudo">::before</span>, <span class="tag">a</span><span class="pseudo">::before</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">25px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'FontAwesome'</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">label</span><span class="pseudo">::before</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">'\f07b'</span></span></span>; <span class="comment">/* closed folder */</span></span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">input</span><span class="pseudo">:checked</span> + <span class="tag">label</span><span class="pseudo">::before</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">'\f07c'</span></span></span>; <span class="comment">/* open folder */</span></span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">a</span><span class="pseudo">::before</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">'\f068'</span></span></span>; <span class="comment">/* dash */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>文件夹里的内容通过一般兄弟选择器（<code>~</code>）实现显示 / 隐藏。这就是 HTML 外面包裹额外 <code>&lt;div&gt;</code> 的原因，为了确保选择器能够选到元素，打开兄弟文件夹。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span><span class="pseudo">:checked</span> ~ <span class="class">.sub</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>理所当然，文件夹可以嵌套。只需把另一个文件夹的 HTML 放入 <code>&lt;div class=&quot;sub&quot;&gt;</code> 即可。点击 “Multicolor”看看效果吧。</p>
<p>最后，我们聊一下重置按钮。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"reset"</span> <span class="attribute">value</span>=<span class="value">"Collapse All"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>表单的重置按钮很少有人用，不过这里巧用了一下。点击重置按钮，所有复选框恢复成初始的未选中状态，关闭了所有文件夹。有意思吧。</p>
<h1 id="Split_List（分隔列表）">Split List（分隔列表）</h1><p>这个例子依据已做或未做，把列表选项分成两部分。</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="xGLLwX" data-default-tab="result" data-user="lonekorean" class="codepen">See the Pen <a href="http://codepen.io/lonekorean/pen/xGLLwX/" target="_blank" rel="external">Checkbox Trickery: To-Do List</a> by Will Boyd (<a href="http://codepen.io/lonekorean" target="_blank" rel="external">@lonekorean</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>HTML 像这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"items"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"item1"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"item1"</span>&gt;</span>Create a to-do list<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- more items --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span> <span class="attribute">class</span>=<span class="value">"done"</span> <span class="attribute">aria-hidden</span>=<span class="value">"true"</span>&gt;</span>Done<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span> <span class="attribute">class</span>=<span class="value">"undone"</span> <span class="attribute">aria-hidden</span>=<span class="value">"true"</span>&gt;</span>Not Done<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>分隔列表是由 CSS flexbox 实现的，这是关键的 CSS。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.items</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">flex-direction</span>:<span class="value"> column</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.done</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">order</span>:<span class="value"> <span class="number">1</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">input</span><span class="pseudo">:checked</span> + <span class="tag">label</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">order</span>:<span class="value"> <span class="number">2</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.undone</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">order</span>:<span class="value"> <span class="number">3</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">label</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">order</span>:<span class="value"> <span class="number">4</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>CSS flexbox 可以使用 <code>order</code> 属性重排元素。当复选框选中的时候，<code>&lt;label&gt;</code> 的 order 值由 <code>4</code> 变为 <code>2</code>，列表选项就从 “Not Done” <code>&lt;h2&gt;</code> 下面移到了 “Done” <code>&lt;h2&gt;</code> 下面。</p>
<p>不幸的是，键盘导航和<a href="http://sprungmarker.de/wp-content/uploads/css-a11y-group/css-a11y-flexbox.html" target="_blank" rel="external">许多屏幕阅读器</a> 会遵循元素在 DOM 中的顺序，即使它们被 CSS flexbox 做了视觉上的重排。这就导致 “Done”和“Not Done”的标题对于屏幕阅读器无用，这便是我给它们加了 <code>aria-hidden=&quot;true&quot;</code> 的原因 —— 被忽略总比引起混淆强。此外，通过键盘和屏幕阅读器完全可以控制分隔列表，正确显示列表项的状态（选中 / 未选）。</p>
<p>如果你对“Done”和“Not Done”其后的计数实现感到好奇，它们用到了 CSS counters。想深入学习的话，可以看<a href="http://codersblock.com/blog/fun-times-with-css-counters/" target="_blank" rel="external">这篇文章</a>。</p>
<h1 id="分组筛选">分组筛选</h1><p>压轴的例子展示了如何根据筛选条件，高亮显示交叉区域的数据。</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="YXxxyj" data-default-tab="result" data-user="lonekorean" class="codepen">See the Pen <a href="http://codepen.io/lonekorean/pen/YXxxyj/" target="_blank" rel="external">Checkbox Trickery: Group Filter</a> by Will Boyd (<a href="http://codepen.io/lonekorean" target="_blank" rel="external">@lonekorean</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>这是简短的 HTML 。注意一下 <code>data-teams</code> 属性是由空格分隔的列表，它们每一项恰恰与单选按钮的 <code>id</code> 属性一致。我就是这么把角色跟队伍匹配起来的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"original"</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"team"</span> <span class="attribute">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"original"</span>&gt;</span>Original X-Men<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 省略更多团队 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"characters"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"angel"</span> <span class="attribute">data-teams</span>=<span class="value">"original force factor hellfire"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Angel<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"ct-angel.png"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 省略更多角色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>关于可访问性，我使用了空的 <code>alt</code> 属性，因为角色的名字已显示在 <code>&lt;h2&gt;</code> 标签中了 —— 每个名字读两次也没有必要。此外，我没有真正的隐藏 <code>&lt;img&gt;</code> 元素（只是收缩和渐隐），屏幕阅读器可以轻易的跳过未高亮的角色。我仅仅需要隐藏 <code>&lt;h2&gt;</code> 。</p>
<p>当选择团队的时候，高亮对应的角色，CSS 是这么实现的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#original</span><span class="pseudo">:checked</span> ~ <span class="class">.characters</span> <span class="attr_selector">[data-teams~="original"]</span> <span class="tag">h2</span>,</span><br><span class="line"><span class="id">#force</span><span class="pseudo">:checked</span> ~ <span class="class">.characters</span> <span class="attr_selector">[data-teams~="force"]</span> <span class="tag">h2</span>,</span><br><span class="line"><span class="id">#factor</span><span class="pseudo">:checked</span> ~ <span class="class">.characters</span> <span class="attr_selector">[data-teams~="factor"]</span> <span class="tag">h2</span>,</span><br><span class="line"><span class="id">#hellfire</span><span class="pseudo">:checked</span> ~ <span class="class">.characters</span> <span class="attr_selector">[data-teams~="hellfire"]</span> <span class="tag">h2</span> <span class="rules">&#123;</span><br><span class="line">    <span class="comment">/* styles to show character name */</span></span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="id">#original</span><span class="pseudo">:checked</span> ~ <span class="class">.characters</span> <span class="attr_selector">[data-teams~="original"]</span> <span class="tag">img</span>,</span><br><span class="line"><span class="id">#force</span><span class="pseudo">:checked</span> ~ <span class="class">.characters</span> <span class="attr_selector">[data-teams~="force"]</span> <span class="tag">img</span>,</span><br><span class="line"><span class="id">#factor</span><span class="pseudo">:checked</span> ~ <span class="class">.characters</span> <span class="attr_selector">[data-teams~="factor"]</span> <span class="tag">img</span>,</span><br><span class="line"><span class="id">#hellfire</span><span class="pseudo">:checked</span> ~ <span class="class">.characters</span> <span class="attr_selector">[data-teams~="hellfire"]</span> <span class="tag">img</span> <span class="rules">&#123;</span><br><span class="line">    <span class="comment">/* styles to show character avatar */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我清楚这些选择器看起来有点吓人，不过也不赖。我们来仔细分析下例子的第一行（译者注：以 CSS 中最长的选择器开始算）。当 <code>id</code> 为 ‘original’ 的元素被选中时，找到角色元素里面 <code>data-teams</code> 属性包含 ‘original’ 的元素，然后找到它里面的 <code>&lt;h2&gt;</code> 。2-4行的 ‘force’, ‘factor’, 和 ‘hellfire’ 重复上一步。8-11行继续重复上一步，只不过把 <code>&lt;h2&gt;</code> 换成了 <code>&lt;img&gt;</code> 。</p>
<h1 id="综述">综述</h1><p>我希望你跟我一样从这些例子中找到了一些乐趣。通过复选框去实现一些好玩的东西，对我而言非常有趣。我并没有排斥在适当的时候使用 JavaScript ，但是没用它也可以实现这么多东西，也是蛮开心的。谢谢阅读！</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://codersblock.com/blog/checkbox-trickery-with-css/">Checkbox Trickery with CSS</a><br>翻译：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<p>Checkbox 复选框相当好用，加对 CSS 魔法有奇效。此文旨在展示一些利用 checkbox 实现的有创意的东西，并且文中的例子<strong><em>没用 JavaScript</em></strong> 哟。</p>
<h1 id="基本配方">基本配方</h1><p>从 HTML 着手。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"toggle"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此处无技巧可言。<code>&lt;label&gt;</code> 的 <code>for</code> 属性匹配 <code>&lt;input&gt;</code> 的 <code>id</code> 属性，因此点击 <code>&lt;label&gt;</code> 可以控制 <code>&lt;input&gt;</code> 复选框。这点尤其重要，因为下一步将隐藏 <code>&lt;input&gt;</code>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">9999px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>为什么不用 <code>display: none</code> ？因为屏幕阅读机和键盘 Tab 会忽略它。此方法让 <code>&lt;input&gt;</code> 保持在文档流中，但是让它离屏隐藏（超出屏幕可见范围达到隐藏）。</p>
<p>隐藏 <code>&lt;input&gt;</code> 以后，我们更容易大展身手。我们仍需传达选中/未选两种状态，但是可以通过 <code>&lt;label&gt;</code> 完成。真正的派对开始啦。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span><span class="pseudo">:checked</span> + <span class="tag">label</span> <span class="rules">&#123;</span><br><span class="line">    <span class="comment">/* 牛X闪闪的样式 */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我们使用 <code>:checked</code> 伪类， 和相邻兄弟元素选择器（<code>+</code>）的组合达到目的，当复选框选中时，找到紧随其后的 <code>&lt;label&gt;</code>元素，加上想要的样式。还可以利用 <code>&lt;label&gt;</code> 中的伪元素（ <code>::before</code> 和 <code>::after</code>）实现更有创意的想法。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span><span class="pseudo">:checked</span> + <span class="tag">label</span><span class="pseudo">::before</span> <span class="rules">&#123;</span><br><span class="line">    <span class="comment">/* 指示器的样式 */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>来，看看实际效果吧。例子用到了以上提及的基本配方，把一个普普通通的复选框改造得当人眼前一亮。<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://jinlong.github.io/tags/CSS/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 如何实现后台计划任务]]></title>
    <link href="http://jinlong.github.io/2015/12/14/how-to-schedule-background-tasks-in-javascript/"/>
    <id>http://jinlong.github.io/2015/12/14/how-to-schedule-background-tasks-in-javascript/</id>
    <published>2015-12-14T15:26:53.000Z</published>
    <updated>2016-01-14T13:56:50.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://www.sitepoint.com/how-to-schedule-background-tasks-in-javascript/" target="_blank" rel="external">How to Schedule Background Tasks in JavaScript</a><br>翻译：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>即使忘了 JavaScript 的一切知识，也不会忘记：它是阻塞的。</p>
<p>想象一下，你的浏览器里住着一个魔法小精灵，负责浏览器的正常运转。不论渲染 HTML，响应菜单命令，屏幕渲染，处理鼠标点击，或者执行 JavaScript 函数，所有事情都归一个小精灵处理。它哪忙得过来，一次只能处理一件事情。如果同时丢给它一堆任务，它会列一个长长的待办列表，按顺序完成它们。</p>
<p>人们常常希望初始化组件和事件处理的 JavaScript 可以尽快被执行。可是，有些不太重要的后台任务不会直接影响用户体验，比如：</p>
<ul>
<li>记录统计数据</li>
<li>发送数据到社交网络（或添加‘分享’按钮）</li>
<li>预加载内容</li>
<li>预处理或预渲染 HTML</li>
</ul>
<p>他们对时序要求不严格，但是为了让页面仍然响应，直到用户滚动页面或者与内容交互时才被执行。</p>
<p>选择之一是 <a href="http://www.sitepoint.com/javascript-threading-html5-web-workers/" target="_blank" rel="external">Web Workers</a> ，它可以在独立的线程同时执行代码。用于预加载和预处理再好不过，但是你没有权限直接访问或更新 DOM。你可以在自己的代码中避开这点，但是无法保证第三方脚本比如 Google Analytics 永远不需要这个。<br><a id="more"></a><br>另一个选择是 <code>setTimeout</code> ，比如 <code>setTimeout(doSomething, 1);</code> 。一旦其它的立即执行任务执行完毕，浏览器将执行 <code>doSomething()</code> 函数。实际上，它被放到了待办列表的底部。不幸的是，函数将被调用，而不顾处理需求。</p>
<h1 id="requestIdleCallback">requestIdleCallback</h1><p><a href="http://www.w3.org/TR/requestidlecallback/" target="_blank" rel="external">requestIdleCallback</a> 是新API，当浏览器稍作喘息的时候，用来执行不太重要的后台计划任务。 难免让人想起 <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame" target="_blank" rel="external">requestAnimationFrame</a>，在下次重绘之前，执行函数更新动画。 想了解更多戳这里：<a href="http://www.sitepoint.com/simple-animations-using-requestanimationframe/" target="_blank" rel="external">使用 requestAnimationFrame 做简单的动画</a>。</p>
<p> <code>requestIdleCallback</code> 特性监测：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'requestIdleCallback'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">  <span class="comment">// requestIdleCallback supported</span></span><br><span class="line">  requestIdleCallback(backgroundTask);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// no support - do something else</span></span><br><span class="line">  setTimeout(backgroundTask1, <span class="number">1</span>);</span><br><span class="line">  setTimeout(backgroundTask2, <span class="number">1</span>);</span><br><span class="line">  setTimeout(backgroundTask3, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以指定配置参数对象，比如 timeout，</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestIdleCallback(backgroundTask, &#123; timeout: <span class="number">3000</span>; &#125;);</span><br></pre></td></tr></table></figure>
<p>确保函数在3秒之内调用，不管浏览器是否空闲。</p>
<p><code>deadline</code> 对象传入以下参数时，<code>requestIdleCallback</code> 仅执行一次回调：</p>
<ul>
<li><code>didTimeout</code> —— 如果可选的 timeout 触发，则设置为 true</li>
<li><code>timeRemaining()</code> —— 函数返回执行任务剩余的毫秒数<br><code>timeRemaining()</code> 最多分配50ms用于任务的执行，超过这个限制，也不会停止任务，但是，最好重新调用 <code>requestIdleCallback</code> 安排进一步的处理。</li>
</ul>
<p>我们来创建一个简单的例子，让几个任务按序执行。任务的函数引用储存在数组中：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//待执行的函数数组</span></span><br><span class="line"><span class="keyword">var</span> task = [</span><br><span class="line">    background1,</span><br><span class="line">    background2,</span><br><span class="line">    background3</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'requestIdleCallback'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">  <span class="comment">//支持 requestIdleCallback</span></span><br><span class="line">  requestIdleCallback(backgroundTask);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//不支持 —— 立刻执行所有任务</span></span><br><span class="line">  <span class="keyword">while</span> (task.length) &#123;</span><br><span class="line">    setTimeout(task.shift(), <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//requestIdleCallback 回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backgroundTask</span>(<span class="params">deadline</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果存在，执行下一个任务</span></span><br><span class="line">  <span class="keyword">while</span> (deadline.timeRemaining() &gt; <span class="number">0</span> &amp;&amp; task.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    task.shift()();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//需要的话，安排进一步任务</span></span><br><span class="line">  <span class="keyword">if</span> (task.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    requestIdleCallback(backgroundTask);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="一次_requestIdleCallback_之间不应该做什么？">一次 requestIdleCallback 之间不应该做什么？</h1><p>Paul Lewis 在<a href="https://developers.google.com/web/updates/2015/08/using-requestidlecallback?hl=en" target="_blank" rel="external">他的文章</a>中提到，一次 requestIdleCallback 执行的任务应该切成小块。它不适用于不可预知时间的情况（比如操作 DOM，使用 requestAnimationFrame 回调更好些）。resolving（或者 rejecting）Promises 时也要谨慎，即使没有更多的剩余时间，空闲回调完成之后，回调函数也将立即执行。</p>
<h1 id="requestIdleCallback_浏览器支持情况">requestIdleCallback 浏览器支持情况</h1><p><code>requestIdleCallback</code> 是试验性特性，规范仍不稳定，碰到 API 变更时不足为奇。Chrome 47 已支持… 2015年结束前应该可用了。Opera 应该会紧跟其后。Microsoft 和 Mozilla 都在考虑 API 是否应该支持 Promises 。Apple 像往常一样不鸟。</p>
<p>Paul Lewis（上文提到的）写了一个简单的 <a href="https://gist.github.com/paullewis/55efe5d6f05434a96c36" target="_blank" rel="external">requestIdleCallback shim</a> ，它可以模拟浏览器的空闲监测行为，但不是一个 polyfill（<a href="http://www.cnblogs.com/ziyunfei/archive/2012/09/17/2688829.html" target="_blank" rel="external">shim 和 polyfill 的区别</a>）。</p>
<p>requestIdleCallback shim代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span><br><span class="line"> * Copyright 2015 Google Inc. All rights reserved.</span><br><span class="line"> *</span><br><span class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</span><br><span class="line"> * you may not use this file except in compliance with the License.</span><br><span class="line"> * You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> * http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</span><br><span class="line"> * or implied. See the License for the specific language governing</span><br><span class="line"> * permissions and limitations under the License.</span><br><span class="line"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * @see https://developers.google.com/web/updates/2015/08/using-requestidlecallback</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">window</span>.requestIdleCallback = <span class="built_in">window</span>.requestIdleCallback ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      cb(&#123; </span><br><span class="line">        didTimeout: <span class="literal">false</span>,</span><br><span class="line">        timeRemaining: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">50</span> - (<span class="built_in">Date</span>.now() - start));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.cancelIdleCallback = <span class="built_in">window</span>.cancelIdleCallback ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    clearTimeout(id);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://www.sitepoint.com/how-to-schedule-background-tasks-in-javascript/">How to Schedule Background Tasks in JavaScript</a><br>翻译：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<p>即使忘了 JavaScript 的一切知识，也不会忘记：它是阻塞的。</p>
<p>想象一下，你的浏览器里住着一个魔法小精灵，负责浏览器的正常运转。不论渲染 HTML，响应菜单命令，屏幕渲染，处理鼠标点击，或者执行 JavaScript 函数，所有事情都归一个小精灵处理。它哪忙得过来，一次只能处理一件事情。如果同时丢给它一堆任务，它会列一个长长的待办列表，按顺序完成它们。</p>
<p>人们常常希望初始化组件和事件处理的 JavaScript 可以尽快被执行。可是，有些不太重要的后台任务不会直接影响用户体验，比如：</p>
<ul>
<li>记录统计数据</li>
<li>发送数据到社交网络（或添加‘分享’按钮）</li>
<li>预加载内容</li>
<li>预处理或预渲染 HTML</li>
</ul>
<p>他们对时序要求不严格，但是为了让页面仍然响应，直到用户滚动页面或者与内容交互时才被执行。</p>
<p>选择之一是 <a href="http://www.sitepoint.com/javascript-threading-html5-web-workers/">Web Workers</a> ，它可以在独立的线程同时执行代码。用于预加载和预处理再好不过，但是你没有权限直接访问或更新 DOM。你可以在自己的代码中避开这点，但是无法保证第三方脚本比如 Google Analytics 永远不需要这个。<br>]]>
    
    </summary>
    
      <category term="requestIdleCallback" scheme="http://jinlong.github.io/tags/requestIdleCallback/"/>
    
      <category term="setTimeout" scheme="http://jinlong.github.io/tags/setTimeout/"/>
    
      <category term="web workers" scheme="http://jinlong.github.io/tags/web-workers/"/>
    
      <category term="Javascript" scheme="http://jinlong.github.io/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 否定谓语函数]]></title>
    <link href="http://jinlong.github.io/2015/12/14/negating-predicate-functions-in-javaScript/"/>
    <id>http://jinlong.github.io/2015/12/14/negating-predicate-functions-in-javaScript/</id>
    <published>2015-12-14T14:51:37.000Z</published>
    <updated>2015-12-14T15:23:04.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://adripofjavascript.com/blog/drips/negating-predicate-functions-in-javascript.html" target="_blank" rel="external">Negating Predicate Functions in JavaScript</a><br>翻译：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a>  </p>
</blockquote>
<p>如果你从没听过这个概念，那么至少用过谓语函数。谓语本质上是一个函数，根据它的参数，可以判断返回结果是 <code>true</code> 或者 <code>false</code>。一般都以“isX”命名，比如 <code>isEven</code> 或者 <code>isNumber</code>。</p>
<p>假如我们有个程序，需要处理漫画书里的英雄和坏蛋，以下面的简单对象为例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">    name: <span class="string">"Superman"</span>,</span><br><span class="line">    strength: <span class="string">"Super"</span>,</span><br><span class="line">    heroism: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>程序中难免会用到一些谓语，像这些：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSuperStrong</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.strength === <span class="string">"Super"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNotSuperStrong</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.strength !== <span class="string">"Super"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHeroic</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.heroism === <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNotHeroic</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.heroism !== <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: false</span></span><br><span class="line"><span class="built_in">console</span>.log(isNotSuperStrong(superman));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: false</span></span><br><span class="line"><span class="built_in">console</span>.log(isNotHeroic(superman));</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>如你所见，代码有些冗余。问题不是代码太长，而是核心逻辑定义了两次（每一对谓语，“is”和“isNot”）。逻辑重复意味着逻辑改变时，可能只更新了其中一处谓语，导致错误发生。</p>
<p>如何解决呢？我们首先想到的是这样改：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSuperStrong</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.strength === <span class="string">"Super"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNotSuperStrong</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !isSuperStrong(character);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHeroic</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.heroism === <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNotHeroic</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !isHeroic(character);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: false</span></span><br><span class="line"><span class="built_in">console</span>.log(isNotSuperStrong(superman));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: false</span></span><br><span class="line"><span class="built_in">console</span>.log(isNotHeroic(superman));</span><br></pre></td></tr></table></figure>
<p>的确有进步，但是仍有冗余。“isNot”谓语只不过颠倒了“is”谓语的功能。</p>
<p>我们何不抽象成一个更清晰，更易维护的函数呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">negate</span> (<span class="params">predicateFunc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !predicateFunc.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>negate</code> 函数接收一个谓语函数作为参数，返回一个函数用来对之前谓语的功能取反。</p>
<p>（如果对 <code>apply</code> 不了解，可以读读这篇《<a href="http://adripofjavascript.com/blog/drips/invoking-javascript-functions-with-call-and-apply" target="_blank" rel="external">Invoking JavaScript Functions With ‘call’ and ‘apply’</a>》）</p>
<p>使用 <code>negate</code> 函数解决我们先前的问题吧。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSuperStrong</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.strength === <span class="string">"Super"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isNotSuperStrong = negate(isSuperStrong);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHeroic</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.heroism === <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isNotHeroic = negate(isHeroic);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: false</span></span><br><span class="line"><span class="built_in">console</span>.log(isNotSuperStrong(superman));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: false</span></span><br><span class="line"><span class="built_in">console</span>.log(isNotHeroic(superman));</span><br></pre></td></tr></table></figure>
<p>程序如期运行，但是我们把核心逻辑放到了一处，从“is”谓语也很容易推导出“isNot”谓语。</p>
<p>这点小小的重构看起来微不足道，但是应用于复杂系统的许多分散函数时，<code>negate</code> 函数可以使程序更易维护。</p>
<p><a href="https://github.com/jashkenas/underscore/blob/a315e9f4473005a8310540b16d565519a9556106/underscore.js#L785" target="_blank" rel="external">Underscore</a> 和 <a href="https://github.com/lodash/lodash/blob/6a839967b4beeaf4be0601d75ff4272a18cb5bec/lodash.js#L5259" target="_blank" rel="external">Lo-Dash</a> 都已经填加了 <code>negate</code> 函数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://adripofjavascript.com/blog/drips/negating-predicate-functions-in-javascript.html">Negating Predicate Functions in JavaScript</a><br>翻译：<a href="http://weibo.com/newwave">涂鸦码龙</a>  </p>
</blockquote>
<p>如果你从没听过这个概念，那么至少用过谓语函数。谓语本质上是一个函数，根据它的参数，可以判断返回结果是 <code>true</code> 或者 <code>false</code>。一般都以“isX”命名，比如 <code>isEven</code> 或者 <code>isNumber</code>。</p>
<p>假如我们有个程序，需要处理漫画书里的英雄和坏蛋，以下面的简单对象为例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">    name: <span class="string">"Superman"</span>,</span><br><span class="line">    strength: <span class="string">"Super"</span>,</span><br><span class="line">    heroism: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>程序中难免会用到一些谓语，像这些：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSuperStrong</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.strength === <span class="string">"Super"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNotSuperStrong</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.strength !== <span class="string">"Super"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHeroic</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.heroism === <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNotHeroic</span> (<span class="params">character</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> character.heroism !== <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: false</span></span><br><span class="line"><span class="built_in">console</span>.log(isNotSuperStrong(superman));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: false</span></span><br><span class="line"><span class="built_in">console</span>.log(isNotHeroic(superman));</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://jinlong.github.io/tags/Javascript/"/>
    
      <category term="Javascript" scheme="http://jinlong.github.io/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何同步 Github fork 出来的分支]]></title>
    <link href="http://jinlong.github.io/2015/10/12/syncing-a-fork/"/>
    <id>http://jinlong.github.io/2015/10/12/syncing-a-fork/</id>
    <published>2015-10-12T05:00:18.000Z</published>
    <updated>2015-10-29T05:18:02.000Z</updated>
    <content type="html"><![CDATA[<p>原先一直有个疑惑， Github fork 出来的项目，我已经做了部分修改，由于某些原因，无法提交 Pull Request，可是想把原项目的最近更新代码合并进来怎么办？google 了一下才茅塞顿开，年纪大了，这里记录一下吧。</p>
<p>两种方式：</p>
<ol>
<li>项目 fetch 到本地，通过命令行的方式 merge</li>
<li>懒人方法，只用  Github ，不用命令行</li>
</ol>
<a id="more"></a>
<h1 id="项目_fetch_到本地，通过命令行的方式_merge">项目 fetch 到本地，通过命令行的方式 merge</h1><p>提示：跟上游仓库同步代码之前，必须配置过 remote，<a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/" target="_blank" rel="external">指向上游仓库</a> 。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> upstream http<span class="variable">s:</span>//github.<span class="keyword">com</span>/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</span><br></pre></td></tr></table></figure>
<ol>
<li>打开命令行工具</li>
<li>切换当前工作路径至你的本地工程</li>
<li><p>从上游仓库获取到分支，及相关的提交信息，它们将被保存在本地的 <code>upstream/master</code> 分支</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br><span class="line"><span class="preprocessor"># remote: Counting objects: <span class="number">75</span>, done.</span></span><br><span class="line"><span class="preprocessor"># remote: Compressing objects: <span class="number">100</span>% (<span class="number">53</span>/<span class="number">53</span>), done.</span></span><br><span class="line"><span class="preprocessor"># remote: Total <span class="number">62</span> (delta <span class="number">27</span>), reused <span class="number">44</span> (delta <span class="number">9</span>)</span></span><br><span class="line"><span class="preprocessor"># Unpacking objects: <span class="number">100</span>% (<span class="number">62</span>/<span class="number">62</span>), done.</span></span><br><span class="line"><span class="preprocessor"># From https:<span class="comment">//github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</span></span></span><br><span class="line"><span class="preprocessor">#  * [new branch]      master     -&gt; upstream/master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到本地的 <code>master</code> 分支</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="keyword">master</span></span><br><span class="line"><span class="title"># Switched</span> to branch '<span class="literal">master</span>'</span><br></pre></td></tr></table></figure>
</li>
<li><p>把 <code>upstream/master</code> 分支合并到本地的 <code>master</code> 分支，本地的 <code>master</code> 分支便跟上游仓库保持同步了，并且没有丢失你本地的修改。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git merge upstream/master</span><br><span class="line"><span class="preprocessor"># Updating a422352.<span class="number">.5</span>fdff0f</span></span><br><span class="line"><span class="preprocessor"># Fast-forward</span></span><br><span class="line"><span class="preprocessor">#  README                    |    <span class="number">9</span> -------</span></span><br><span class="line"><span class="preprocessor">#  README.md                 |    <span class="number">7</span> ++++++</span></span><br><span class="line"><span class="preprocessor">#  <span class="number">2</span> files changed, <span class="number">7</span> insertions(+), <span class="number">9</span> deletions(-)</span></span><br><span class="line"><span class="preprocessor">#  delete mode <span class="number">100644</span> README</span></span><br><span class="line"><span class="preprocessor">#  create mode <span class="number">100644</span> README.md</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>提示：同步后的代码仅仅是保存在本地仓库，记得 <code>push</code> 到 Github 哟。</p>
<h1 id="懒人方法，只用_github_，不用命令行">懒人方法，只用 github ，不用命令行</h1><p>盗几张<a href="http://www.zhihu.com/question/20393785" target="_blank" rel="external">知乎的图</a>，见图知意。</p>
<p><img src="/image/sync-a-fork/1.jpg" alt="步骤1"><br><img src="/image/sync-a-fork/2.jpg" alt="步骤2"><br><img src="/image/sync-a-fork/3.jpg" alt="步骤3"><br><img src="/image/sync-a-fork/4.jpg" alt="步骤4"><br>这一页往下面拉:<br><img src="/image/sync-a-fork/5.jpg" alt="步骤5"></p>
<h1 id="参考资料：">参考资料：</h1><ul>
<li>《<a href="http://www.zhihu.com/question/20393785" target="_blank" rel="external">Github 上怎样把新 commits 使用在自己的 fork 上？</a>》</li>
<li>《<a href="https://www.peterdavehello.org/2014/02/update_forked_repository/" target="_blank" rel="external">更新從Github上fork出來的repository (或是同步兩個不同server端的repository)</a>》</li>
<li>《<a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="external">Syncing a fork</a>》</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>原先一直有个疑惑， Github fork 出来的项目，我已经做了部分修改，由于某些原因，无法提交 Pull Request，可是想把原项目的最近更新代码合并进来怎么办？google 了一下才茅塞顿开，年纪大了，这里记录一下吧。</p>
<p>两种方式：</p>
<ol>
<li>项目 fetch 到本地，通过命令行的方式 merge</li>
<li>懒人方法，只用  Github ，不用命令行</li>
</ol>]]>
    
    </summary>
    
      <category term="git" scheme="http://jinlong.github.io/tags/git/"/>
    
      <category term="github" scheme="http://jinlong.github.io/tags/github/"/>
    
      <category term="github" scheme="http://jinlong.github.io/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[是什么导致重排（layout / reflow）？]]></title>
    <link href="http://jinlong.github.io/2015/09/30/what-forces-layout-reflow/"/>
    <id>http://jinlong.github.io/2015/09/30/what-forces-layout-reflow/</id>
    <published>2015-09-30T04:23:38.000Z</published>
    <updated>2015-10-29T04:52:38.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="https://gist.github.com/paulirish/5d52fb081b3570c81e3a" target="_blank" rel="external">What forces layout / reflow</a><br>笔记：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
<p>注：本文只摘取了自己认为重要的知识点，并没有逐字逐句翻译</p>
</blockquote>
<p>当在 JavaScript 中调用（requested/called）以下所有属性或方法时，浏览器将会同步地计算样式和布局。重排（也有叫 reflow 或 <a href="http://www.kellegous.com/j/2013/01/26/layout-performance/" target="_blank" rel="external">layout thrashing</a> 的），通常是性能瓶颈。</p>
<h1 id="元素">元素</h1><h2 id="盒子计算">盒子计算</h2><ul>
<li>elem.offsetLeft, elem.offsetTop, elem.offsetWidth, elem.offsetHeight, elem.offsetParent</li>
<li>elem.clientLeft, elem.clientTop, elem.clientWidth, elem.clientHeight</li>
<li>elem.getClientRects(), elem.getBoundingClientRect()</li>
</ul>
<h2 id="滚动相关">滚动相关</h2><ul>
<li>elem.scrollBy(), elem.scrollTo()</li>
<li>elem.scrollIntoView(), elem.scrollIntoViewIfNeeded()</li>
<li>elem.scrollWidth, elem.scrollHeight</li>
<li>elem.scrollLeft, elem.scrollTop，设置它们的值，同样会影响</li>
</ul>
<h2 id="获得焦点">获得焦点</h2><ul>
<li>elem.focus() 可以引起两次重排（<a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/Element.cpp&amp;q=updateLayoutIgnorePendingStylesheets%20-f:out%20-f:test&amp;sq=package:chromium&amp;l=2369&amp;ct=rc&amp;cd=4&amp;dr=C" target="_blank" rel="external">源码在此</a>）</li>
</ul>
<a id="more"></a>
<h2 id="还有…">还有…</h2><ul>
<li>elem.computedRole, elem.computedName</li>
<li>elem.innerText（<a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/Element.cpp&amp;q=updateLayoutIgnorePendingStylesheets%20-f:out%20-f:test&amp;sq=package:chromium&amp;l=2626&amp;ct=rc&amp;cd=4&amp;dr=C" target="_blank" rel="external">源码</a>）</li>
</ul>
<h1 id="getComputedStyle">getComputedStyle</h1><p><code>window.getComputedStyle()</code> 通常会引起样式重新计算（<a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/Document.cpp&amp;sq=package:chromium&amp;type=cs&amp;l=1860&amp;q=updateLayoutTreeForNodeIfNeeded" target="_blank" rel="external">源码</a>）</p>
<p>如果以下任何一种情况存在，<code>window.getComputedStyle()</code> 将会引起重排：</p>
<ol>
<li>元素在 shadow tree 中</li>
<li>使用了 media queries （viewport相关的一种），特别是以下某一属性：（<a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/css/MediaQueryExp.cpp&amp;sq=package:chromium&amp;type=cs&amp;l=163&amp;q=MediaQueryExp::isViewportDependent" target="_blank" rel="external">源码</a>）<ul>
<li>min-width, min-height, max-width, max-height, width, height</li>
<li>aspect-ratio, min-aspect-ratio, max-aspect-ratio</li>
<li>device-pixel-ratio, resolution, orientation</li>
</ul>
</li>
<li>获取以下的某一种属性：（<a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/css/CSSComputedStyleDeclaration.cpp&amp;sq=package:chromium&amp;l=457&amp;dr=C&amp;q=isLayoutDependent" target="_blank" rel="external">源码</a>）<ul>
<li>height, width</li>
<li>top, right, bottom, left</li>
<li>margin [-top, -right, -bottom, -left, 或简写] ，仅当 margin 是固定值。</li>
<li>padding [-top, -right, -bottom, -left,  或简写] ，仅当 padding 是固定值。</li>
<li>transform, transform-origin, perspective-origin</li>
<li>translate, rotate, scale</li>
<li>webkit-filter, backdrop-filter</li>
<li>motion-path, motion-offset, motion-rotation</li>
<li>x, y, rx, ry</li>
</ul>
</li>
</ol>
<h1 id="window">window</h1><ul>
<li>window.scrollX, window.scrollY</li>
<li>window.innerHeight, window.innerWidth</li>
<li>window.getMatchedCSSRules() 仅重新计算样式</li>
</ul>
<h1 id="表单">表单</h1><ul>
<li>inputElem.focus()</li>
<li>inputElem.select(), textareaElem.select()（<a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/html/HTMLTextFormControlElement.cpp&amp;q=updateLayoutIgnorePendingStylesheets%20-f:out%20-f:test&amp;sq=package:chromium&amp;l=192&amp;dr=C" target="_blank" rel="external">源码</a>）</li>
</ul>
<h1 id="鼠标事件">鼠标事件</h1><ul>
<li>mouseEvt.layerX, mouseEvt.layerY, mouseEvt.offsetX, mouseEvt.offsetY（<a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/events/MouseRelatedEvent.cpp&amp;q=f:mouserelatedevent%20computeRelativePosition&amp;sq=package:chromium&amp;type=cs&amp;l=132" target="_blank" rel="external">源码</a>）</li>
</ul>
<h1 id="document">document</h1><ul>
<li>doc.scrollingElement 仅重新计算样式</li>
</ul>
<h1 id="Range">Range</h1><ul>
<li>range.getClientRects(), range.getBoundingClientRect()</li>
</ul>
<h1 id="SVG">SVG</h1><p>相当多；没有详尽的清单，但是 <a href="http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html" target="_blank" rel="external">Tony Gentilcore’s 2011 Layout Triggering List</a> 指出了一些。</p>
<h1 id="contenteditable">contenteditable</h1><p>数不胜数，…包含复制图片到剪切板（<a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/editing/Editor.cpp&amp;sq=package:chromium&amp;l=420&amp;dr=C&amp;rcl=1442532378" target="_blank" rel="external">源码</a>）</p>
<h1 id="附录">附录</h1><ul>
<li>Reflow 仅在文档流已经改变，设定无效的样式或布局时，带来一定消耗。通常情况下，是由于 DOM 已经改变（class 名已修改，节点已新增/已移除，甚至添加一个伪类，像 :focus）。</li>
<li>如果引起重排，样式首先必须重新计算。因此重排会触发两种操作。它的消耗非常依赖于内容/形势，但通常两种操作成本相似。</li>
<li>我们该如何避免呢？长话短说：<ul>
<li>for 循环里触发重排 &amp; 改变 DOM 性能最低，尽量避免。</li>
<li>使用 DevTools Timeline 看看问题在哪。</li>
<li>合并读写 DOM 操作（通过 [FastDOM])(<a href="https://github.com/wilsonpage/fastdom" target="_blank" rel="external">https://github.com/wilsonpage/fastdom</a>) 或 虚拟 DOM 实现）</li>
</ul>
</li>
</ul>
<h1 id="啃_Chromium_源码：">啃 Chromium 源码：</h1><ul>
<li>触发重排（和重新计算样式）：<a href="https://code.google.com/p/chromium/codesearch#search/&amp;q=updateLayoutIgnorePendingStylesheets%20-f:out%20-f:test&amp;sq=package:chromium&amp;type=cs" target="_blank" rel="external">updateLayoutIgnorePendingStylesheets - Chromium Code Search</a> </li>
<li>触发样式重算：<a href="https://code.google.com/p/chromium/codesearch#search/&amp;q=updateLayoutTree%20-f:out&amp;p=1&amp;sq=package:chromium&amp;type=cs" target="_blank" rel="external">updateLayoutTree - Chromium Code Search</a> </li>
</ul>
<h1 id="CSS_Triggers">CSS Triggers</h1><p><a href="http://csstriggers.com/" target="_blank" rel="external">CSS Triggers</a> 是非常棒的参考资源。设置/改变给出的 CSS 值，在浏览器的生命周期会出现什么结果，会触发哪些操作都有展示。</p>
<h1 id="更多资料">更多资料</h1><ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en" target="_blank" rel="external">Avoiding layout thrashing — Web Fundamentals</a> </li>
<li><a href="https://mattandre.ws/2014/05/really-fixing-layout-thrashing/" target="_blank" rel="external">Fixing Layout thrashing in the real world | Matt Andrews</a> </li>
<li><a href="https://developer.chrome.com/devtools/docs/demos/too-much-layout" target="_blank" rel="external">Timeline demo: Diagnosing forced synchronous layouts - Google Chrome</a> </li>
<li><a href="http://wilsonpage.co.uk/preventing-layout-thrashing/" target="_blank" rel="external">Preventing ‘layout thrashing’ | Wilson Page</a> </li>
<li><a href="https://github.com/wilsonpage/fastdom" target="_blank" rel="external">wilsonpage/fastdom</a> </li>
<li><a href="http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/" target="_blank" rel="external">Rendering: repaint, reflow/relayout, restyle / Stoyan</a> </li>
<li><a href="http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/" target="_blank" rel="external">We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog</a> </li>
<li><a href="https://developers.google.com/speed/articles/reflow?hl=en" target="_blank" rel="external">Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers</a> </li>
<li><a href="https://developers.google.com/speed/articles/reflow?hl=en" target="_blank" rel="external">Optimizing Web Content in UIWebViews and Websites on iOS</a> </li>
<li><a href="http://www.html5rocks.com/en/tutorials/speed/layers/" target="_blank" rel="external">Accelerated Rendering in Chrome</a> </li>
<li><a href="https://www.igvita.com/slides/2012/web-performance-for-the-curious/" target="_blank" rel="external">web performance for the curious</a> </li>
<li><a href="http://jankfree.org/" target="_blank" rel="external">Jank Free</a> </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="https://gist.github.com/paulirish/5d52fb081b3570c81e3a">What forces layout / reflow</a><br>笔记：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
<p>注：本文只摘取了自己认为重要的知识点，并没有逐字逐句翻译</p>
</blockquote>
<p>当在 JavaScript 中调用（requested/called）以下所有属性或方法时，浏览器将会同步地计算样式和布局。重排（也有叫 reflow 或 <a href="http://www.kellegous.com/j/2013/01/26/layout-performance/">layout thrashing</a> 的），通常是性能瓶颈。</p>
<h1 id="元素">元素</h1><h2 id="盒子计算">盒子计算</h2><ul>
<li>elem.offsetLeft, elem.offsetTop, elem.offsetWidth, elem.offsetHeight, elem.offsetParent</li>
<li>elem.clientLeft, elem.clientTop, elem.clientWidth, elem.clientHeight</li>
<li>elem.getClientRects(), elem.getBoundingClientRect()</li>
</ul>
<h2 id="滚动相关">滚动相关</h2><ul>
<li>elem.scrollBy(), elem.scrollTo()</li>
<li>elem.scrollIntoView(), elem.scrollIntoViewIfNeeded()</li>
<li>elem.scrollWidth, elem.scrollHeight</li>
<li>elem.scrollLeft, elem.scrollTop，设置它们的值，同样会影响</li>
</ul>
<h2 id="获得焦点">获得焦点</h2><ul>
<li>elem.focus() 可以引起两次重排（<a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/Element.cpp&amp;q=updateLayoutIgnorePendingStylesheets%20-f:out%20-f:test&amp;sq=package:chromium&amp;l=2369&amp;ct=rc&amp;cd=4&amp;dr=C">源码在此</a>）</li>
</ul>]]>
    
    </summary>
    
      <category term="layout" scheme="http://jinlong.github.io/tags/layout/"/>
    
      <category term="reflow" scheme="http://jinlong.github.io/tags/reflow/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript API 设计原则]]></title>
    <link href="http://jinlong.github.io/2015/08/31/secrets-of-awesome-javascript-api-design/"/>
    <id>http://jinlong.github.io/2015/08/31/secrets-of-awesome-javascript-api-design/</id>
    <published>2015-08-31T13:45:36.000Z</published>
    <updated>2015-10-29T03:08:20.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间组织优化我们的原生模块 API（iOS、Android 模块封装成 JavaScript 接口），于是学习了几篇 JavaScript API 设计的文章，尽管是旧文，但受益匪浅，这里记录一下。</p>
<hr>
<p>好的 API 设计：在自描述的同时，达到抽象的目标。</p>
<p>设计良好的 API ，开发者可以快速上手，没必要经常抱着手册和文档，也没必要频繁光顾技术支持社区。</p>
<h1 id="流畅的接口">流畅的接口</h1><p><strong><a href="https://en.wikipedia.org/wiki/Method_chaining" target="_blank" rel="external">方法链</a>：流畅易读，更易理解</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见的 API 调用方式：改变一些颜色，添加事件监听</span></span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"foobar"</span>);</span><br><span class="line">elem.style.background = <span class="string">"red"</span>;</span><br><span class="line">elem.style.color = <span class="string">"green"</span>;</span><br><span class="line">elem.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"hello world!"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（设想的）方法链 API</span></span><br><span class="line">DOMHelper.getElementById(<span class="string">'foobar'</span>)</span><br><span class="line">  .setStyle(<span class="string">"background"</span>, <span class="string">"red"</span>)</span><br><span class="line">  .setStyle(<span class="string">"color"</span>, <span class="string">"green"</span>)</span><br><span class="line">  .addEvent(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"hello world"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>设置和获取操作，可以合二为一；方法越多，文档可能越难写</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $elem = jQuery(<span class="string">"#foobar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//setter</span></span><br><span class="line">$elem.setCss(<span class="string">"background"</span>, <span class="string">"green"</span>);</span><br><span class="line"><span class="comment">//getter</span></span><br><span class="line">$elem.getCss(<span class="string">"color"</span>) === <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter, setter 合二为一</span></span><br><span class="line">$elem.css(<span class="string">"background"</span>, <span class="string">"green"</span>);</span><br><span class="line">$elem.css(<span class="string">"color"</span>) === <span class="string">"red"</span>;</span><br></pre></td></tr></table></figure>
<h1 id="一致性">一致性</h1><p>相关的接口保持一致的风格，一整套 API 如果传递一种熟悉和舒适的感觉，会大大减轻开发者对新工具的适应性。   </p>
<p>命名这点事：既要短，又要自描述，最重要的是保持一致性</p>
<blockquote>
<p>“There are only two hard problems in computer science: cache-invalidation and naming things.”<br>“在计算机科学界只有两件头疼的事：缓存失效和命名问题”<br>— Phil Karlton</p>
</blockquote>
<p>选择一个你喜欢的措辞，然后持续使用。选择一种风格，然后保持这种风格。</p>
<h1 id="处理参数">处理参数</h1><p>需要考虑大家如何使用你提供的方法，是否会重复调用？为何会重复调用？你的 API 如何帮助开发者减少重复的调用？<br>接收map映射参数，回调或者序列化的属性名，不仅让你的 API 更干净，而且使用起来更舒服、高效。</p>
<p>jQuery 的 <code>css()</code> 方法可以给 DOM 元素设置样式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="string">"#some-selector"</span>)</span><br><span class="line">  .css(<span class="string">"background"</span>, <span class="string">"red"</span>)</span><br><span class="line">  .css(<span class="string">"color"</span>, <span class="string">"white"</span>)</span><br><span class="line">  .css(<span class="string">"font-weight"</span>, <span class="string">"bold"</span>)</span><br><span class="line">  .css(<span class="string">"padding"</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>这个方法可以接受一个 JSON 对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="string">"#some-selector"</span>).css(&#123;</span><br><span class="line">  <span class="string">"background"</span> : <span class="string">"red"</span>,</span><br><span class="line">  <span class="string">"color"</span> : <span class="string">"white"</span>,</span><br><span class="line">  <span class="string">"font-weight"</span> : <span class="string">"bold"</span>,</span><br><span class="line">  <span class="string">"padding"</span> : <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过传一个 map 映射绑定事件</span></span><br><span class="line">jQuery(<span class="string">"#some-selector"</span>).on(&#123;</span><br><span class="line">  <span class="string">"click"</span> : myClickHandler,</span><br><span class="line">  <span class="string">"keyup"</span> : myKeyupHandler,</span><br><span class="line">  <span class="string">"change"</span> : myChangeHandler</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为多个事件绑定同一个处理函数</span></span><br><span class="line">jQuery(<span class="string">"#some-selector"</span>).on(<span class="string">"click keyup change"</span>, myEventHandler);</span><br></pre></td></tr></table></figure>
<h2 id="处理类型">处理类型</h2><p>定义方法的时候，需要决定它可以接收什么样的参数。我们不清楚人们如何使用我们的代码，但可以更有远见，考虑支持哪些参数类型。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来的代码</span></span><br><span class="line">DateInterval.prototype.days = <span class="function"><span class="keyword">function</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor((end - start) / <span class="number">86400000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改后的代码</span></span><br><span class="line">DateInterval.prototype.days = <span class="function"><span class="keyword">function</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(start <span class="keyword">instanceof</span> <span class="built_in">Date</span>)) &#123;</span><br><span class="line">    start = <span class="keyword">new</span> <span class="built_in">Date</span>(start);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!(end <span class="keyword">instanceof</span> <span class="built_in">Date</span>)) &#123;</span><br><span class="line">    end = <span class="keyword">new</span> <span class="built_in">Date</span>(end);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor((end.getTime() - start.getTime()) / <span class="number">86400000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>加了短短的6行代码，我们的方法强大到可以接收 <code>Date</code> 对象，数字的时间戳，甚至像 <code>Sat Sep 08 2012 15:34:35 GMT+0200 (CEST)</code> 这样的字符串</p>
<p>如果你需要确保传入的参数类型（字符串，数字，布尔），可以这样转换：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">castaway</span>(<span class="params">some_string, some_integer, some_boolean</span>) </span>&#123;</span><br><span class="line">  some_string += <span class="string">""</span>;</span><br><span class="line">  some_integer += <span class="number">0</span>; <span class="comment">// parseInt(some_integer, 10) 更安全些</span></span><br><span class="line">  some_boolean = !!some_boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="处理_undefined">处理 undefined</h2><p>为了使你的 API 更健壮，需要鉴别是否真正的 <code>undefined</code> 值被传递进来，可以检查 <code>arguments</code> 对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testUndefined</span>(<span class="params">expecting, someArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (someArgument === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"someArgument 是 undefined"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"然而它实际是传进来的"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testUndefined(<span class="string">"foo"</span>);</span><br><span class="line"><span class="comment">// 结果: someArgument 是 undefined</span></span><br><span class="line">testUndefined(<span class="string">"foo"</span>, <span class="literal">undefined</span>);</span><br><span class="line"><span class="comment">// 结果:  someArgument 是 undefined , 然而它实际是传进来的</span></span><br></pre></td></tr></table></figure>
<h2 id="给参数命名">给参数命名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">event.initMouseEvent(</span><br><span class="line">  <span class="string">"click"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">window</span>,</span><br><span class="line">  <span class="number">123</span>, <span class="number">101</span>, <span class="number">202</span>, <span class="number">101</span>, <span class="number">202</span>,</span><br><span class="line">  <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>,</span><br><span class="line">  <span class="number">1</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/en-US/docs/DOM/event.initMouseEvent" target="_blank" rel="external">Event.initMouseEvent</a> 这个方法简直丧心病狂，不看文档的话，谁能说出每个参数是什么意思？ </p>
<p>给每个参数起个名字，赋个默认值，可好</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">event.initMouseEvent(</span><br><span class="line">  type=<span class="string">"click"</span>,</span><br><span class="line">  canBubble=<span class="literal">true</span>,</span><br><span class="line">  cancelable=<span class="literal">true</span>,</span><br><span class="line">  view=<span class="built_in">window</span>,</span><br><span class="line">  detail=<span class="number">123</span>,</span><br><span class="line">  screenX=<span class="number">101</span>,</span><br><span class="line">  screenY=<span class="number">202</span>,</span><br><span class="line">  clientX=<span class="number">101</span>,</span><br><span class="line">  clientY=<span class="number">202</span>,</span><br><span class="line">  ctrlKey=<span class="literal">true</span>,</span><br><span class="line">  altKey=<span class="literal">false</span>,</span><br><span class="line">  shiftKey=<span class="literal">false</span>,</span><br><span class="line">  metaKey=<span class="literal">false</span>,</span><br><span class="line">  button=<span class="number">1</span>,</span><br><span class="line">  relatedTarget=<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>ES6, 或者 Harmony 就有 <a href="http://wiki.ecmascript.org/doku.php?id=harmony:parameter_default_values" target="_blank" rel="external">默认参数值</a> 和 <a href="http://wiki.ecmascript.org/doku.php?id=harmony:rest_parameters" target="_blank" rel="external">rest 参数</a> 了。</p>
<h2 id="参数接收_JSON_对象">参数接收 JSON 对象</h2><p>与其接收一堆参数，不如接收一个 JSON 对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nightmare</span>(<span class="params">accepts, async, beforeSend, cache, complete, <span class="comment">/* 等28个参数 */</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (accepts === <span class="string">"text"</span>) &#123;</span><br><span class="line">    <span class="comment">// 准备接收纯文本</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dream</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = options || &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (options.accepts === <span class="string">"text"</span>) &#123;</span><br><span class="line">    <span class="comment">// 准备接收纯文本</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用起来也更简单了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nightmare(<span class="string">"text"</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">false</span>, <span class="literal">undefined</span>, <span class="comment">/* 等28个参数 */</span>);</span><br><span class="line"></span><br><span class="line">dream(&#123;</span><br><span class="line">  accepts: <span class="string">"text"</span>,</span><br><span class="line">  <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">  cache: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="参数默认值">参数默认值</h2><p>参数最好有默认值，通过 <a href="http://api.jquery.com/jQuery.extend/  , _.extend(" target="_blank" rel="external">jQuery.extend()</a> <a href="http://underscorejs.org/#extend" target="_blank" rel="external">http://underscorejs.org/#extend</a>) 和 Protoype 的 <a href="http://api.prototypejs.org/language/Object/extend/" target="_blank" rel="external">Object.extend</a> ，可以覆盖预设的默认值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> default_options = &#123;</span><br><span class="line">  accepts: <span class="string">"text"</span>,</span><br><span class="line">  <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">  beforeSend: <span class="literal">null</span>,</span><br><span class="line">  cache: <span class="literal">false</span>,</span><br><span class="line">  complete: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dream</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = jQuery.extend(&#123;&#125;, default_options, options || &#123;&#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(o.accepts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dream(&#123; <span class="keyword">async</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="comment">// prints: "text"</span></span><br></pre></td></tr></table></figure>
<h1 id="扩展性">扩展性</h1><h2 id="回调（callbacks）">回调（callbacks）</h2><p>通过回调， API 用户可以覆盖你的某一部分代码。把一些需要自定义的功能开放成可配置的回调函数，允许 API 用户轻松覆盖你的默认代码。</p>
<p>API 接口一旦接收回调，确保在文档中加以说明，并提供代码示例。</p>
<h2 id="事件（events）">事件（events）</h2><p>事件接口最好见名知意，可以自由选择事件名字，避免与<a href="https://developer.mozilla.org/en-US/docs/DOM/DOM_event_reference" target="_blank" rel="external">原生事件</a> 重名。</p>
<h1 id="处理错误">处理错误</h1><p>不是所有的错误都对开发者调试代码有用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery 允许这么写</span></span><br><span class="line">$(<span class="built_in">document</span>.body).on(<span class="string">'click'</span>, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击时报错</span></span><br><span class="line"><span class="comment">//   TypeError: ((p.event.special[l.origType] || &#123;&#125;).handle || l.handler).apply is not a function</span></span><br><span class="line"><span class="comment">//   in jQuery.min.js on Line 3</span></span><br></pre></td></tr></table></figure>
<p>这样的错误调试起来很痛苦，不要浪费开发者的时间，直接告诉他们犯了什么错：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(callback) !== <span class="string">'[object Function]'</span>) &#123; <span class="comment">// 看备注</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"callback is not a function!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：<code>typeof callback === &quot;function&quot;</code> 在老的浏览器上会有问题，<code>object</code> 会当成个 <code>function</code> 。</p>
</blockquote>
<h1 id="可预测性">可预测性</h1><p>好的 API 具有可预测性，开发者可以根据例子推断它的用法。</p>
<p><a href="http://modernizr.com/docs/#howitworks" target="_blank" rel="external">Modernizr’s 特性检测</a> 是个例子：</p>
<p>a) 它使用的属性名完全与 HTML5、CSS 概念和 API 相匹配</p>
<p>b) 每一个单独的检测一致地返回 true 或 false 值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有这些属性都返回 'true' 或 'false'</span></span><br><span class="line">Modernizr.geolocation</span><br><span class="line">Modernizr.localstorage</span><br><span class="line">Modernizr.webworkers</span><br><span class="line">Modernizr.canvas</span><br><span class="line">Modernizr.borderradius</span><br><span class="line">Modernizr.boxshadow</span><br><span class="line">Modernizr.flexbox</span><br></pre></td></tr></table></figure>
<p>依赖于开发者已熟悉的概念也可以达到可预测的目的。</p>
<p><a href="http://api.jquery.com/category/selectors/" target="_blank" rel="external">jQuery’s 选择器语法</a> 就是一个显著的例子，CSS1-CSS3 的选择器可直接用于它的 DOM 选择器引擎。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#grid"</span>) <span class="comment">// Selects by ID</span></span><br><span class="line">$(<span class="string">"ul.nav &gt; li"</span>) <span class="comment">// All LIs for the UL with class "nav"</span></span><br><span class="line">$(<span class="string">"ul li:nth-child(2)"</span>) <span class="comment">// Second item in each list</span></span><br></pre></td></tr></table></figure>
<h1 id="比例协调">比例协调</h1><p>好的 API 并不一定是小的 API，API 的体积大小要跟它的功能相称。</p>
<p>比如 <a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> ，著名的日期解析和格式化的库，可以称之为均衡，它的 API 既简洁又功能明确。</p>
<p>像 Moment.js 这样特定功能的库，确保 API 的专注和小巧非常重要。</p>
<h1 id="编写_API_文档">编写 API 文档</h1><p>软件开发最艰难的任务之一是写文档，实际上每个人都恨写文档，怨声载道的是没有一个好用的文档工具。</p>
<p>以下是一些文档自动生成工具：</p>
<ul>
<li><a href="http://yui.github.com/yuidoc/" target="_blank" rel="external">YUIDoc</a> (requires Node.js, npm)</li>
<li><a href="https://github.com/p120ph37/node-jsdoc-toolkit" target="_blank" rel="external">JsDoc Toolkit</a> (requires Node.js, npm)</li>
<li><a href="https://github.com/cbou/markdox" target="_blank" rel="external">Markdox</a> (requires Node.js, npm)</li>
<li><a href="https://github.com/visionmedia/dox" target="_blank" rel="external">Dox</a> (requires Node.js, npm)</li>
<li><a href="http://jashkenas.github.com/docco/" target="_blank" rel="external">Docco</a> (requires Node.js, Python, CoffeeScript)</li>
<li><a href="https://github.com/senchalabs/jsduck" target="_blank" rel="external">JSDuck</a> (reqires Ruby, gem)</li>
<li><a href="https://github.com/jsdoc3/jsdoc" target="_blank" rel="external">JSDoc 3</a> (requires Java)</li>
</ul>
<p><strong>最重要的是：确保文档跟代码同步更新。</strong></p>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="http://reeze.cn/2014/02/07/what-makes-a-good-api/" target="_blank" rel="external">好的 API 设计</a></li>
<li><a href="http://www.smashingmagazine.com/2012/10/09/designing-javascript-apis-usability/" target="_blank" rel="external">Designing Better JavaScript APIs</a></li>
<li><a href="http://webstandardssherpa.com/reviews/secrets-of-awesome-javascript-api-design/" target="_blank" rel="external">Secrets of Awesome JavaScript API Design</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间组织优化我们的原生模块 API（iOS、Android 模块封装成 JavaScript 接口），于是学习了几篇 JavaScript API 设计的文章，尽管是旧文，但受益匪浅，这里记录一下。</p>
<hr>
<p>好的 API 设计：在自描述的同时，达到抽象的目标。</p>
<p>设计良好的 API ，开发者可以快速上手，没必要经常抱着手册和文档，也没必要频繁光顾技术支持社区。</p>
<h1 id="流畅的接口">流畅的接口</h1><p><strong><a href="https://en.wikipedia.org/wiki/Method_chaining">方法链</a>：流畅易读，更易理解</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见的 API 调用方式：改变一些颜色，添加事件监听</span></span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"foobar"</span>);</span><br><span class="line">elem.style.background = <span class="string">"red"</span>;</span><br><span class="line">elem.style.color = <span class="string">"green"</span>;</span><br><span class="line">elem.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"hello world!"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（设想的）方法链 API</span></span><br><span class="line">DOMHelper.getElementById(<span class="string">'foobar'</span>)</span><br><span class="line">  .setStyle(<span class="string">"background"</span>, <span class="string">"red"</span>)</span><br><span class="line">  .setStyle(<span class="string">"color"</span>, <span class="string">"green"</span>)</span><br><span class="line">  .addEvent(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"hello world"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="API Design" scheme="http://jinlong.github.io/tags/API-Design/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Retina屏的移动设备如何实现真正1px的线？]]></title>
    <link href="http://jinlong.github.io/2015/05/24/css-retina-hairlines/"/>
    <id>http://jinlong.github.io/2015/05/24/css-retina-hairlines/</id>
    <published>2015-05-24T10:02:35.000Z</published>
    <updated>2015-10-29T03:07:54.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前些日子总被人问起 iOS Retina 屏，设置 1px 边框，实际显示 2px，如何解决？<br>原来一直没在意，源于自己根本不是像素眼……<br>今天仔细瞅了瞅原生实现的边框和CSS设置的边框，确实差距不小……</p>
</blockquote>
<p>上图是原生实现，下图是 CSS 边框，手机上对比更加明显<br><img src="/image/css-retina-1px/native.jpg"><img src="/image/css-retina-1px/css.jpg"></p>
<p>然后，如何解决呢？搜遍整个谷歌，发现好多人早已开始研究解决方案了。到底有哪些方案，到底好不好用呢？试过才知道，把我试过的结论记录一下。</p>
<a id="more"></a>
<h1 id="有说用_0-5px_解决的">有说用 0.5px 解决的</h1><p>在2014年的 WWDC，“设计响应的Web体验” 一讲中，Ted O’Connor 讲到关于“retina<br> hairlines”（retina 极细的线）：在retina屏上仅仅显示1物理像素的边框，开发者应该如何处理呢。</p>
<p>他们曾介绍到 iOS 8 和 OS X Yosemite 即将支持 0.5px 的边框：</p>
<p><img src="/image/css-retina-1px/hairline.jpg"></p>
<p>额的神呐！so easy! 果真如此吗？</p>
<p>这样还不够（WWDC幻灯片通常是“唬人”的），但是相差不多。</p>
<p>问题是 retina 屏的浏览器可能不认识0.5px的边框，将会把它解释成0px，没有边框。包括 iOS 7 和 之前版本，OS X Mavericks 及以前版本，还有 Android 设备。</p>
<p><strong>解决方案</strong></p>
<p>解决方案是通过 JavaScript 检测浏览器能否处理0.5px的边框，如果可以，给<code>&lt;html&gt;</code>元素添加个<code>class</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> testElem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  testElem.style.border = <span class="string">'.5px solid transparent'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(testElem);</span><br><span class="line">  <span class="keyword">if</span> (testElem.offsetHeight == <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'html'</span>).classList.add(<span class="string">'hairlines'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(testElem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 脚本应该放在&lt;body&gt;内， 如果在&lt;head&gt;里面运行，需要包装 $(document).ready(function() &#123;   &#125;)</span></span><br></pre></td></tr></table></figure>
<p>然后，极细的边框样式就容易了：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#bbb</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="class">.hairlines</span> <span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">0.5px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>看起来是个解决方案，可是我要兼容安卓设备，和 iOS 8 以下设备怎么办？这个思路行不通。</strong></p>
<h1 id="还有用图片实现_border_的">还有用图片实现 border 的</h1><p>6x6 的 一张图片</p>
<p><img src="/image/css-retina-1px/border.png"></p>
<p>可以用 gif，png，或 base64 图片</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.border</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">1px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border-image</span>:<span class="value"> <span class="function">url</span>(border.gif) <span class="number">2</span> repeat</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>缺点是改边框颜色时要改图片，不是很方便。</strong></p>
<h1 id="还有用多背景渐变实现的">还有用多背景渐变实现的</h1><p>设置1px的渐变背景，50%有颜色，50%透明</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.border</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"></span><br><span class="line">    <span class="function">linear-gradient</span>(<span class="number">180deg</span>, black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) top    left  / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line">    <span class="function">linear-gradient</span>(<span class="number">90deg</span>,  black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) top    right / <span class="number">1px</span> <span class="number">100%</span> no-repeat,</span><br><span class="line">    <span class="function">linear-gradient</span>(<span class="number">0</span>,      black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) bottom right / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line">    <span class="function">linear-gradient</span>(-<span class="number">90deg</span>, black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) bottom left  / <span class="number">1px</span> <span class="number">100%</span> no-repeat</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>多写了不少代码，圆角也没法实现，也是不太好用。</strong></p>
<h1 id="还有用_box-shadow_模拟边框的">还有用 box-shadow 模拟边框的</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> none</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="function">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>试了下不太好用，颜色不好处理，有阴影出现。</strong></p>
<h1 id="淘宝M站是通过_viewport_+_rem_实现的"><a href="http://m.taobao.com/" target="_blank" rel="external">淘宝M站</a>是通过 viewport + rem 实现的</h1><p>在<code>devicePixelRatio = 2</code> 时，输出viewport</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>devicePixelRatio = 3</code> 时，输出viewport</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同时通过设置对应viewport的rem基准值，这种方式就可以像以前一样轻松愉快的写1px了。</p>
<p><strong>个人感觉为了做个 border 多准备两套样式，还得动态改变 viewport ，有点费劲。</strong></p>
<h1 id="最后找到一个还算好用的方法：伪类_+_transform">最后找到一个还算好用的方法：伪类  + transform</h1><p>原理是把原先元素的 border 去掉，然后利用 <code>:before</code> 或者 <code>:after</code> 重做 border ，并 transform 的 scale 缩小一半，原先的元素相对定位，新做的 border 绝对定位</p>
<ul>
<li>单条 border</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value">none</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span><span class="pseudo">:after</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">''</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">1px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">scaleY</span>(<span class="number">0.5</span>)</span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">scaleY</span>(<span class="number">0.5</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>四条 border</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value">none</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span><span class="pseudo">:after</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">''</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">scale</span>(<span class="number">0.5</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">scale</span>(<span class="number">0.5</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value"> left top</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> left top</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>样式使用的时候，也要结合 JS 代码，判断是否 Retina 屏</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>).className = <span class="string">'hairlines'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以支持圆角，唯一的一点小缺陷是 <code>&lt;td&gt;</code> 用不了。</p>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="http://dieulot.net/css-retina-hairline" target="_blank" rel="external">CSS retina hairline, the easy way.</a></li>
<li><a href="http://www.ghugo.com/css-retina-hairline/" target="_blank" rel="external">再谈mobile web retina 下 1px 边框解决方案</a></li>
<li><a href="https://51bits.com/writing/half-point-css-borders-in-ios/" target="_blank" rel="external">Half-Point CSS Borders in iOS</a></li>
<li><a href="http://n12v.com/css-retina-and-physical-pixels/" target="_blank" rel="external">CSS, Retina, and Physical Pixels</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前些日子总被人问起 iOS Retina 屏，设置 1px 边框，实际显示 2px，如何解决？<br>原来一直没在意，源于自己根本不是像素眼……<br>今天仔细瞅了瞅原生实现的边框和CSS设置的边框，确实差距不小……</p>
</blockquote>
<p>上图是原生实现，下图是 CSS 边框，手机上对比更加明显<br><img src="/image/css-retina-1px/native.jpg" /><img src="/image/css-retina-1px/css.jpg" /></p>
<p>然后，如何解决呢？搜遍整个谷歌，发现好多人早已开始研究解决方案了。到底有哪些方案，到底好不好用呢？试过才知道，把我试过的结论记录一下。</p>]]>
    
    </summary>
    
      <category term="1px线" scheme="http://jinlong.github.io/tags/1px%E7%BA%BF/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/tags/CSS/"/>
    
      <category term="Retina" scheme="http://jinlong.github.io/tags/Retina/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[去除 JavaScript 代码的怪味]]></title>
    <link href="http://jinlong.github.io/2015/05/21/eliminate-javascript-code-smells/"/>
    <id>http://jinlong.github.io/2015/05/21/eliminate-javascript-code-smells/</id>
    <published>2015-05-21T15:06:21.000Z</published>
    <updated>2015-10-29T03:07:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：《<a href="http://elijahmanor.github.io/talks/js-smells/#/" target="_blank" rel="external">ELIMINATE JAVASCRIPT CODE SMELLS</a>》<br>作者：<a href="http://elijahmanor.com" target="_blank" rel="external">@elijahmanor</a><br>笔记：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码农</a></p>
</blockquote>
<h1 id="难闻的代码">难闻的代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* const */</span> <span class="keyword">var</span> CONSONANTS = <span class="string">'bcdfghjklmnpqrstvwxyz'</span>;</span><br><span class="line"><span class="comment">/* const */</span> <span class="keyword">var</span> VOWELS = <span class="string">'aeiou'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">englishToPigLatin</span>(<span class="params">english</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* const */</span> <span class="keyword">var</span> SYLLABLE = <span class="string">'ay'</span>;</span><br><span class="line">  <span class="keyword">var</span> pigLatin = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (english !== <span class="literal">null</span> &amp;&amp; english.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    (VOWELS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span> ||</span><br><span class="line">    CONSONANTS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span> )) &#123;</span><br><span class="line">    <span class="keyword">if</span> (VOWELS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      pigLatin = english + SYLLABLE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> preConsonants = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; english.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CONSONANTS.indexOf(english[i]) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">          preConsonants += english[i];</span><br><span class="line">          <span class="keyword">if</span> (preConsonants == <span class="string">'q'</span> &amp;&amp;</span><br><span class="line">            i+<span class="number">1</span> &lt; english.length &amp;&amp; english[i+<span class="number">1</span>] == <span class="string">'u'</span>) &#123;</span><br><span class="line">            preConsonants += <span class="string">'u'</span>;</span><br><span class="line">            i += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      pigLatin = english.substring(i) + preConsonants + SYLLABLE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pigLatin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="为毛是这个味？">为毛是这个味？</h2><a id="more"></a>
<h2 id="很多原因：">很多原因：</h2><ul>
<li>声明过多</li>
<li>嵌套太深</li>
<li>复杂度太高</li>
</ul>
<h2 id="检查工具">检查工具</h2><p><strong>Lint 规则</strong></p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span>jshint maxstatements:15, maxdepth:2, maxcomplexity:5 <span class="keyword">*</span>/</span><br><span class="line">/<span class="keyword">*</span>jshint 最多声明:15, 最大深度:2, 最高复杂度:5<span class="keyword">*</span>/</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span>eslint max-statements:[2, 15], max-depth:[1, 2], complexity:[2, 5] <span class="keyword">*</span>/</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>:<span class="number">0</span> - <span class="built_in">Function</span> <span class="string">'englishToPigLatin'</span> has a complexity <span class="keyword">of</span> <span class="number">7.</span></span><br><span class="line"><span class="comment">//englishToPigLatin 方法复杂度为 7</span></span><br><span class="line"><span class="number">7</span>:<span class="number">0</span> - This <span class="function"><span class="keyword">function</span> <span class="title">has</span> <span class="title">too</span> <span class="title">many</span> <span class="title">statements</span> (<span class="params">16</span>). <span class="title">Maximum</span> <span class="title">allowed</span> <span class="title">is</span> 15.</span><br><span class="line">//次方法有太多声明(<span class="params">16</span>)。最大允许值为15。</span><br><span class="line">22:10 - <span class="title">Blocks</span> <span class="title">are</span> <span class="title">nested</span> <span class="title">too</span> <span class="title">deeply</span> (<span class="params">5</span>).</span><br><span class="line">//嵌套太深(<span class="params">5</span>)</span></span><br></pre></td></tr></table></figure>
<h2 id="重构">重构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CONSONANTS = [<span class="string">'th'</span>, <span class="string">'qu'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>,</span><br><span class="line"><span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>];</span><br><span class="line"><span class="keyword">const</span> VOWELS = [<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>];</span><br><span class="line"><span class="keyword">const</span> ENDING = <span class="string">'ay'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isValid = word =&gt; startsWithVowel(word) || startsWithConsonant(word);</span><br><span class="line"><span class="keyword">let</span> startsWithVowel = word =&gt; !!~VOWELS.indexOf(word[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">let</span> startsWithConsonant = word =&gt; !!~CONSONANTS.indexOf(word[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">let</span> getConsonants = word =&gt; CONSONANTS.reduce((memo, char) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (word.startsWith(char)) &#123;</span><br><span class="line">    memo += char;</span><br><span class="line">    word = word.substr(char.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">englishToPigLatin</span>(<span class="params">english=''</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (isValid(english)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (startsWithVowel(english)) &#123;</span><br><span class="line">        english += ENDING;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> letters = getConsonants(english);</span><br><span class="line">        english = <span class="string">`<span class="subst">$&#123;english.substr(letters.length)&#125;</span><span class="subst">$&#123;letters&#125;</span><span class="subst">$&#123;ENDING&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> english;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>重构后统计</strong></p>
<ul>
<li>max-statements（最多声明）: 16 → 6</li>
<li>max-depth（最大嵌套）: 5 → 2</li>
<li>complexity（复杂度）: 7 → 3</li>
<li>max-len（最多行数）: 65 → 73</li>
<li>max-params（最多参数）: 1 → 2</li>
<li>max-nested-callbacks（最多嵌套回调）: 0 → 1</li>
</ul>
<h2 id="资源">资源</h2><p>jshint - <a href="jshint - http://jshint.com/">http://jshint.com/</a><br>eslint - <a href="http://eslint.org/" target="_blank" rel="external">http://eslint.org/</a><br>jscomplexity - <a href="http://jscomplexity.org/" target="_blank" rel="external">http://jscomplexity.org/</a><br>escomplex - <a href="https://github.com/philbooth/escomplex" target="_blank" rel="external">https://github.com/philbooth/escomplex</a><br>jasmine - <a href="http://jasmine.github.io/" target="_blank" rel="external">http://jasmine.github.io/</a> </p>
<h1 id="复制粘贴代码的味道">复制粘贴代码的味道</h1><p>已有功能…</p>
<p><img src="/image/js-smell/copy-paste-code-box-crop.png"></p>
<p>已有代码，BOX.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... more code ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.Box'</span>);</span><br><span class="line"></span><br><span class="line">[].forEach.call(boxes, <span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">  element.innerText = <span class="string">"Box: "</span> + index;</span><br><span class="line">  element.style.backgroundColor =</span><br><span class="line">    <span class="string">'#'</span> + (<span class="built_in">Math</span>.random() * <span class="number">0xFFFFFF</span> &lt;&lt; <span class="number">0</span>).toString(<span class="number">16</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... more code ...</span></span><br></pre></td></tr></table></figure>
<p>那么，现在想要这个功能</p>
<p><img src="/image/js-smell/copy-paste-code-circle-crop.png"></p>
<p>于是，Duang!  CIRCLE.JS 就出现了…</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... more code ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> circles = <span class="built_in">document</span>.querySelectorAll(<span class="string">".Circle"</span>);</span><br><span class="line"></span><br><span class="line">[].forEach.call(circles, <span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">  element.innerText = <span class="string">"Circle: "</span> + index;</span><br><span class="line">  element.style.color =</span><br><span class="line">    <span class="string">'#'</span> + (<span class="built_in">Math</span>.random() * <span class="number">0xFFFFFF</span> &lt;&lt; <span class="number">0</span>).toString(<span class="number">16</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... more code ...</span></span><br></pre></td></tr></table></figure>
<p>为毛是这个味？因为我们复制粘贴了！</p>
<h2 id="工具">工具</h2><p><a href="https://github.com/danielstjules/jsinspect" target="_blank" rel="external">JSINSPECT</a></p>
<p>检查复制粘贴和结构相似的代码</p>
<p>一行命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsinspect</span><br></pre></td></tr></table></figure>
<p><img src="/image/js-smell/jsinspect.png"></p>
<p><a href="https://github.com/kucherenko/jscpd" target="_blank" rel="external">JSCPD</a></p>
<p>程序源码的复制/粘贴检查器</p>
<p>(JavaScript, TypeScript, C#, Ruby, CSS, SCSS, HTML, 等等都适用…)</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jscpd -f <span class="keyword">*</span><span class="keyword">*</span>/<span class="keyword">*</span>.js -l 1 -t 30 --languages javascript</span><br></pre></td></tr></table></figure>
<p><img src="/image/js-smell/jscpd.png"></p>
<h2 id="怎么能不被发现？重构">怎么能不被发现？重构</h2><p>把随机颜色部分丢出去…</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomColor = () =&gt; <span class="string">`#<span class="subst">$&#123;(Math.random() * 0xFFFFFF &lt;&lt; 0).toString(16)&#125;</span>;</span><br><span class="line"></span><br><span class="line">let boxes = document.querySelectorAll(".Box");</span><br><span class="line">[].forEach.call(boxes, (element, index) =&gt; &#123;</span><br><span class="line">  element.innerText = "Box: " + index;</span><br><span class="line">  element.style.backgroundColor = randomColor();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let circles = document.querySelectorAll(".Circle");</span><br><span class="line">[].forEach.call(circles, (element, index) =&gt; &#123;</span><br><span class="line">  element.innerText = "Circle: " + index;</span><br><span class="line">  element.style.color = randomColor();</span><br><span class="line">&#125;);</span></span><br></pre></td></tr></table></figure>
<p>再重构</p>
<p>再把怪异的 [].forEach.call 部分丢出去…</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomColor = () =&gt; <span class="string">`#<span class="subst">$&#123;(Math.random() * 0xFFFFFF &lt;&lt; 0).toString(16)&#125;</span>;</span><br><span class="line"></span><br><span class="line">let $$ = selector =&gt; [].slice.call(document.querySelectorAll(selector || '*'));</span><br><span class="line"></span><br><span class="line">$$('.Box').forEach((element, index) =&gt; &#123;</span><br><span class="line">  element.innerText = "Box: " + index;</span><br><span class="line">  element.style.backgroundColor = randomColor();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$$(".Circle").forEach((element, index) =&gt; &#123;</span><br><span class="line">  element.innerText = "Circle: " + index;</span><br><span class="line">  element.style.color = randomColor();</span><br><span class="line">&#125;);</span></span><br></pre></td></tr></table></figure>
<p>再再重构</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomColor = () =&gt; <span class="string">`#<span class="subst">$&#123;(Math.random() * 0xFFFFFF &lt;&lt; 0).toString(16)&#125;</span>;</span><br><span class="line"></span><br><span class="line">let $$ = selector =&gt; [].slice.call(document.querySelectorAll(selector || '*'));</span><br><span class="line"></span><br><span class="line">let updateElement = (selector, textPrefix, styleProperty) =&gt; &#123;</span><br><span class="line">  $$(selector).forEach((element, index) =&gt; &#123;</span><br><span class="line">    element.innerText = textPrefix + ': ' + index;</span><br><span class="line">    element.style[styleProperty] = randomColor();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateElement('.Box', 'Box', 'backgroundColor');</span><br><span class="line"></span><br><span class="line">updateElement('.Circle', 'Circle', 'color');</span></span><br></pre></td></tr></table></figure>
<h2 id="资源-1">资源</h2><ul>
<li><a href="https://github.com/danielstjules" target="_blank" rel="external">jsinspect</a>  </li>
<li><a href="https://github.com/kucherenko/jscpd" target="_blank" rel="external">jscpd</a>  </li>
<li><a href="http://codepen.io/elijahmanor/pen/myQebo" target="_blank" rel="external">CodePen</a> </li>
</ul>
<h1 id="switch_味道">switch 味道</h1><h2 id="难闻的代码-1">难闻的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Triangle'</span>:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Square'</span>:</span><br><span class="line">      area = <span class="built_in">Math</span>.pow(options.width, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Rectangle'</span>:</span><br><span class="line">      area = options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid shape: '</span> + shape);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(<span class="string">'Triangle'</span>,  &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Square'</span>,    &#123; width: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Rectangle'</span>, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Bogus'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="为毛是这个味？违背“开放/封闭原则”">为毛是这个味？违背“<a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design" target="_blank" rel="external">开放/封闭原则</a>”</h2><p>增加个新形状</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Triangle'</span>:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Square'</span>:</span><br><span class="line">      area = <span class="built_in">Math</span>.pow(options.width, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Rectangle'</span>:</span><br><span class="line">      area = options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Circle'</span>:</span><br><span class="line">      area = <span class="built_in">Math</span>.PI * <span class="built_in">Math</span>.pow(options.radius, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid shape: '</span> + shape);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加点设计模式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">shapes</span>) </span>&#123; <span class="comment">// triangle.js</span></span><br><span class="line">  <span class="keyword">var</span> Triangle = shapes.Triangle = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.width = options.width;</span><br><span class="line">    <span class="keyword">this</span>.height = options.height;</span><br><span class="line">  &#125;;</span><br><span class="line">  Triangle.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span> * <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;(<span class="built_in">window</span>.shapes = <span class="built_in">window</span>.shapes || &#123;&#125;));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Shape = <span class="built_in">window</span>.shapes[shape], area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Shape &amp;&amp; <span class="keyword">typeof</span> Shape === <span class="string">'function'</span>) &#123;</span><br><span class="line">    area = <span class="keyword">new</span> Shape(options).getArea();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid shape: '</span> + shape);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(<span class="string">'Triangle'</span>,  &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Square'</span>,    &#123; width: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Rectangle'</span>, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Bogus'</span>);</span><br></pre></td></tr></table></figure>
<p>再增加新形状时</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">shapes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Circle = shapes.Circle = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = options.radius;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Circle.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="built_in">Math</span>.pow(<span class="keyword">this</span>.radius, <span class="number">2</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Circle.prototype.getCircumference = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;(<span class="built_in">window</span>.shapes = <span class="built_in">window</span>.shapes || &#123;&#125;));</span><br></pre></td></tr></table></figure>
<h2 id="还有其它的味道吗？神奇的字符串">还有其它的味道吗？神奇的字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Triangle'</span>:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">/* ... more code ... */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(<span class="string">'Triangle'</span>, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>神奇的字符串重构为对象类型</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="string">'Triangle'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> shapeType.triangle:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(shapeType.triangle, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>神奇字符重构为 CONST &amp; SYMBOLS</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="keyword">new</span> <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> shapeType.triangle:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(shapeType.triangle, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="工具！？！">工具！？！</h2><p>木有 :(</p>
<p><a href="http://bit.ly/eslint-plugin-smells" target="_blank" rel="external">ESLINT-PLUGIN-SMELLS</a><br>用于 JavaScript Smells（味道） 的 ESLint 规则</p>
<p>规则</p>
<ul>
<li>no-switch - 不允许使用  switch  声明</li>
<li>no-complex-switch-case -  不允许使用复杂的  switch  声明</li>
</ul>
<h2 id="资源-2">资源</h2><ul>
<li><a href="http://codepen.io/elijahmanor/pen/OPazmm" target="_blank" rel="external">CodePen</a>  </li>
<li><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="external">Addy Osmani’s JavaScript Design Patterns eBook</a>  </li>
<li><a href="http://eslint.org/" target="_blank" rel="external">ESLint</a>  </li>
<li><a href="https://github.com/elijahmanor/eslint-plugin-smells" target="_blank" rel="external">eslint-plugin-smells</a>  </li>
<li><a href="http://www.2ality.com/2015/02/es6-scoping.html" target="_blank" rel="external">ES6 Scoping</a>  </li>
<li><a href="http://www.2ality.com/2014/12/es6-symbols.html" target="_blank" rel="external">ES6 Symbols</a>  </li>
<li><a href="http://babeljs.io/docs/learn-es6" target="_blank" rel="external">Learn ES6</a></li>
</ul>
<h1 id="this_深渊的味道">this 深渊的味道</h1><h2 id="难闻的代码-2">难闻的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth = [&#123; clean: <span class="literal">false</span> &#125;, &#123; clean: <span class="literal">false</span> &#125;, &#123; clean: <span class="literal">false</span> &#125;];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">tooth</span>) </span>&#123;</span><br><span class="line">    that.clean(tooth);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.clean = <span class="function"><span class="keyword">function</span>(<span class="params">tooth</span>) </span>&#123;</span><br><span class="line">  tooth.clean = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.brush();</span><br><span class="line"><span class="built_in">console</span>.log(person.teeth);</span><br></pre></td></tr></table></figure>
<h2 id="为什么是这个味？that_还是_self_还是_selfie">为什么是这个味？that 还是 self 还是 selfie</h2><p>替换方案<br>1) bind</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">tooth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clean(tooth);</span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>替换方案<br>2) forEach 的第二个参数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">tooth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clean(tooth);</span><br><span class="line">  &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>替换方案<br>3) ECMAScript 2015 (ES6)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(tooth =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.clean(tooth);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>4a) 函数式编程</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="keyword">this</span>.clean);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>4b) 函数式编程</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="keyword">this</span>.clean.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="工具-1">工具</h2><p>ESLint</p>
<ul>
<li><a href="https://github.com/elijahmanor/eslint-plugin-smells" target="_blank" rel="external">no-this-assign</a> (eslint-plugin-smells) </li>
<li><a href="http://eslint.org/docs/rules/consistent-this" target="_blank" rel="external">consistent-this</a> </li>
<li><a href="http://eslint.org/docs/rules/no-extra-bind" target="_blank" rel="external">no-extra-bind</a></li>
</ul>
<h1 id="字符串连接的味道">字符串连接的味道</h1><h2 id="难闻的代码-3">难闻的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> build = <span class="function"><span class="keyword">function</span>(<span class="params">id, href</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $( <span class="string">"&lt;div id='tab'&gt;&lt;a href='"</span> + href + <span class="string">"' id='"</span>+ id + <span class="string">"'&gt;&lt;/div&gt;"</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="为毛是这个味？因为字符串连接">为毛是这个味？因为字符串连接</h2><p>替换方案<br>@thomasfuchs <a href="http://mir.aculo.us/2011/03/09/little-helpers-a-tweet-sized-javascript-templating-engine/" target="_blank" rel="external">推文上的 JavaScript 模板引擎</a> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">s, d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> d)</span><br><span class="line">    s = s.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'&#123;'</span> + p + <span class="string">'&#125;'</span>, <span class="string">'g'</span>), d[p]);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> build = <span class="function"><span class="keyword">function</span>(<span class="params">id, href</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    id: id</span><br><span class="line">    href: href</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> t(<span class="string">'&lt;div id="tab"&gt;&lt;a href="&#123;href&#125;" id="&#123;id&#125;"&gt;&lt;/div&gt;'</span>, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>替换方案<br>2) ECMAScript 2015 (ES6) 模板字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> build = (id, href) =&gt;</span><br><span class="line">  <span class="string">`&lt;div id="tab"&gt;&lt;a href="<span class="subst">$&#123;href&#125;</span>" id="<span class="subst">$&#123;id&#125;</span>"&gt;&lt;/div&gt;`</span>;</span><br></pre></td></tr></table></figure>
<p>替换方案<br>3) ECMAScript 2015 (ES6)  模板字符串  (多行)</p>
<p>替换方案<br>4) 其它小型库或大型库/框架</p>
<ul>
<li>Lowdash 或 Underscore</li>
<li>Angular</li>
<li>React</li>
<li>Ember</li>
<li>等等…</li>
</ul>
<h2 id="工具-2">工具</h2><p>ESLINT-PLUGIN-SMELLS<br><a href="http://bit.ly/eslint-plugin-smells" target="_blank" rel="external">no-complex-string-concat</a> </p>
<h2 id="资源-3">资源</h2><p><a href="http://mir.aculo.us/2011/03/09/little-helpers-a-tweet-sized-javascript-templating-engine/" target="_blank" rel="external">Tweet Sized JavaScript Templating Engine</a> by @thomasfuchs<br>Learn ECMAScript 2015 (ES6) - <a href="http://babeljs.io/docs/learn-es6/" target="_blank" rel="external">http://babeljs.io/docs/learn-es6/</a></p>
<h1 id="jQuery_调查">jQuery 调查</h1><h2 id="难闻的代码-4">难闻的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.Component'</span>)</span><br><span class="line">    .find(<span class="string">'button'</span>)</span><br><span class="line">      .addClass(<span class="string">'Component-button--action'</span>)</span><br><span class="line">      .click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">'HEY!'</span>); &#125;)</span><br><span class="line">    .end()</span><br><span class="line">    .mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; $(<span class="keyword">this</span>).addClass(<span class="string">'Component--over'</span>); &#125;)</span><br><span class="line">    .mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; $(<span class="keyword">this</span>).removeClass(<span class="string">'Component--over'</span>); &#125;)</span><br><span class="line">    .addClass(<span class="string">'initialized'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="为毛是这个味？丧心病狂的链式调用">为毛是这个味？丧心病狂的链式调用</h2><p>愉快地重构吧</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Event Delegation before DOM Ready</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'mouseenter mouseleave'</span>, <span class="string">'.Component'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).toggleClass(<span class="string">'Component--over'</span>, e.type === <span class="string">'mouseenter'</span>);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'.Component'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'HEY!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.Component button'</span>).addClass(<span class="string">'Component-button--action'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>最终 Demo</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="pvQQZw" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/pvQQZw/" target="_blank" rel="external">pvQQZw</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h2 id="工具-3">工具</h2><p>ESLINT-PLUGIN-SMELLS</p>
<ul>
<li><a href="http://bit.ly/eslint-plugin-smells" target="_blank" rel="external">no-complex-chaining</a> </li>
</ul>
<h1 id="难以琢磨的计时器">难以琢磨的计时器</h1><h2 id="难闻的代码-5">难闻的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start setInterval'</span>);</span><br><span class="line">  someLongProcess(getRandomInt(<span class="number">2000</span>, <span class="number">4000</span>));</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someLongProcess</span>(<span class="params">duration</span>) </span>&#123;</span><br><span class="line">  setTimeout(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'long process: '</span> + duration); &#125;,</span><br><span class="line">    duration</span><br><span class="line">  );  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="为毛这个味？无法同步的计时器">为毛这个味？无法同步的计时器</h2><p>Demo: setInterval</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="bNQmzP" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/bNQmzP/" target="_blank" rel="external">bNQmzP</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>用 setTimeout 保证顺序</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start setTimeout'</span>)</span><br><span class="line">  someLongProcess(getRandomInt(<span class="number">2000</span>, <span class="number">4000</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(timer, <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someLongProcess</span>(<span class="params">duration, callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'long process: '</span> + duration);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;, duration);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* getRandomInt(min, max) &#123;&#125; */</span></span><br></pre></td></tr></table></figure>
<p>Demo: setTimeout </p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="raQQay" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/raQQay/" target="_blank" rel="external">raQQay</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h1 id="重复定义">重复定义</h1><h2 id="难闻的代码-6">难闻的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="keyword">this</span>.appendAnalyticsData(data);</span><br><span class="line">data = <span class="keyword">this</span>.appendSubmissionData(data);</span><br><span class="line">data = <span class="keyword">this</span>.appendAdditionalInputs(data);</span><br><span class="line">data = <span class="keyword">this</span>.pruneObject(data);</span><br></pre></td></tr></table></figure>
<p>替换方案<br>1) 嵌套调用函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="keyword">this</span>.pruneObject(</span><br><span class="line">  <span class="keyword">this</span>.appendAdditionalInputs(</span><br><span class="line">    <span class="keyword">this</span>.appendSubmissionData(</span><br><span class="line">      <span class="keyword">this</span>.appendAnalyticsData(data)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>2) forEach<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [</span><br><span class="line">  <span class="keyword">this</span>.appendAnalyticsData,</span><br><span class="line">  <span class="keyword">this</span>.appendSubmissionData,</span><br><span class="line">  <span class="keyword">this</span>.appendAdditionalInputs,</span><br><span class="line">  <span class="keyword">this</span>.pruneObject</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  data = func(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>3) reduce<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [</span><br><span class="line">  <span class="keyword">this</span>.appendAnalyticsData,</span><br><span class="line">  <span class="keyword">this</span>.appendSubmissionData,</span><br><span class="line">  <span class="keyword">this</span>.appendAdditionalInputs,</span><br><span class="line">  <span class="keyword">this</span>.pruneObject</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">data = funcs.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">memo, func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> func(memo);</span><br><span class="line">&#125;, data);</span><br></pre></td></tr></table></figure></p>
<p>4) <a href="https://lodash.com/docs#flow" target="_blank" rel="external">flow</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = _.flow(</span><br><span class="line">  <span class="keyword">this</span>.appendAnalyticsData,</span><br><span class="line">  <span class="keyword">this</span>.appendSubmissionData,</span><br><span class="line">  <span class="keyword">this</span>.appendAdditionalInputs,</span><br><span class="line">  <span class="keyword">this</span>.pruneObject</span><br><span class="line">)(data);</span><br></pre></td></tr></table></figure></p>
<h2 id="工具-4">工具</h2><p>ESLINT-PLUGIN-SMELLS</p>
<ul>
<li><a href="http://bit.ly/eslint-plugin-smells" target="_blank" rel="external">no-reassign</a> </li>
</ul>
<h2 id="资源-4">资源</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="external">forEach</a>  </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">reduce</a>  </li>
<li><a href="https://lodash.com/docs#flow" target="_blank" rel="external">_.flow</a> </li>
</ul>
<h1 id="过度耦合">过度耦合</h1><h2 id="难闻的代码-7">难闻的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShoppingCart</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.items = []; &#125;</span><br><span class="line">ShoppingCart.prototype.addItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items.push(item);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">Product.prototype.addToCart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  shoppingCart.addItem(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shoppingCart = <span class="keyword">new</span> ShoppingCart();</span><br><span class="line"><span class="keyword">var</span> product = <span class="keyword">new</span> Product(<span class="string">'Socks'</span>);</span><br><span class="line">product.addToCart();</span><br><span class="line"><span class="built_in">console</span>.log(shoppingCart.items);</span><br></pre></td></tr></table></figure>
<h2 id="为毛是这个味？紧密耦合的依赖关系">为毛是这个味？紧密耦合的依赖关系</h2><p>如何改善！？！</p>
<ol>
<li>依赖注入</li>
<li><p>消息订阅</p>
</li>
<li><p>依赖注入 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShoppingCart</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.items = []; &#125;</span><br><span class="line">ShoppingCart.prototype.addItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items.push(item);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, shoppingCart</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.shoppingCart = shoppingCart;</span><br><span class="line">&#125;</span><br><span class="line">Product.prototype.addToCart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.shoppingCart.addItem(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shoppingCart = <span class="keyword">new</span> ShoppingCart();</span><br><span class="line"><span class="keyword">var</span> product = <span class="keyword">new</span> Product(<span class="string">'Socks'</span>, shoppingCart);</span><br><span class="line">product.addToCart();</span><br><span class="line"><span class="built_in">console</span>.log(shoppingCart.items);</span><br></pre></td></tr></table></figure>
</li>
<li><p>消息订阅 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> channel = postal.channel();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShoppingCart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items = [];</span><br><span class="line">  channel.subscribe(<span class="string">'shoppingcart.add'</span>, <span class="keyword">this</span>.addItem);</span><br><span class="line">&#125;</span><br><span class="line">ShoppingCart.prototype.addItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items.push(item);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">Product.prototype.addToCart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  channel.publish(<span class="string">'shoppingcart.add'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shoppingCart = <span class="keyword">new</span> ShoppingCart();</span><br><span class="line"><span class="keyword">var</span> product = <span class="keyword">new</span> Product(<span class="string">'Socks'</span>);</span><br><span class="line">product.addToCart();</span><br><span class="line"><span class="built_in">console</span>.log(shoppingCart.items);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>资源</p>
<ul>
<li><a href="https://github.com/postaljs/postal.js" target="_blank" rel="external">postal</a> by @ifandelse</li>
</ul>
<h1 id="连续不断的交互">连续不断的交互</h1><h2 id="难闻的代码-8">难闻的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Make Ajax call for autocomplete</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Demo: 根本停不下来</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="LEXBdX" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/LEXBdX/" target="_blank" rel="external">LEXBdX</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>解决方案：节流阀<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, _.throttle(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Make Ajax call for autocomplete</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;, <span class="number">500</span>));</span><br></pre></td></tr></table></figure></p>
<p>Demo: </p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="azQjGj" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/azQjGj/" target="_blank" rel="external">azQjGj</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>解决方案：DEBOUNCE<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, _.debounce(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Make Ajax call for autocomplete</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;, <span class="number">500</span>));</span><br></pre></td></tr></table></figure></p>
<p>Demo</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="bNQjje" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/bNQjje/" target="_blank" rel="external">bNQjje</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>资源</p>
<ul>
<li><a href="https://lodash.com/" target="_blank" rel="external">lodash</a>  </li>
<li><a href="https://lodash.com/docs#throttle" target="_blank" rel="external">throttle</a> </li>
<li><a href="https://lodash.com/docs#debounce" target="_blank" rel="external">debounce</a></li>
</ul>
<h1 id="匿名函数">匿名函数</h1><h2 id="难闻的代码-9">难闻的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>给函数命名的原因：</p>
<ol>
<li>堆栈追踪</li>
<li>去关联</li>
<li><p>代码复用</p>
</li>
<li><p>堆栈追踪</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/image/js-smell/06-1-a.png"></p>
<p>修改后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> <span class="title">matches</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><img src="/image/js-smell/06-1-b.png"></p>
<ol>
<li>去关联</li>
</ol>
<p>单次事件绑定<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'button'</span>)</span><br><span class="line">  .addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">'Ka-boom!'</span>);</span><br><span class="line">    <span class="keyword">this</span>.removeEventListener(<span class="string">'click'</span>, handler);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p>
<p>Demo</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="PwxBxP" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/PwxBxP/" target="_blank" rel="external">PwxBxP</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<ol>
<li>代码复用</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kaboom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">'Ka-boom'</span>); &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'button'</span>).addEventListener(<span class="string">'click'</span>, kaboom);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#egg'</span>).addEventListener(<span class="string">'mouseenter'</span>, kaboom);</span><br></pre></td></tr></table></figure>
<h2 id="资源-5">资源</h2><ul>
<li><a href="https://developer.chrome.com/devtools" target="_blank" rel="external">Chrome DevTools</a> </li>
</ul>
<h1 id="结尾">结尾</h1><p>更多的 ESLint 规则</p>
<ul>
<li><a href="https://www.npmjs.com/package/eslint-plugin-react" target="_blank" rel="external">eslint-plugin-react</a>  </li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-angular" target="_blank" rel="external">eslint-plugin-angular</a> </li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-ember" target="_blank" rel="external">eslint-plugin-ember</a>  </li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-backbone" target="_blank" rel="external">eslint-plugin-backbone</a> </li>
</ul>
<h2 id="资源-6">资源</h2><p>NPM 搜索  <a href="https://www.npmjs.com/search?q=eslint-plugin" target="_blank" rel="external">eslint-plugin</a>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：《<a href="http://elijahmanor.github.io/talks/js-smells/#/">ELIMINATE JAVASCRIPT CODE SMELLS</a>》<br>作者：<a href="http://elijahmanor.com">@elijahmanor</a><br>笔记：<a href="http://weibo.com/newwave">涂鸦码农</a></p>
</blockquote>
<h1 id="难闻的代码">难闻的代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* const */</span> <span class="keyword">var</span> CONSONANTS = <span class="string">'bcdfghjklmnpqrstvwxyz'</span>;</span><br><span class="line"><span class="comment">/* const */</span> <span class="keyword">var</span> VOWELS = <span class="string">'aeiou'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">englishToPigLatin</span>(<span class="params">english</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* const */</span> <span class="keyword">var</span> SYLLABLE = <span class="string">'ay'</span>;</span><br><span class="line">  <span class="keyword">var</span> pigLatin = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (english !== <span class="literal">null</span> &amp;&amp; english.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    (VOWELS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span> ||</span><br><span class="line">    CONSONANTS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span> )) &#123;</span><br><span class="line">    <span class="keyword">if</span> (VOWELS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      pigLatin = english + SYLLABLE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> preConsonants = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; english.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CONSONANTS.indexOf(english[i]) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">          preConsonants += english[i];</span><br><span class="line">          <span class="keyword">if</span> (preConsonants == <span class="string">'q'</span> &amp;&amp;</span><br><span class="line">            i+<span class="number">1</span> &lt; english.length &amp;&amp; english[i+<span class="number">1</span>] == <span class="string">'u'</span>) &#123;</span><br><span class="line">            preConsonants += <span class="string">'u'</span>;</span><br><span class="line">            i += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      pigLatin = english.substring(i) + preConsonants + SYLLABLE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pigLatin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="为毛是这个味？">为毛是这个味？</h2>]]>
    
    </summary>
    
      <category term="ES6" scheme="http://jinlong.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 错误以及如何修复]]></title>
    <link href="http://jinlong.github.io/2015/02/01/javascript-errors-and-how-to-fix-them/"/>
    <id>http://jinlong.github.io/2015/02/01/javascript-errors-and-how-to-fix-them/</id>
    <published>2015-02-01T14:09:27.000Z</published>
    <updated>2015-10-29T03:00:24.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文《<a href="http://davidwalsh.name/fix-javascript-errors" target="_blank" rel="external">JavaScript Errors and How to Fix Them</a>》<br>作者：Jani Hartikainen<br>翻译：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码农</a></p>
</blockquote>
<p>JavaScript 调试是一场噩梦：首先给出的错误非常难以理解，其次给出的行号不总有帮助。有个查找错误含义，及修复措施的列表，是不是很有用？</p>
<p>以下是奇怪的 JavaScript 错误列表。同样的错误，不同的浏览器会给出不同的消息，因此有一些不同的例子。</p>
<h3 id="如何读懂错误？">如何读懂错误？</h3><p>首先，让我们快速看下错误信息的结构。理解结构有助于理解错误，如果遇到列表之外的错误会减少麻烦。</p>
<p>Chrome 中典型的错误像这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">TypeError</span>: <span class="literal">undefined</span> is not a <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure>
<p>错误的结构如下：</p>
<ol>
<li><p><strong>Uncaught TypeError：</strong>这部分信息通常不是很有用。<code>Uncaught</code> 表示错误没有被 <code>catch</code> 语句捕获，<code>TypeError</code> 是错误的名字。</p>
</li>
<li><p><strong>undefined is not a function:</strong> 这部分信息，你必须逐字阅读。比如这里表示代码尝试使用 <code>undefined</code> ，把它当做一个函数。</p>
</li>
</ol>
<p>其它基于 webkit 的浏览器，比如 Safari ，给出的错误格式跟 Chrome 很类似。Firefox 也类似，但是不总包含第一部分，最新版本的 IE 也给出比 Chrome 简单的错误 - 但是在这里，简单并不总代表好。</p>
<p>以下是真正的错误。</p>
<h3 id="Uncaught_TypeError:_undefined_is_not_a_function">Uncaught TypeError: undefined is not a function</h3><p><strong>相关错误：</strong>number is not a function, object is not a function, string is not a function, Unhandled Error: ‘foo’ is not a function, Function Expected</p>
<p>当尝试调用一个像方法的值时，这个值并不是一个方法。比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">undefined</span>;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果你尝试调用一个对象的方法时，你输错了名字，这个典型的错误很容易发生。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementByID(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure>
<p>由于对象的属性不存在，默认是 <code>undefined</code> ，以上代码将导致这个错误。</p>
<p>尝试调用一个像方法的数字，“number is not a function” 错误出现。</p>
<p><strong>如何修复错误：</strong>确保方法名正确。这个错误的行号将指出正确的位置。</p>
<h3 id="Uncaught_ReferenceError:_Invalid_left-hand_side_in_assignment">Uncaught ReferenceError: Invalid left-hand side in assignment</h3><p><strong>相关错误：</strong>Uncaught exception: ReferenceError: Cannot assign to ‘functionCall()’, Uncaught exception: ReferenceError: Cannot assign to ‘this’</p>
<p>尝试给不能赋值的东西赋值，引起这个错误。</p>
<p>这个错误最常见的例子出现在 if 语句使用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(doSomething() = <span class="string">'somevalue'</span>)</span><br></pre></td></tr></table></figure>
<p>此例中，程序员意外地使用了单个等号，而不是双等号。“left-hand side in assignment” 提及了等号左手边的部分，因此你可以看到以上例子，左手边包含不能赋值的东西，导致这个错误。</p>
<p><strong>如何修复错误：</strong>确保没有给函数结果赋值，或者给 <code>this</code> 关键字赋值。</p>
<h3 id="Uncaught_TypeError:_Converting_circular_structure_to_JSON">Uncaught TypeError: Converting circular structure to JSON</h3><p><strong>相关错误：</strong>Uncaught exception: TypeError: JSON.stringify: Not an acyclic Object, TypeError: cyclic object value, Circular reference in value argument not supported</p>
<p>把循环引用的对象，传给 <code>JSON.stringify</code> 总会引起错误。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; &#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; a: a &#125;;</span><br><span class="line">a.b = b;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(a);</span><br></pre></td></tr></table></figure>
<p>由于以上的 <code>a</code> 和 <code>b</code> 循环引用彼此，结果对象无法转换成 JSON。</p>
<p><strong>如何修复错误：</strong>移除任何想转换成 JSON 的对象中的循环引用。</p>
<h3 id="Unexpected_token_;">Unexpected token ;</h3><p><strong>相关错误：</strong>Expected ), missing ) after argument list</p>
<p>JavaScript 解释器预期的东西没有被包含。不匹配的圆括号或方括号通常引起这个错误。</p>
<p>错误信息可能有所不同 - “Unexpected token ]” 或者 “Expected {” 等。</p>
<p><strong>如何修复错误：</strong>有时错误出现的行号并不准确，因此很难修复。</p>
<ul>
<li>[ ] { } ( ) 这几个符号不配对常常导致出错。检查所有的圆括号和方括号是否配对。行号指出的不仅是问题字符。</li>
<li>Unexpected / 跟正则表达式有关。此时行号通常是正确的。</li>
<li>Unexpected ;  对象或者数组字面量里面有个 ; 通常引起这个错误，或者函数调用的参数列表里有个分号。此时的行号通常也是正确的。</li>
</ul>
<h3 id="Uncaught_SyntaxError:_Unexpected_token_ILLEGAL">Uncaught SyntaxError: Unexpected token ILLEGAL</h3><p><strong>相关错误：</strong>Unterminated String Literal, Invalid Line Terminator</p>
<p>一个字符串字面量少了结尾的引号。</p>
<p><strong>如何修复错误：</strong>确保所有的字符串都有结束的引号。</p>
<h3 id="Uncaught_TypeError:_Cannot_read_property_‘foo’_of_null,_Uncaught_TypeError:_Cannot_read_property_‘foo’_of_undefined">Uncaught TypeError: Cannot read property ‘foo’ of null, Uncaught TypeError: Cannot read property ‘foo’ of undefined</h3><p><strong>相关错误：</strong>TypeError: someVal is null, Unable to get property ‘foo’ of undefined or null reference</p>
<p>尝试读取 <code>null</code> 或者 <code>undefined</code> ，把它当成了对象。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someVal = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(someVal.foo);</span><br></pre></td></tr></table></figure>
<p><strong>如何修复错误：</strong>通常由于拼写错误导致。检查错误指出的行号附近使用的变量名是否正确。</p>
<h3 id="Uncaught_TypeError:_Cannot_set_property_‘foo’_of_null,_Uncaught_TypeError:_Cannot_set_property_‘foo’_of_undefined">Uncaught TypeError: Cannot set property ‘foo’ of null, Uncaught TypeError: Cannot set property ‘foo’ of undefined</h3><p><strong>相关错误：</strong>TypeError: someVal is undefined, Unable to set property ‘foo’ of undefined or null reference</p>
<p>尝试写入 <strong>null</strong> 或者 <strong>undefined</strong> ，把它当成了一个对象。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someVal = <span class="literal">null</span>;</span><br><span class="line">someVal.foo = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><strong>如何修复错误：</strong>也是由于拼写错误所致。检查错误指出的行号附近的变量名。</p>
<h3 id="Uncaught_RangeError:_Maximum_call_stack_size_exceeded">Uncaught RangeError: Maximum call stack size exceeded</h3><p><strong>相关错误：</strong>Related errors: Uncaught exception: RangeError: Maximum recursion depth exceeded, too much recursion, Stack overflow</p>
<p>通常由程序逻辑 bug 引起，导致函数的无限递归调用。</p>
<p><strong>如何修复错误：</strong>检查递归函数中可能导致无限循环 的 bug 。</p>
<h3 id="Uncaught_URIError:_URI_malformed">Uncaught URIError: URI malformed</h3><p><strong>相关错误：</strong>URIError: malformed URI sequence</p>
<p>无效的 decodeURIComponent 调用所致。</p>
<p><strong>如何修复错误：</strong>按照错误指出的行号，检查 <code>decodeURIComponent</code> 调用，它是正确的。</p>
<h3 id="XMLHttpRequest_cannot_load_http://some/url/-_No_‘Access-Control-Allow-Origin’_header_is_present_on_the_requested_resource">XMLHttpRequest cannot load <a href="http://some/url/" target="_blank" rel="external">http://some/url/</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource</h3><p><strong>相关错误：</strong>Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at<br><a href="http://some/url/" target="_blank" rel="external">http://some/url/</a></p>
<p>错误肯定是使用 XMLHttpRequest 引起的。</p>
<p><strong>如何修复：</strong>确保请求的 URL 是正确的，它遵循<a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">同源策略</a> 。最好的方法是从代码中找到错误信息指出的 URL 。</p>
<h3 id="InvalidStateError:_An_attempt_was_made_to_use_an_object_that_is_not,_or_is_no_longer,_usable">InvalidStateError: An attempt was made to use an object that is not, or is no longer, usable</h3><p><strong>相关错误：</strong>InvalidStateError, DOMException code 11</p>
<p>代码调用的方法在当前状态无法调用。通常由 <code>XMLHttpRequest</code> 引起，在方法准备完毕之前调用它会引起错误。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Some-Header'</span>, <span class="string">'val'</span>);</span><br></pre></td></tr></table></figure>
<p>这时就会出错，因为 <code>setRequestHeader</code> 方法只能在 <code>xhr.open</code> 方法之后调用。</p>
<p><strong>如何修复：</strong>查看错误指出的行号，确保代码运行的时机正确，或者在它（例如 <strong>xhr.open</strong><br>）之前添加了不必要的调用</p>
<h3 id="结论">结论</h3><p>我看过不少无用的 JavaScript 错误，比如 PHP 中声名狼藉的异常 <code>Expected T_PAAMAYIM_NEKUDOTAYIM</code> 。抛出更熟悉的错误才更有意义。现代浏览器不再抛出完全无用的错误，才会更有帮助。</p>
<p>你看到的最令人困惑的错误是什么？在评论中分享一下呗。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文《<a href="http://davidwalsh.name/fix-javascript-errors">JavaScript Errors and How to Fix Them</a>》<br>作者：Jani Hartikainen<br>翻译：<a href="http://weibo.com/newwave">涂鸦码农</a></p>
</blockquote>
<p>JavaScript 调试是一场噩梦：首先给出的错误非常难以理解，其次给出的行号不总有帮助。有个查找错误含义，及修复措施的列表，是不是很有用？</p>
<p>以下是奇怪的 JavaScript 错误列表。同样的错误，不同的浏览器会给出不同的消息，因此有一些不同的例子。</p>
<h3 id="如何读懂错误？">如何读懂错误？</h3><p>首先，让我们快速看下错误信息的结构。理解结构有助于理解错误，如果遇到列表之外的错误会减少麻烦。</p>
<p>Chrome 中典型的错误像这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">TypeError</span>: <span class="literal">undefined</span> is not a <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure>
<p>错误的结构如下：</p>
<ol>
<li><p><strong>Uncaught TypeError：</strong>这部分信息通常不是很有用。<code>Uncaught</code> 表示错误没有被 <code>catch</code> 语句捕获，<code>TypeError</code> 是错误的名字。</p>
</li>
<li><p><strong>undefined is not a function:</strong> 这部分信息，你必须逐字阅读。比如这里表示代码尝试使用 <code>undefined</code> ，把它当做一个函数。</p>
</li>
</ol>
<p>其它基于 webkit 的浏览器，比如 Safari ，给出的错误格式跟 Chrome 很类似。Firefox 也类似，但是不总包含第一部分，最新版本的 IE 也给出比 Chrome 简单的错误 - 但是在这里，简单并不总代表好。</p>
<p>以下是真正的错误。</p>
<h3 id="Uncaught_TypeError:_undefined_is_not_a_function">Uncaught TypeError: undefined is not a function</h3><p><strong>相关错误：</strong>number is not a function, object is not a function, string is not a function, Unhandled Error: ‘foo’ is not a function, Function Expected</p>
<p>当尝试调用一个像方法的值时，这个值并不是一个方法。比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">undefined</span>;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSHint 配置浅析]]></title>
    <link href="http://jinlong.github.io/2014/10/25/jshint-configuration/"/>
    <id>http://jinlong.github.io/2014/10/25/jshint-configuration/</id>
    <published>2014-10-25T03:05:14.000Z</published>
    <updated>2015-10-29T03:00:06.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.jshint.com/" target="_blank" rel="external">JSHint</a>，发现错误和潜在问题的社区驱动的工具<br><a href="http://jslinterrors.com/" target="_blank" rel="external">JSLint 错误解析</a></p>
</blockquote>
<h2 id="单独安装">单独安装</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> jshint -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jshint myfile<span class="class">.js</span></span><br><span class="line">myfile<span class="class">.js</span>: line <span class="number">10</span>, col <span class="number">39</span>, Octal literals are not allowed <span class="keyword">in</span> strict mode.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> error</span><br></pre></td></tr></table></figure>
<h2 id="编辑器和IDE插件">编辑器和IDE插件</h2><p><a href="https://github.com/victorporof/Sublime-JSHint" target="_blank" rel="external">Sublime-JSHint</a> </p>
<h3 id="安装">安装</h3><p><code>Ctrl+Shift+P</code> 或 <code>Cmd+Shift+P</code><br>输入 <code>install</code>，选择 <code>Package Control: Install Package</code><br>输入 <code>js gutter</code>，选择 <code>JSHint Gutter</code></p>
<h3 id="使用方法：">使用方法：</h3><p>Tools -&gt; Command Palette (<code>Ctrl+Shift+P</code> 或者 <code>Cmd+Shift+P</code>) 然后输入 <code>jshint</code></p>
<p>– 或者 –</p>
<p><code>Ctrl+Shift+J</code> (或者 Mac 使用 <code>Cmd+Shift+J</code>)</p>
<p>– 或者 –</p>
<p>当前文件右键选择 JSHint -&gt; Lint Code</p>
<p>– 或者 –</p>
<p>打开 JavaScript 文件，菜单 View -&gt; Show Console，然后输入 <code>view.run_command(&quot;jshint&quot;</code>)</p>
<a id="more"></a>
<h3 id="编辑，加载或保存时自动检查">编辑，加载或保存时自动检查</h3><p>右键 -&gt; JSHint -&gt; Set Plugin Options</p>
<p>三项设置为 <code>true</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"lint_on_edit"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"lint_on_load"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"lint_on_save"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="三种配置方式：">三种配置方式：</h2><p>通过 <code>--config</code> 标记手动配置</p>
<p>使用 <strong>.jshintrc</strong> 文件</p>
<p>配置放到项目的 <strong>package.json</strong> 文件里面， <strong>jshintConfig</strong> 下面</p>
<p><a href="http://www.jshint.com/docs/options/" target="_blank" rel="external">自定义 <strong>.jshintrc</strong> 配置文件</a></p>
<h2 id="JSHint_设置">JSHint 设置</h2><h3 id="强制选项">强制选项</h3><p>禁用位运算符，位运算符在 JavaScript 中使用较少，经常是把 &amp;&amp; 错输成 &amp;<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">bitwise:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>循环或者条件语句必须使用花括号包围<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">curly:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>强制使用三等号<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">eqeqeq:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>兼容低级浏览器 IE 6/7/8/9<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">es3:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>禁止重写原生对象的原型，比如 <code>Array</code>，<code>Date</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">freeze:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>代码缩进<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">indent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>禁止定义之前使用变量，忽略 <code>function</code> 函数声明<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">latedef:</span> <span class="string">"nofunc"</span></span><br></pre></td></tr></table></figure></p>
<p>构造器函数首字母大写<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">newcap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>禁止使用 <code>arguments.caller</code> 和 <code>arguments.callee</code>，未来会被弃用， ECMAScript 5 禁止使用 <code>arguments.callee</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">noarg:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>为 <code>true</code> 时，禁止单引号和双引号混用<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"quotmark"</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>变量未定义<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"undef"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>变量未使用<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"unused"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>严格模式<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">strict:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>最多参数个数<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">maxparams</span>: <span class="string">4</span></span><br></pre></td></tr></table></figure></p>
<p>最大嵌套深度<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">maxdepth</span>: <span class="string">4</span></span><br></pre></td></tr></table></figure></p>
<p>复杂度检测<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">maxcomplexity:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>最大行数<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">maxlen</span>: <span class="string">600</span></span><br></pre></td></tr></table></figure></p>
<h3 id="宽松选项">宽松选项</h3><p>控制“缺少分号”的警告<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"asi"</span>: <span class="literal">true</span></span><br><span class="line"><span class="string">"boss"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>忽略 <code>debugger</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"debug"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>控制 <code>eval</code> 使用警告<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"evil"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查一行代码最后声明后面的分号是否遗漏<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"lastsemic"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查不安全的折行，忽略逗号在最前面的编程风格<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"laxcomma"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查循环内嵌套 <code>function</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"loopfunc"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查多行字符串<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"multistr"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查无效的 <code>typeof</code> 操作符值<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"notypeof"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p><code>person[&#39;name&#39;]</code> vs. <code>person.name</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"sub"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p><code>new function () { ... }</code> 和 <code>new Object</code>;<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"supernew"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>在非构造器函数中使用 <code>this</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"validthis"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="环境">环境</h3><p>预定义一些全局变量</p>
<p>预定义全局变量 <code>document</code>，<code>navigator</code>，<code>FileReader</code> 等<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"browser"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>定义用于调试的全局变量：<code>console</code>，<code>alert</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devel"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>定义全局变量<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jquery"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"node"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><a href="http://www.jshint.com/">JSHint</a>，发现错误和潜在问题的社区驱动的工具<br><a href="http://jslinterrors.com/">JSLint 错误解析</a></p>
</blockquote>
<h2 id="单独安装">单独安装</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> jshint -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jshint myfile<span class="class">.js</span></span><br><span class="line">myfile<span class="class">.js</span>: line <span class="number">10</span>, col <span class="number">39</span>, Octal literals are not allowed <span class="keyword">in</span> strict mode.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> error</span><br></pre></td></tr></table></figure>
<h2 id="编辑器和IDE插件">编辑器和IDE插件</h2><p><a href="https://github.com/victorporof/Sublime-JSHint">Sublime-JSHint</a> </p>
<h3 id="安装">安装</h3><p><code>Ctrl+Shift+P</code> 或 <code>Cmd+Shift+P</code><br>输入 <code>install</code>，选择 <code>Package Control: Install Package</code><br>输入 <code>js gutter</code>，选择 <code>JSHint Gutter</code></p>
<h3 id="使用方法：">使用方法：</h3><p>Tools -&gt; Command Palette (<code>Ctrl+Shift+P</code> 或者 <code>Cmd+Shift+P</code>) 然后输入 <code>jshint</code></p>
<p>– 或者 –</p>
<p><code>Ctrl+Shift+J</code> (或者 Mac 使用 <code>Cmd+Shift+J</code>)</p>
<p>– 或者 –</p>
<p>当前文件右键选择 JSHint -&gt; Lint Code</p>
<p>– 或者 –</p>
<p>打开 JavaScript 文件，菜单 View -&gt; Show Console，然后输入 <code>view.run_command(&quot;jshint&quot;</code>)</p>]]>
    
    </summary>
    
      <category term="JSHint" scheme="http://jinlong.github.io/tags/JSHint/"/>
    
      <category term="JSHint" scheme="http://jinlong.github.io/categories/JSHint/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Handlebars 文档笔记]]></title>
    <link href="http://jinlong.github.io/2014/10/19/handlebars-docs/"/>
    <id>http://jinlong.github.io/2014/10/19/handlebars-docs/</id>
    <published>2014-10-19T14:30:55.000Z</published>
    <updated>2015-10-29T02:59:48.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>官方文档：<a href="http://handlebarsjs.com/" target="_blank" rel="external">http://handlebarsjs.com/</a><br>笔记：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>Handlebars 兼容 <a href="https://github.com/janl/mustache.js" target="_blank" rel="external">Mustache 模板</a>。</p>
<p>对比了几个 Node.js 常用模板，什么 EJS 、Jade 等等，还是感觉 Handlebars 比较顺手，模板只做数据展示，前端逻辑的东西通过 helper 实现，HTML 中没有掺杂太多 JS 的东西，看起来整洁一些。</p>
<p>Express 中引入 Handlebars 模板的话，需要引入<a href="https://github.com/donpark/hbs" target="_blank" rel="external">hbs 模块</a></p>
<hr>
<p><strong>handlebars 表达式</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在上下文中找 title 属性，获取它的值</p>
<p><strong>点分割表达式</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当前上下文找 article 属性，再找它的 title 属性</p>
<p><em>标识符可以是除了以下字符以外的 unicode 字符</em><br>Whitespace ! “ # % &amp; ‘ ( ) * + , . / ; &lt; = &gt; @ [ \ ] ^ ` { | } ~</p>
<a id="more"></a>
<p><strong>不合法的标识符用 “[]” 包装</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#each articles.[10].[#comments]&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;subject&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    &amp;#123;&amp;#123;body&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不转义</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;foo&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Helpers</strong></p>
<p>0或多个参数，用空格分割，每个参数是个 handlebars 表达式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;link story&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><em>link</em> 是 helper 名字，<em>story</em> 是 helper 参数。</p>
<p><strong>注册 helper</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'link'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(</span><br><span class="line">    <span class="string">"&lt;a href='"</span> + object.url + <span class="string">"'&gt;"</span> + object.text + <span class="string">"&lt;/a&gt;"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>helper 返回 HTML ，不想被转义，用 <code>Handlebars.SafeString()</code>。</p>
<p>helper 把接收的上下文作为 <code>this</code> 上下文</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#each items&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>&amp;#123;&amp;#123;agree_button&#125;&#125;<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>上下文和 helper：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = &#123;</span><br><span class="line">  items: [</span><br><span class="line">    &#123;name: <span class="string">"Handlebars"</span>, emotion: <span class="string">"love"</span>&#125;,</span><br><span class="line">    &#123;name: <span class="string">"Mustache"</span>, emotion: <span class="string">"enjoy"</span>&#125;,</span><br><span class="line">    &#123;name: <span class="string">"Ember"</span>, emotion: <span class="string">"want to learn"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'agree_button'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(</span><br><span class="line">    <span class="string">"&lt;button&gt;I agree. I "</span> + <span class="keyword">this</span>.emotion + <span class="string">" "</span> + <span class="keyword">this</span>.name + <span class="string">"&lt;/button&gt;"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">button</span>&gt;</span>I agree. I love Handlebars<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">button</span>&gt;</span>I agree. I enjoy Mustache<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">button</span>&gt;</span>I agree. I want to learn Ember<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以直接传字符串参数</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;link "See more..." story.url&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;link story.text story.url&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'link'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">text, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(</span><br><span class="line">    <span class="string">"&lt;a href='"</span> + url + <span class="string">"'&gt;"</span> + text + <span class="string">"&lt;/a&gt;"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>helper 最后一个参数也可以接收可选的键值对序列（文档提到的 <strong>hash</strong> 参数）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;link "See more..." href=story.url class="story"&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>hash</strong> 参数的 <code>key</code> 必须是简单的标识符，<code>value</code> 是 Handlebars 表达式， <code>value</code> 可以是简单的标识符，路径，或者字符串。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'link'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">text, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> attrs = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> options.hash) &#123;</span><br><span class="line">    attrs.push(prop + <span class="string">'="'</span> + options.hash[prop] + <span class="string">'"'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(</span><br><span class="line">    <span class="string">"&lt;a "</span> + attrs.join(<span class="string">" "</span>) + <span class="string">"&gt;"</span> + text + <span class="string">"&lt;/a&gt;"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="基础_Blocks">基础 Blocks</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span></span><br><span class="line">    &amp;#123;&amp;#123;#noop&#125;&#125;&amp;#123;&amp;#123;body&#125;&#125;&amp;#123;&amp;#123;/noop&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'noop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> options.fn(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>noop helper 实际跟没有 helper 类似，只是传递上下文，返回字符串。Handlebars 把当前的上下文作为 <code>this</code> 。</p>
<h1 id="内建_helper">内建 helper</h1><h2 id="with_helper">with helper</h2><p>根据模板传递的上下文解析模板</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#with story&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"intro"</span>&gt;</span>&amp;#123;&amp;#123;&#123;intro&#125;&#125;&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span>&amp;#123;&amp;#123;&#123;body&#125;&#125;&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/with&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当 JSON 对象包含嵌套属性时，不必再三重复父属性的名字。比如以下数据：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  title: <span class="string">"First Post"</span>,</span><br><span class="line">  story: &#123;</span><br><span class="line">    intro: <span class="string">"Before the jump"</span>,</span><br><span class="line">    body: <span class="string">"After the jump"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>helper 接收参数，参数为 JSON 属性的 上下文。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'with'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">context, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> options.fn(context);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="简单迭代器_each_helper">简单迭代器 each helper</h2><p>Handlebars 内建了　<strong>each</strong>　迭代器</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"comments"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#each comments&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"comment"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&amp;#123;&amp;#123;subject&#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">      &amp;#123;&amp;#123;&#123;body&#125;&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实现原理如下：　把 comments 数组的每一个元素作为上下文解析模板</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'each'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">context, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, j=context.length; i&lt;j; i++) &#123;</span><br><span class="line">    ret = ret + options.fn(context[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可以用 <code>this</code> 引用迭代元素</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"people_list"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#each people&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>&amp;#123;&amp;#123;this&#125;&#125;<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上下文：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  people: [</span><br><span class="line">    <span class="string">"Yehuda Katz"</span>,</span><br><span class="line">    <span class="string">"Alan Johnson"</span>,</span><br><span class="line">    <span class="string">"Charles Jolley"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"people_list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Yehuda Katz<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Alan Johnson<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Charles Jolley<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当某一项为空时，可以用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;else&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p> 表达式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#each paragraphs&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>&amp;#123;&amp;#123;this&#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;else&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"empty"</span>&gt;</span>No content<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>通过<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;@index&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p> 可以引用当前的循环索引</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#each array&#125;&#125;</span><br><span class="line">  &amp;#123;&amp;#123;@index&#125;&#125;: &amp;#123;&amp;#123;this&#125;&#125;</span><br><span class="line">&amp;#123;&amp;#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;@key&#125;&#125;</span><br><span class="line">``` </span><br><span class="line">引用当前的键名：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&amp;#123;&amp;#123;#each object&#125;&#125;</span><br><span class="line">  &amp;#123;&amp;#123;@key&#125;&#125;: &amp;#123;&amp;#123;this&#125;&#125;</span><br><span class="line">&amp;#123;&amp;#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>数组迭代的第一步和最后一步用 <code>@first</code> 和 <code>@last</code> 变量表示， 对象迭代时仅 <code>@first</code> 可用。</p>
<h2 id="条件语句_if_helper">条件语句 if helper</h2><p>如果条件参数返回 <code>false</code>, <code>undefined</code>, <code>null</code>, <code>&quot;&quot;</code> 或 <code>[]</code>（非真的值）时，Handlebars 将不渲染该块</p>
<p>Handlebars 内建了 <code>if</code> 和 <code>unless</code> 语句</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#if isActive&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"star.gif"</span> <span class="attribute">alt</span>=<span class="value">"Active"</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>实现原理：根据传入的条件参数，判断是否解析模板</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'if'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">conditional, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(conditional) &#123;</span><br><span class="line">    <span class="keyword">return</span> options.fn(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Handlebars 还提供了 <code>else</code> 语句</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#if isActive&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"star.gif"</span> <span class="attribute">alt</span>=<span class="value">"Active"</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;else&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"cry.gif"</span> <span class="attribute">alt</span>=<span class="value">"Inactive"</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="unless_helper">unless helper</h2><p><code>unless</code> 跟 <code>if</code> 正好相反，如果表达式返回 false ，模板将被渲染。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#unless license&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">h3</span> <span class="attribute">class</span>=<span class="value">"warning"</span>&gt;</span>WARNING: This entry does not have a license!<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/unless&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当 license 返回 <code>false</code>，Handlebars 将渲染 warning 。</p>
<h2 id="log_helper">log helper</h2><p>记录上下文状态</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;log "Look at me!"&#125;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="JavaScript_编译模板">JavaScript 编译模板</h1><p>模板可以包含在特殊的 <code>&lt;script&gt;</code> 里：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">id</span>=<span class="value">"entry-template"</span> <span class="attribute">type</span>=<span class="value">"text/x-handlebars-template"</span>&gt;</span><span class="undefined"></span><br><span class="line">  template content</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后用 <code>Handlebars.compile</code> 编译模板</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source   = $(<span class="string">"#entry-template"</span>).html();</span><br><span class="line"><span class="keyword">var</span> template = Handlebars.compile(source);</span><br></pre></td></tr></table></figure>
<p>获取编译后的 HTML 模板，用 JSON 数据填充模板</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = &#123;title: <span class="string">"My New Post"</span>, body: <span class="string">"This is my first post!"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> html    = template(context);</span><br></pre></td></tr></table></figure>
<p>最终结果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>My New Post<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span></span><br><span class="line">    This is my first post!</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="HTML_转义">HTML 转义</h2><p>不想转义用 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;</span><br></pre></td></tr></table></figure>
<p>模板：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span></span><br><span class="line">    &amp;#123;&amp;#123;&#123;body&#125;&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上下文数据：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  title: <span class="string">"All about &lt;p&gt; Tags"</span>,</span><br><span class="line">  body: <span class="string">"&lt;p&gt;This is a post about &amp;lt;p&amp;gt; tags&lt;/p&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终结果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>All About &amp;lt;p&amp;gt; Tags<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>This is a post about &amp;lt;p&amp;gt; tags<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <code>Handlebars.SafeString</code> 方法不做转义，通常返回 <code>new Handlebars.SafeString(result)</code>。此种情形，你可能想手动转义参数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'link'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">text, url</span>) </span>&#123;</span><br><span class="line">  text = Handlebars.Utils.escapeExpression(text);</span><br><span class="line">  url  = Handlebars.Utils.escapeExpression(url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'&lt;a href="'</span> + url + <span class="string">'"&gt;'</span> + text + <span class="string">'&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>模板注释<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;! &#125;&#125;</span><br><span class="line">``` </span><br><span class="line">或者 </span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&amp;#123;&amp;#123;!-- --&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;! only output this author names if an author exists &#125;&#125;</span><br><span class="line">  &amp;#123;&amp;#123;#if author&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;firstName&#125;&#125; &amp;#123;&amp;#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/if&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>模板注释不会输出，HTML 注释会输出</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;! This comment will not be in the output &#125;&#125;</span><br><span class="line">  <span class="comment">&lt;!-- This comment will be in the output --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Partials_局部模板">Partials 局部模板</h2><p>用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&gt; partialName&#125;&#125;</span><br><span class="line">``` </span><br><span class="line">引入局部模板，局部模板可以使字符串，也可以是编译模板的函数。</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">var source = "<span class="tag">&lt;<span class="title">ul</span>&gt;</span>&amp;#123;&amp;#123;#people&#125;&#125;<span class="tag">&lt;<span class="title">li</span>&gt;</span>&amp;#123;&amp;#123;&gt; link&#125;&#125;<span class="tag">&lt;/<span class="title">li</span>&gt;</span>&amp;#123;&amp;#123;/people&#125;&#125;<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>";</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerPartial(<span class="string">'link'</span>, <span class="string">'&lt;a href="/people/&amp;#123;&amp;#123;id&#125;&#125;"&gt;&amp;#123;&amp;#123;name&#125;&#125;&lt;/a&gt;'</span>)</span><br><span class="line"><span class="keyword">var</span> template = Handlebars.compile(source);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="string">"people"</span>: [</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Alan"</span>, <span class="string">"id"</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Yehuda"</span>, <span class="string">"id"</span>: <span class="number">2</span> &#125;</span><br><span class="line">  ]&#125;;</span><br><span class="line"></span><br><span class="line">template(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should render:</span></span><br><span class="line"><span class="comment">// &lt;ul&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li&gt;&lt;a href="/people/1"&gt;Alan&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li&gt;&lt;a href="/people/2"&gt;Yehuda&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// &lt;/ul&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="内建工具">内建工具</h1><h2 id="转义字符串">转义字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.escapeExpression(string)</span><br></pre></td></tr></table></figure>
<h2 id="判断空值">判断空值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.isEmpty(value)</span><br></pre></td></tr></table></figure>
<h2 id="扩展对象">扩展对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.extend(foo, &#123;bar: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="转字符串">转字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.toString(obj)</span><br></pre></td></tr></table></figure>
<h2 id="判断数组">判断数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.isArray(obj)</span><br></pre></td></tr></table></figure>
<h2 id="判断函数">判断函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.isFunction(obj)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[前段时间项目正好用到 Handlebars ，边研究文档边翻译了下，留个备份]]>
    
    </summary>
    
      <category term="Handlebars" scheme="http://jinlong.github.io/tags/Handlebars/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/tags/Node-js/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Express 入门]]></title>
    <link href="http://jinlong.github.io/2014/01/07/introduction-to-express/"/>
    <id>http://jinlong.github.io/2014/01/07/introduction-to-express/</id>
    <published>2014-01-07T08:19:00.000Z</published>
    <updated>2015-10-29T02:55:34.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://net.tutsplus.com/tutorials/javascript-ajax/introduction-to-express/" target="_blank" rel="external">Introduction to Express</a><br>笔记：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<h2 id="安装">安装</h2><p>package.json 中手动添加 Express 依赖</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"name"</span>: <span class="string">"demo1"</span>,</span><br><span class="line">   <span class="string">"description"</span>: <span class="string">"First Express app"</span>,</span><br><span class="line">   <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">   <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">      <span class="string">"express"</span>: <span class="string">"3.x"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相同的目录运行：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>命令行安装 Express 直接运行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> express</span></span><br></pre></td></tr></table></figure>
<p>安装完后可以用 express 在命令行生成应用。</p>
<p>添加 app.js 文件，写个最简单的应用，创建一个 Express 实例，开始监听特定的端口 ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>运行 <code>node app</code> 没发生任何事情。</p>
<a id="more"></a>
<h2 id="定义路由">定义路由</h2><p>我们给应用添加一些简单的路由，Express 可以响应各种 HTTP 请求：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Regular HTTP get</span></span><br><span class="line">app.get(some url, <span class="keyword">do</span> something);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Some other page</span></span><br><span class="line">app.get(some other url, <span class="keyword">do</span> something <span class="keyword">else</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//I can respond to a form post</span></span><br><span class="line">app.post(some url, <span class="keyword">do</span> more stuff);</span><br></pre></td></tr></table></figure>
<p>我们写个真实的例子，给应用添加主页：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">   response.send(<span class="string">"This would be some HTML"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意 Express 为 response 对象添加了 <code>send()</code> 方法，一些模板代码可以处理响应。重启应用，访问 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a> 看看。</p>
<p><strong>request.send()</strong> API 智能处理不同类型的数据，假如你想为网站添加简单的基于 JSON 的 API ，Express 可以把返回结果转换成 JSON 并设置适当的响应头。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">   response.send(&#123;name:<span class="string">"Raymond"</span>,age:<span class="number">40</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可想而知，添加更多的路由，并处理所需的响应，就可以构建一个应用。<br><!--more--></p>
<h2 id="通用的博客应用">通用的博客应用</h2><p>跳过 package.json 文件，因为除了 name 属性不一样，其它项都一样。来看 app.js 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/about.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/article.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>我们把 <strong>send</strong> 换成了 <strong>sendfile</strong> 。与其把大段的 HTML 字符串放到 app.js 文件里，不如增加三个路由，主页，关于页，文章页。</p>
<h3 id="添加_HTML">添加 HTML</h3><p>主页：</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-home-html" target="_blank" rel="external">HTML 代码</a></p>
<p>这里并没什么特别的，Express 将返回纯静态的 HTML 。关于页和文章页只不过把 title 和 h1 值改了。</p>
<h3 id="由静态到动态">由静态到动态</h3><p>Express 支持各种模板引擎，express 命令行可以添加对 Jade，EJS，JSHTML 和 Hogan 的支持。根据 Express 文档，任何模版引擎只要符合特定的签名就可以生效。推荐从 <a href="https://github.com/visionmedia/consolidate.js" target="_blank" rel="external">consolidate.js</a> 库（模版引擎集合）里面查找喜欢的模版引擎。</p>
<p>我是 <a href="http://handlebarsjs.com/" target="_blank" rel="external">Handlebars</a> 的超级粉，我的许多客户端应用都用它，服务器端自然也少不了它。要用 Handlebars 还需要安装包装库 <a href="https://github.com/donpark/hbs" target="_blank" rel="external">hbs</a> 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"name"</span>: <span class="string">"blog2"</span>,</span><br><span class="line">   <span class="string">"description"</span>: <span class="string">"Blog app"</span>,</span><br><span class="line">   <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">   <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">      <span class="string">"express"</span>: <span class="string">"3.x"</span>,</span><br><span class="line">      <span class="string">"hbs"</span>:<span class="string">"*"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后更新 app.js 使用此引擎：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">'hbs'</span>);</span><br><span class="line"> </span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line">app.engine(<span class="string">'html'</span>, hbs.__express);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'about'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'article'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>为了使用 Handlebars ，我们通过 require 把 HBS 包装库引入，然后让 Express 使用它。<br>默认情况下，Handlebars 会解析包含了特定引擎扩展的文件，这里是 <code>something.hbs</code> 。但也可以使用 “<code>view engine</code>”指令告诉 Express 动态解析 HTML 文件。这样我的编辑器可以提供良好的代码校验和语法高亮。通过 <code>app.engine</code> 真正加载引擎。</p>
<p>最终路由用了新的 <code>render</code> 方法，Express 默认使用 views 文件夹，因此我们可以省略。由于 Express 记住了我们要解析的扩展名，所以它也可以省略。<code>res.render(&#39;something&#39;)</code> 实际等于告诉 Express 查找 <code>views/something.html</code> 。Express 基于模板引擎规则解析它，并返回到浏览器。</p>
<h3 id="主页显示博客条目">主页显示博客条目</h3><p>我们可以连接到 MySQL 或者 Mongo，这里我们创建一个静态的数据集，取名 blog.js ，它提供获取一组条目和获取一个条目功能。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> entries = [</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">1</span>, <span class="string">"title"</span>:<span class="string">"Hello World!"</span>, <span class="string">"body"</span>:<span class="string">"This is the body of my blog entry. Sooo exciting."</span>, <span class="string">"published"</span>:<span class="string">"6/2/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">2</span>, <span class="string">"title"</span>:<span class="string">"Eggs for Breakfast"</span>, <span class="string">"body"</span>:<span class="string">"Today I had eggs for breakfast. Sooo exciting."</span>, <span class="string">"published"</span>:<span class="string">"6/3/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">3</span>, <span class="string">"title"</span>:<span class="string">"Beer is Good"</span>, <span class="string">"body"</span>:<span class="string">"News Flash! Beer is awesome!"</span>, <span class="string">"published"</span>:<span class="string">"6/4/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">4</span>, <span class="string">"title"</span>:<span class="string">"Mean People Suck"</span>, <span class="string">"body"</span>:<span class="string">"People who are mean aren't nice or fun to hang around."</span>, <span class="string">"published"</span>:<span class="string">"6/5/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">5</span>, <span class="string">"title"</span>:<span class="string">"I'm Leaving Technology X and You Care"</span>, <span class="string">"body"</span>:<span class="string">"Let me write some link bait about why I'm not using a particular technology anymore."</span>, <span class="string">"published"</span>:<span class="string">"6/10/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">6</span>, <span class="string">"title"</span>:<span class="string">"Help My Kickstarter"</span>, <span class="string">"body"</span>:<span class="string">"I want a new XBox One. Please fund my Kickstarter."</span>, <span class="string">"published"</span>:<span class="string">"6/12/2013"</span>&#125;];</span><br><span class="line">exports.getBlogEntries = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> entries;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">exports.getBlogEntry = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; entries.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(entries[i].id == id) <span class="keyword">return</span> entries[i];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们还可以提供添加，编辑和删除，这里到此为止。再更新下 app.js ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">'hbs'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> blogEngine = <span class="built_in">require</span>(<span class="string">'./blog'</span>);</span><br><span class="line"> </span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line">app.engine(<span class="string">'html'</span>, hbs.__express);</span><br><span class="line">app.use(express.bodyParser());</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'index'</span>,&#123;title:<span class="string">"My Blog"</span>, entries:blogEngine.getBlogEntries()&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'about'</span>, &#123;title:<span class="string">"About Me"</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/article/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> entry = blogEngine.getBlogEntry(req.params.id);</span><br><span class="line">   res.render(<span class="string">'article'</span>,&#123;title:entry.title, blog:entry&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>我们用 <code>require</code> 引入数据集，如此可以调用它得到条目。</p>
<p>在主页，我们给 <code>render</code> API 传两个参数，参数是一个对象，包含 <code>title</code> 和 <code>entries</code> 属性。title 的值时字符串，但是 entries 调用 <code>blogEngine</code> API 。我们传的任何数据将对模版生效，主页模版需要调整。</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-home-tpl-html" target="_blank" rel="external">主页模版代码</a></p>
<p>即使你从没用过 Handlebars ，仍旧能猜到这里的含义。<code>#each</code> 指令将循环一个数组，&#123;&#123;&#125;&#125; 表示从博客条目列表取到的参数。</p>
<h3 id="创建一个布局">创建一个布局</h3><p>你肯定关心剩下的 HTML 怎么改，Express 用了模版引擎会自动支持布局。这意味着我可以创建通用的网站设计布局，Express 将利用它构造特定的页面。按照约定，它取名 <code>layout.something</code> ，“something”是你使用的特定扩展。我们用了 HTML ，它就是 <code>layout.html</code> 。</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-layout-html" target="_blank" rel="external">layout.html 代码</a></p>
<p>关于页面没什么亮点，我们跳过，下面看文章路由。URL 现在包含了标记 <code>:id</code> ，Express 可以创建动态的 URL ，用于对应请求参数。我们定义的链接像这样：<br><code>/article/</code></p>
<p>理论上，每一个博客条目需要一个路由，但是创建一个抽象的路由匹配这些请求效果更好。 <code>bodyParser</code> （这一特性来源于 Connect 框架，的确对我很有帮助，它不仅支持查询字符串，而且支持表单主体，几乎每个 Express 应用都会用到它。）</p>
<h3 id="显示个别文章">显示个别文章</h3><p>由于 URL 结尾包含动态值，我们可以把它传给 <code>blogEngine</code> 对象，用得到的结果作为视图的变量。</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-article-html" target="_blank" rel="external">article.html 文件</a></p>
<p>现在我们创建了一个真正动态，但是难看的应用，这是新主页：</p>
<p><img src="/images/post/exp-blog/express-blog3-home.jpg"></p>
<p>这是特定的博客条目：</p>
<p><img src="/images/post/exp-blog/express-blog3-article.jpg"></p>
<h2 id="润色！">润色！</h2><p>我们加点基本的样式，让应用变好看点。Express 提供了简洁的方式添加图像，JavaScript 库和样式表之类的静态资源，简单定义一个静态文件夹，任何请求将从这个文件夹查找文件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure>
<p>此时，如果请求 /foo.css，public 文件夹存在 foo.css 文件，将返回它。我把 <a href="http://twitter.github.io/bootstrap/" target="_blank" rel="external">Bootstrap</a> 和 jQuery 副本放到了 public 文件夹。</p>
<p>然后在我的 layout.html ，我可以引用这些资源。这是链接 bootstrap.css 的例子：</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-layout1-html" target="_blank" rel="external">代码实例</a></p>
<p>Express 将自动检查 public 文件夹，可以有多个静态文件夹，甚至可以自定义 URL 前缀。最终效果是极好的。</p>
<p>主页：</p>
<p><img src="/images/post/exp-blog/express-blog4-home.jpg"></p>
<p>文章页：</p>
<p><img src="/images/post/exp-blog/express-blog4-article.jpg"></p>
<h2 id="进阶？">进阶？</h2><p>延伸阅读：</p>
<ul>
<li><a href="http://expressjs.com/" target="_blank" rel="external">Express homepage</a>    </li>
<li><a href="https://groups.google.com/forum/?fromgroups#!forum/express-js" target="_blank" rel="external">Google group</a>   </li>
<li><a href="https://github.com/visionmedia/express/tree/master/examples" target="_blank" rel="external">Express 实例</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://net.tutsplus.com/tutorials/javascript-ajax/introduction-to-express/">Introduction to Express</a><br>笔记：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<h2 id="安装">安装</h2><p>package.json 中手动添加 Express 依赖</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"name"</span>: <span class="string">"demo1"</span>,</span><br><span class="line">   <span class="string">"description"</span>: <span class="string">"First Express app"</span>,</span><br><span class="line">   <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">   <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">      <span class="string">"express"</span>: <span class="string">"3.x"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相同的目录运行：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>命令行安装 Express 直接运行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> express</span></span><br></pre></td></tr></table></figure>
<p>安装完后可以用 express 在命令行生成应用。</p>
<p>添加 app.js 文件，写个最简单的应用，创建一个 Express 实例，开始监听特定的端口 ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>运行 <code>node app</code> 没发生任何事情。</p>]]>
    
    </summary>
    
      <category term="Express" scheme="http://jinlong.github.io/tags/Express/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/tags/Node-js/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/categories/Node-js/"/>
    
      <category term="Express" scheme="http://jinlong.github.io/categories/Node-js/Express/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Grunt-前端利器]]></title>
    <link href="http://jinlong.github.io/2013/12/22/grunt-for-fe/"/>
    <id>http://jinlong.github.io/2013/12/22/grunt-for-fe/</id>
    <published>2013-12-22T15:42:00.000Z</published>
    <updated>2015-10-29T02:54:26.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://24ways.org/2013/grunt-is-not-weird-and-hard/" target="_blank" rel="external">Grunt for People Who Think Things Like Grunt are Weird and Hard</a><br>此篇笔记包含了个人的理解，只记录了文章的要点，并没有逐句翻译，如有不妥望指正。</p>
</blockquote>
<p>Grunt 可以帮前端工程师做什么：</p>
<ul>
<li>合并 CSS 和 JS 文件   </li>
<li>压缩 CSS ，最小化 JS   </li>
<li>优化图片   </li>
<li>使用 Sass</li>
</ul>
<p>前提：安装 <a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a> </p>
<p>项目根目录需要 <strong>package.json</strong> 文件</p>
<p><img src="/images/post/gruntForFE/package-json-file.gif"></p>
<p>package.json 内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"example-project"</span></span>,</span><br><span class="line">  "<span class="attribute">version</span>": <span class="value"><span class="string">"0.1.0"</span></span>,</span><br><span class="line">  "<span class="attribute">devDependencies</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">grunt</span>": <span class="value"><span class="string">"~0.4.1"</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>打开命令行工具，切换到项目文件夹，运行命令：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p>
<p><strong>node_modules</strong> 文件夹出现了，里面是 “<strong>devDependencies</strong>”属性定义的依赖包</p>
<p>全局安装 Grunt CLI：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> grunt-cli</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="合并文件">合并文件</h2><p>安装合并文件插件 <a href="https://github.com/gruntjs/grunt-contrib-concat" target="_blank" rel="external">grunt-contrib-concat</a> </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> grunt-contrib-<span class="keyword">concat</span> <span class="comment">--save-dev</span></span></span><br></pre></td></tr></table></figure>
<p>package.json 会为” devDependencies“属性自动添加新的依赖，多了这一行：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"grunt-contrib-concat"</span>: <span class="string">"~0.3.0"</span></span><br></pre></td></tr></table></figure>
<p>配置 <strong>Gruntfile.js</strong> 配置文件</p>
<p>格式如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 所有配置文件 </span></span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line"></span><br><span class="line">        concat: &#123;</span><br><span class="line">            <span class="comment">// 2.  合并文件的配置项</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 加载使用的插件</span></span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 默认任务</span></span><br><span class="line">    grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'concat'</span>]);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>合并文件的插件配置<a href="https://github.com/gruntjs/grunt-contrib-concat#usage-examples" target="_blank" rel="external">实例</a>： </p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">concat</span>: &#123;   </span><br><span class="line">    <span class="tag">dist</span>: &#123;</span><br><span class="line">        <span class="attribute">src</span>: [</span><br><span class="line">            <span class="string">'js/libs/*.js'</span>, <span class="comment">//libs 文件夹的所有 JS 文件</span></span><br><span class="line">            <span class="string">'js/global.js'</span>  <span class="comment">// 指定文件</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attribute">dest</span>: <span class="string">'js/build/production.js'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>src 属性是原 JS 文件的数组，dest 是合并后的文件</p>
<p>比较全面 Gruntfile.js 文件看<a href="https://github.com/chriscoyier/My-Grunt-Boilerplate/blob/master/Gruntfile.js" target="_blank" rel="external">这个模版</a> </p>
<p>然后在命令行运行：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt</span><br></pre></td></tr></table></figure></p>
<h2 id="最小化_JS">最小化 JS</h2><p>为 Grunt 添加新任务比较简单：</p>
<ol>
<li>找到需要的 Grunt 插件   </li>
<li>学习插件的配置风格   </li>
<li>为自己的项目写配置文件</li>
</ol>
<p>官方的最小化插件 <a href="https://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">grunt-contrib-uglify</a> ，安装一下：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-contrib-uglify --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>
<p>修改 Gruntfile.js 文件，加载此插件：<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="symbol">'grunt</span>-contrib-uglify');</span><br></pre></td></tr></table></figure></p>
<p>配置一下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">uglify</span>: &#123;</span><br><span class="line">    <span class="tag">build</span>: &#123;</span><br><span class="line">        <span class="attribute">src</span>: <span class="string">'js/build/production.js'</span>,</span><br><span class="line">        <span class="attribute">dest</span>: <span class="string">'js/build/production.min.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>更新默认任务：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="atom">grunt</span>.<span class="atom">registerTask</span>(<span class="string">'default'</span>, [<span class="string">'concat'</span>, <span class="string">'uglify'</span>]);</span><br></pre></td></tr></table></figure>
<p>运行 <code>grunt</code> 即可执行最小化任务</p>
<p><img src="/images/post/gruntForFE/uglify-code.gif"></p>
<h2 id="优化图片">优化图片</h2><p>官方的图片优化插件 <a href="https://github.com/gruntjs/grunt-contrib-imagemin" target="_blank" rel="external">grunt-contrib-imagemin</a> </p>
<p>安装即可：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-contrib-imagemin --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p>
<p>修改 Gruntfile.js 文件，加载此插件：<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="symbol">'grunt</span>-contrib-imagemin');</span><br></pre></td></tr></table></figure></p>
<p>添加配置：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">imagemin</span>: <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">dynamic</span>:<span class="value"> &#123;</span><br><span class="line">        files: [&#123;</span><br><span class="line">            expand: true,</span><br><span class="line">            cwd: <span class="string">'images/'</span>,</span><br><span class="line">            src: [<span class="string">'**/*.&#123;png,jpg,gif&#125;'</span>],</span><br><span class="line">            dest: <span class="string">'images/build/'</span></span><br><span class="line">        </span></span></span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>添加成默认任务<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="atom">grunt</span>.<span class="atom">registerTask</span>(<span class="string">'default'</span>, [<span class="string">'concat'</span>, <span class="string">'uglify'</span>, <span class="string">'imagemin'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>运行 <code>grunt</code> 看奇迹发生</p>
<p><img src="/images/post/gruntForFE/squished-images.gif"></p>
<h2 id="让任务更智能，更自动">让任务更智能，更自动</h2><ol>
<li>需要执行的时候自动执行   </li>
<li>一次执行一个任务   </li>
</ol>
<p>比如:</p>
<ol>
<li>当 JS 修改了以后，合并，最小化文件   </li>
<li>当添加新图片，修改旧图片时优化图像   </li>
</ol>
<p>可以通过官方的  <a href="https://github.com/gruntjs/grunt-contrib-watch" target="_blank" rel="external">grunt-contrib-watch</a> 插件监视文件。</p>
<p>照例安装插件，修改配置文件：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">watch</span>: <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">scripts</span>:<span class="value"> &#123;</span><br><span class="line">        files: [<span class="string">'js/*.js'</span>],</span><br><span class="line">        tasks: [<span class="string">'concat'</span>, <span class="string">'uglify'</span>],</span><br><span class="line">        options: &#123;</span><br><span class="line">            spawn: false,</span><br><span class="line">        </span></span></span>&#125;,</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>出现错误的时候，命令行会有提示：</p>
<p><img src="/images/post/gruntForFE/error-running-grunt.gif"></p>
<h2 id="Grunt_做我们的预处理器">Grunt 做我们的预处理器</h2><p>我还没用过此类的预处理器，好 out ……先留个坑，等用的时候再做记录。请感兴趣的同学<a href="http://24ways.org/2013/grunt-is-not-weird-and-hard/" target="_blank" rel="external">参考原文</a></p>
<h2 id="继续升级">继续升级</h2><p>添加更多有用的任务：</p>
<ul>
<li>使用 <a href="http://css-tricks.com/autoprefixer/" target="_blank" rel="external">Autoprefixer</a> ，CSS 中自动加前缀   </li>
<li>JS 单元测试（比如：<a href="https://github.com/pivotal/jasmine" target="_blank" rel="external">Jasmine</a> ）   </li>
<li>自动生成图片雪碧图和 SVG 图标（比如：<a href="https://github.com/filamentgroup/grunticon" target="_blank" rel="external">Grunticon</a> ）   </li>
<li>作为文件资源服务器   </li>
<li>代码质量工具： <a href="http://philipwalton.com/articles/introducing-html-inspector/" target="_blank" rel="external">HTML-Inspector</a> ， <a href="http://csslint.net/" target="_blank" rel="external">CSS Lint</a>  或者 <a href="http://www.jshint.com/" target="_blank" rel="external">JS Hint</a>   </li>
<li><a href="http://css-tricks.com/cross-browser-css-injection/" target="_blank" rel="external">跨浏览器 CSS 注入</a>   </li>
<li>帮助提交版本控制仓库，比如 GitHub   </li>
<li>添加资源版本号（清缓存）   </li>
<li>帮助部署测试和生成环境（比如：<a href="http://leanmeanfightingmachine.github.io/dploy/" target="_blank" rel="external">DPLOY</a> ）</li>
</ul>
<p>延伸阅读：</p>
<ul>
<li>读 Mark McDonnell 的 <a href="http://www.integralist.co.uk/Grunt-Boilerplate.html" target="_blank" rel="external">Grunt 模版</a>   </li>
<li>读 Nicolas Bevacqua 的 <a href="http://blog.ponyfoo.com/2013/11/13/grunt-tips-and-tricks" target="_blank" rel="external">Grunt 小窍门</a>   </li>
<li>通过<a href="https://github.com/cowboy/wesbos/commit/5a2980a7818957cbaeedcd7552af9ce54e05e3fb" target="_blank" rel="external">分割小文件</a> 组织 Gruntfile.js 文件   </li>
<li>深层学习 Grunt 源码和 <a href="http://gruntjs.com/api/grunt" target="_blank" rel="external">API</a>    </li>
</ul>
<p>附赠：<a href="https://github.com/vladikoff/grunt-devtools" target="_blank" rel="external">Grunt DevTools Chrome 扩展</a>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://24ways.org/2013/grunt-is-not-weird-and-hard/">Grunt for People Who Think Things Like Grunt are Weird and Hard</a><br>此篇笔记包含了个人的理解，只记录了文章的要点，并没有逐句翻译，如有不妥望指正。</p>
</blockquote>
<p>Grunt 可以帮前端工程师做什么：</p>
<ul>
<li>合并 CSS 和 JS 文件   </li>
<li>压缩 CSS ，最小化 JS   </li>
<li>优化图片   </li>
<li>使用 Sass</li>
</ul>
<p>前提：安装 <a href="http://nodejs.org/">Node.js</a> </p>
<p>项目根目录需要 <strong>package.json</strong> 文件</p>
<p><img src="/images/post/gruntForFE/package-json-file.gif" /></p>
<p>package.json 内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"example-project"</span></span>,</span><br><span class="line">  "<span class="attribute">version</span>": <span class="value"><span class="string">"0.1.0"</span></span>,</span><br><span class="line">  "<span class="attribute">devDependencies</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">grunt</span>": <span class="value"><span class="string">"~0.4.1"</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>打开命令行工具，切换到项目文件夹，运行命令：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p>
<p><strong>node_modules</strong> 文件夹出现了，里面是 “<strong>devDependencies</strong>”属性定义的依赖包</p>
<p>全局安装 Grunt CLI：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> grunt-cli</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Grunt" scheme="http://jinlong.github.io/tags/Grunt/"/>
    
      <category term="Grunt" scheme="http://jinlong.github.io/categories/Grunt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Grunt 入门笔记]]></title>
    <link href="http://jinlong.github.io/2013/12/22/grunt-getting-started/"/>
    <id>http://jinlong.github.io/2013/12/22/grunt-getting-started/</id>
    <published>2013-12-22T09:03:00.000Z</published>
    <updated>2015-10-29T02:55:00.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文： <a href="http://gruntjs.com/getting-started" target="_blank" rel="external">Getting started</a></p>
</blockquote>
<h2 id="安装_CLI">安装 CLI</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> grunt-cli</span></span><br></pre></td></tr></table></figure>
<p>可以在任何路径运行 <code>grunt</code> 命令</p>
<p>通过 <code>Gruntfile</code> 文件运行某一版本 grunt ，允许多版本共存</p>
<h2 id="CLI_如何工作">CLI 如何工作</h2><p>每次运行 grunt ，它会使用 node 的 <code>require()</code> 查找本地安装的 grunt 。基于此原因，你可以在项目的任何子目录运行它。</p>
<p>找到了本地安装的 Grunt ，CLI 加载本地安装的 Grunt 库，应用 <code>Gruntfile</code> 里的配置，执行预期的任务。</p>
<p>想理解真正奥秘，可以<a href="https://github.com/gruntjs/grunt-cli/blob/master/bin/grunt" target="_blank" rel="external">读源码</a>，它非常短。</p>
<h2 id="运行已存在的_Grunt_项目">运行已存在的 Grunt 项目</h2><p>假设  Grunt CLI 已安装，项目已通过 <code>package.json</code> 和 <code>Gruntfile</code> 配置好，使用 Grunt 非常简单：</p>
<ol>
<li>切换到项目的根目录   </li>
<li>通过 <code>npm install</code> 安装项目依赖   </li>
<li>通过 <code>grunt</code> 命令运行 Grunt </li>
</ol>
<p><code>grunt --help</code> 可以罗列已安装的 Grunt 任务列表，但是最好从项目文档开始。</p>
<a id="more"></a>
<h2 id="准备新的_Grunt_项目">准备新的 Grunt 项目</h2><p>典型安装是往项目中添加2个文件：<code>package.json</code> 和 <code>Gruntfile</code></p>
<p><strong>package.json</strong>：存储作为 npm 发布模块的项目的元数据。你可以在 <a href="https://npmjs.org/doc/json.html#devDependencies" target="_blank" rel="external">devDependencies</a> 一项列举项目的需要的 Grunt 插件。</p>
<p><strong>Gruntfile</strong>：文件名是 <code>Gruntfile.js</code> 或者 <code>Gruntfile.coffee</code> ，用于配置或定义任务和加载 Grunt 插件。</p>
<h3 id="package-json">package.json</h3><p><strong>package.json</strong> 应该在项目的根目录，跟 <strong>Gruntfile</strong> 同目录，应该把它提交到项目源码中。在 package.json 同一文件夹中运行 <strong>npm install</strong>，将安装里面列举的每个依赖的正确版本。</p>
<p>有几种创建 package.json 的方式：</p>
<p>1.大部分 <a href="http://gruntjs.com/project-scaffolding" target="_blank" rel="external">grunt-init</a> 模版会自动创建项目专属的 package.json 文件</p>
<p>安装 </p>
<p><strong>npm install -g grunt-init</strong></p>
<p>安装模版</p>
<p><strong>git clone <a href="https://github.com/gruntjs/grunt-init-gruntfile.git" target="_blank" rel="external">https://github.com/gruntjs/grunt-init-gruntfile.git</a> ~/.grunt-init/gruntfile</strong></p>
<p>使用</p>
<p><strong>grunt-init gruntfile</strong></p>
<p>2.<a href="https://npmjs.org/doc/init.html" target="_blank" rel="external">npm init</a> 命令将创建基本的 package.json 文件。</p>
<p>3.从以下例子开始，扩展需要的内容，遵循<a href="https://npmjs.org/doc/json.html" target="_blank" rel="external">这个规范</a></p>
<p>例子地址：<a href="https://gist.github.com/jinlong/8083660" target="_blank" rel="external">https://gist.github.com/jinlong/8083660</a></p>
<h2 id="安装_Grunt_和_gruntplugins">安装 Grunt 和 gruntplugins</h2><p>往已存在的 package.json 中添加 Grunt 和 gruntplugins 最简单的方式是通过命令：</p>
<p><strong>npm install <module> –save-dev</module></strong></p>
<p>不仅会本地安装 &lt;module&gt;，而且自动把它们添加到 <a href="https://npmjs.org/doc/json.html#devDependencies" target="_blank" rel="external">devDependencies</a> 部分。</p>
<p>例如，下面将往项目目录安装最新版的 Grunt ，并把它添加到 devDependencies ：</p>
<p><strong>npm install grunt –save-dev</strong></p>
<p>gruntplugins 同理。确保把更新后的 package.json 提交到项目里。</p>
<h2 id="Gruntfile">Gruntfile</h2><p><strong>Gruntfile.js</strong> 或 <strong>Gruntfile.coffee</strong> 是有效的 JavaScript 或者 CoffeeScript 文件，放在项目的根目录，跟 package.json 同目录，需要提交到项目源码中。</p>
<p>Gruntfile 由下面几部分组成：</p>
<ul>
<li>“wrapper 包装”函数   </li>
<li>项目和任务配置   </li>
<li>加载 Grunt 插件和任务   </li>
<li>自定义任务</li>
</ul>
<h3 id="Gruntfile_例子">Gruntfile 例子</h3><p>以下的 Gruntfile 中，项目元数据从项目的 package.json 文件导入到 Grunt 配置，<a href="http://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">grunt-contrib-uglify</a> 插件的 <strong>uglify</strong> 任务会最小化源文件，并利用元数据动态生成注释。当在命令行运行 <strong>grunt</strong> 时，<strong>uglify</strong> 任务默认启动。</p>
<p>例子地址：<a href="https://gist.github.com/jinlong/8083660" target="_blank" rel="external">https://gist.github.com/jinlong/8083660</a></p>
<p>既然已经见到了整个 Gruntfile ，下面继续看看它的组成部分。</p>
<h3 id="“_wrapper_包装”函数">“ wrapper 包装”函数</h3><p>所有的 Gruntfile （和 gruntplugin）使用这种基本格式，所有的 Grunt 代码必须放到特定的函数里面：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do grunt-related things in here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="项目和任务配置">项目和任务配置</h3><p>大部分的 Grunt 任务依赖于 <a href="http://gruntjs.com/grunt#grunt.initconfig" target="_blank" rel="external">grunt.initConfig</a> 方法定义的配置数据。此例中，<strong>grunt.file.readJSON(‘package.json’)</strong> 把 package.json 中存储的 JSON 元数据导入到 grunt 配置中。因为 <strong>&lt;% %&gt;</strong> 模版字符串可能引用任何配置属性，像文件路径，文件列表之类的配置数据如此定义，为了避免重复代码。</p>
<p>配置对象可以存储任意的数据，只要不跟任务需要的属性冲突即可，否则将被忽略。此外，由于这是 JavaScript 文件，所以不仅限于 JSON ；可以用合法的 JS 。<a href="http://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">grunt-contrib-uglify</a> 的 uglify 任务需要指定 <strong>uglify</strong> 属性。<strong>banner</strong> 选项需要指定注释内容，<strong>build</strong> 属性定义最小化的源文件和目标文件。</p>
<h3 id="加载_Grunt_插件和任务">加载 Grunt 插件和任务</h3><p>像<a href="https://github.com/gruntjs/grunt-contrib-concat" target="_blank" rel="external">合并多个文件</a> ，<a href="http://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">最小化文件</a> ，和<a href="https://github.com/gruntjs/grunt-contrib-jshint" target="_blank" rel="external">验证 JS 文件</a> 都有了 <a href="https://github.com/gruntjs" target="_blank" rel="external">grunt 插件</a> 。只要在 <strong>package.json</strong> 里面定义插件，通过 <strong>npm install</strong> 即可安装，通过简单的命令即可在 Gruntfile 里面启用它：</p>
<p>// 加载提供 “uglify” 任务的插件<br>grunt.loadNpmTasks(‘grunt-contrib-uglify’);</p>
<p>注意：<strong>grunt –help</strong> 命令会列出所有可用任务。</p>
<h3 id="自定义任务">自定义任务</h3><p>你可以配置 Grunt 默认执行一个或多个任务。以下例子，命令行运行 grunt，默认会执行 <strong>uglify</strong> 任务，等同于执行 <strong>grunt uglify</strong> 或者 <strong>grunt default</strong> 。多个任务（带或不带参数）需要放到数组里。</p>
<p>// 默认任务</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>]);</span><br></pre></td></tr></table></figure>
<p>如果 Grunt 插件无法满足要求，你可以在 Gruntfile 定义自己的任务。例如，这个 Gruntfile 定义了自己的 default 任务，甚至没有利用任务配置：</p>
<p><a href="https://gist.github.com/jinlong/8083660" target="_blank" rel="external">https://gist.github.com/jinlong/8083660</a></p>
<p>定制的项目专属任务不需要定义到 Gruntfile 中；可以在外部 <strong>.js</strong> 文件定义，通过 <a href="http://gruntjs.com/grunt#grunt.loadtasks" target="_blank" rel="external">grunt.loadTasks</a> 方法加载。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文： <a href="http://gruntjs.com/getting-started">Getting started</a></p>
</blockquote>
<h2 id="安装_CLI">安装 CLI</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> grunt-cli</span></span><br></pre></td></tr></table></figure>
<p>可以在任何路径运行 <code>grunt</code> 命令</p>
<p>通过 <code>Gruntfile</code> 文件运行某一版本 grunt ，允许多版本共存</p>
<h2 id="CLI_如何工作">CLI 如何工作</h2><p>每次运行 grunt ，它会使用 node 的 <code>require()</code> 查找本地安装的 grunt 。基于此原因，你可以在项目的任何子目录运行它。</p>
<p>找到了本地安装的 Grunt ，CLI 加载本地安装的 Grunt 库，应用 <code>Gruntfile</code> 里的配置，执行预期的任务。</p>
<p>想理解真正奥秘，可以<a href="https://github.com/gruntjs/grunt-cli/blob/master/bin/grunt">读源码</a>，它非常短。</p>
<h2 id="运行已存在的_Grunt_项目">运行已存在的 Grunt 项目</h2><p>假设  Grunt CLI 已安装，项目已通过 <code>package.json</code> 和 <code>Gruntfile</code> 配置好，使用 Grunt 非常简单：</p>
<ol>
<li>切换到项目的根目录   </li>
<li>通过 <code>npm install</code> 安装项目依赖   </li>
<li>通过 <code>grunt</code> 命令运行 Grunt </li>
</ol>
<p><code>grunt --help</code> 可以罗列已安装的 Grunt 任务列表，但是最好从项目文档开始。</p>]]>
    
    </summary>
    
      <category term="Grunt" scheme="http://jinlong.github.io/tags/Grunt/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/tags/Node-js/"/>
    
      <category term="Grunt" scheme="http://jinlong.github.io/categories/Grunt/"/>
    
      <category term="Nodejs" scheme="http://jinlong.github.io/categories/Grunt/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript 最佳实践]]></title>
    <link href="http://jinlong.github.io/2013/11/25/javascript-best-practices/"/>
    <id>http://jinlong.github.io/2013/11/25/javascript-best-practices/</id>
    <published>2013-11-25T05:12:00.000Z</published>
    <updated>2015-10-29T02:53:26.000Z</updated>
    <content type="html"><![CDATA[<p>本篇指南分两部分，翻译自 Mozilla 的 Web 布道师 Christian Heilmann 的 <a href="http://www.slideshare.net/cheilmann/javascript-best-practices-1041724" target="_blank" rel="external">PPT</a> （需翻墙）</p>
<blockquote>
<p>原文：<br><a href="http://www.thinkful.com/learn/javascript-best-practices-1/" target="_blank" rel="external">Javascript BEST PRACTICES PART 1</a><br><a href="http://www.thinkful.com/learn/javascript-best-practices-2/" target="_blank" rel="external">Javascript BEST PRACTICES PART 2</a><br>译者：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<h2 id="Make_it_Understandable（更易理解）">Make it Understandable（更易理解）</h2><p>变量和函数选择容易理解，较短的单词命名。</p>
<div style="color:#c01d1d">不好的变量名：</div><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">x1</span> fe2 xbqne</span><br></pre></td></tr></table></figure><br><br><br><div style="color:#c01d1d">也不好的变量名：</div><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">incrementerForMainLoopWhichSpansFromTenToTwenty</span></span><br><span class="line">createNewMemberIfAgeOverTwentyOneAndMoonIsFull</span><br></pre></td></tr></table></figure><br><br>避免用变量或函数名描述一个值。<br><br><div style="color:#c01d1d">在有的国家也许讲不通：</div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isOverEighteen</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><br><br><div style="color:#5ead12">工作良好：</div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isLegalAge</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><br>Your code is a story - make your storyline easy to follow!<br>你的代码是一则故事 - 让故事情节更容易投入。<br><br>## 避免全局变量<br><br>全局变量是魔鬼<br><br><strong>原因：</strong>其它后面的 JavaScript 代码随时会覆盖你的代码。<br><br><strong>变通方案：</strong>使用闭包和模块模式<br><br><div style="color:#c01d1d"><br>    <strong>问题：</strong>所有全局变量都可以被访问；访问不受控制，页面任何东西都可以被覆盖。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> current = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> labels = &#123;</span><br><span class="line">   <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">   <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">   <span class="string">'contact'</span>:<span class="string">'contact'</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   current = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   show();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>对象字面量：</strong>所有东西都被包含起来，但是通过对象名字可以访问。</p>
<div style="color:#c01d1d"><strong>问题：</strong>重复的模块名称导致代码庞大恼人。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">demo = &#123;</span><br><span class="line">   current:<span class="literal">null</span>,</span><br><span class="line">   labels:&#123;</span><br><span class="line">      <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">      <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">      <span class="string">'contact'</span>:<span class="string">'contact'</span></span><br><span class="line">   &#125;,</span><br><span class="line">   init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;,</span><br><span class="line">   show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      demo.current = <span class="number">1</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      demo.show();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>模块模式：</strong>你需要指定哪些是全局的，哪些不是 —— 转换两者语法。</p>
<div style="color:#c01d1d"><strong>问题：</strong>重复的模块名称，内部函数的不同语法。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> labels = &#123;</span><br><span class="line">      <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">      <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">      <span class="string">'contact'</span>:<span class="string">'contact'</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">      current:<span class="literal">null</span>,</span><br><span class="line">      init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">module</span>.current = <span class="number">1</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">module</span>.show();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<div style="color:#5ead12"><br><strong>Revealing Module Pattern（揭示模块模式）：</strong>暴露的全局变量和局部变量，保持语法一致。<br></div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> current = <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">var</span> labels = &#123;</span><br><span class="line">      <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">      <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">      <span class="string">'contact'</span>:<span class="string">'contact'</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      current = <span class="number">1</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> hide = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      show();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>&#123;init:init, show:show, current:current&#125;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">module</span>.init();</span><br></pre></td></tr></table></figure>
<h2 id="坚持一种严格的编码风格">坚持一种严格的编码风格</h2><p>浏览器是非常宽容的 JavaScript 解析器。但是，当你转换到另一个环境，或者移交给另一个开发者时，松懈的代码风格对自己很不利。Valid code is secure code（有效的代码是安全的代码）。</p>
<p><strong>验证你的代码：</strong><a href="http://www.jslint.com/" target="_blank" rel="external">http://www.jslint.com/</a></p>
<h2 id="需要注释，不要过分注释">需要注释，不要过分注释</h2><blockquote>
<p>“Good code explains itself （好的代码会自我解释）”是傲慢的神话。</p>
</blockquote>
<p>需要的时候加上注释 —— 但是不要长篇大论。</p>
<p>避免用单行注释 //。/&#42; &#42;/ 更安全，当删除换行符时不会导致出错。</p>
<p>如果你使用注释调试，这是个不错的小技巧：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> current = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">   var init = function()&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   var show = function()&#123;</span><br><span class="line">      current = 1;</span><br><span class="line">   &#125;;</span><br><span class="line">   var hide = function()&#123;</span><br><span class="line">      show();</span><br><span class="line">   &#125;</span><br><span class="line">// */</span></span><br><span class="line">   <span class="keyword">return</span>&#123;init:init, show:show, current:current&#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<p>HTML 或 JavaScript 里的注释不应该给最终用户看到。理解 <strong>Development code is not live code （开发代码不是线上代码）</strong>。</p>
<h2 id="避免与其它技术混用">避免与其它技术混用</h2><p>JavaScript 擅长计算，转换，访问外部资源（Ajax）和定义界面的交互行为（事件处理）。别的事情应该让别的技术完成。</p>
<p>例如：</p>
<div style="color:#c01d1d">当所有带“mandatory”class 的区域是空时，用红色边框标注一下。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="built_in">document</span>.getElementById(<span class="string">'mainform'</span>);</span><br><span class="line"><span class="keyword">var</span> inputs = f.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=inputs.length;i&lt;j;i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(inputs[i].className === <span class="string">'mandatory'</span> &amp;&amp; inputs.value === <span class="string">''</span>)&#123;</span><br><span class="line">      inputs[i].style.borderColor = <span class="string">'#f00'</span>;</span><br><span class="line">      inputs[i].style.borderStyle = <span class="string">'solid'</span>;</span><br><span class="line">      inputs[i].style.borderWidth = <span class="string">'1px'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="color:#c01d1d">… 两个月下来：所有的样式必须遵循新公司的风格指南，不允许有边框，错误应该有个警示图标。怎么办呢？</div><br><br><br><div style="color:#5ead12">我们不必通过改变 JavaScript 代码来改变外观和感觉。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="built_in">document</span>.getElementById(<span class="string">'mainform'</span>);</span><br><span class="line"><span class="keyword">var</span> inputs = f.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=inputs.length;i&lt;j;i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(inputs[i].className === <span class="string">'mandatory'</span> &amp;&amp; inputs.value === <span class="string">''</span>)&#123;</span><br><span class="line">      inputs[i].className+=<span class="string">' error'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div><br>使用 CSS 继承可以避免循环许多元素。<br></div>

<h2 id="使用简洁的写法">使用简洁的写法</h2><p><strong>一旦你习惯简洁写法，代码会更清爽，更易读。</strong></p>
<p>这段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lunch = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">lunch[<span class="number">0</span>]=<span class="string">'Dosa'</span>;</span><br><span class="line">lunch[<span class="number">1</span>]=<span class="string">'Roti'</span>;</span><br><span class="line">lunch[<span class="number">2</span>]=<span class="string">'Rice'</span>;</span><br><span class="line">lunch[<span class="number">3</span>]=<span class="string">'what the heck is this?'</span>;</span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lunch = [</span><br><span class="line">   <span class="string">'Dosa'</span>,</span><br><span class="line">   <span class="string">'Roti'</span>,</span><br><span class="line">   <span class="string">'Rice'</span>,</span><br><span class="line">   <span class="string">'what the heck is this?'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p>这段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(v)&#123;</span><br><span class="line">   <span class="keyword">var</span> x = v;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> x =<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = v || <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p>
<p>这段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> direction;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">100</span>)&#123;</span><br><span class="line">   direction = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   direction = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> direction = (x &gt; <span class="number">100</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="模块化">模块化</h2><p><strong>保持代码的模块化和专业化</strong></p>
<p>我们很容易写一个函数做所有事，可是当扩展功能时，发现好几个函数做同样的事情。</p>
<p>为了避免此事，确保写较小的，通用辅助函数，完成一个特定的任务，而不是所有的方法。</p>
<p>再后来，你可以使用 revealing module pattern（揭示模块模式）暴露一些方法，创建一套 API 扩展主要功能。</p>
<p>好的代码应该易于扩展，不需要重写核心。</p>
<h2 id="渐进增强">渐进增强</h2><p><strong>避免创建许多 JavaScript 依赖代码</strong></p>
<p>DOM 操作又慢又昂贵。</p>
<p>当禁用 JavaScript 时，依赖 JavaScript 的元素要仍然可用。</p>
<h2 id="允许配置和转化">允许配置和转化</h2><p><strong>代码也许会变，代码结构不应该是松散的。</strong></p>
<p>包括标签，CSS 类，ID 和默认配置。</p>
<p>把这些放进一个配置对象，保持公开，我们很容易维护，并且可以自由定制。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">carousel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> config = &#123;</span><br><span class="line">      CSS:&#123;</span><br><span class="line">         classes:&#123;</span><br><span class="line">            current:<span class="string">'current'</span>,</span><br><span class="line">            scrollContainer:<span class="string">'scroll'</span></span><br><span class="line">         &#125;,</span><br><span class="line">         IDs:&#123;</span><br><span class="line">            maincontainer:<span class="string">'carousel'</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      labels:&#123;</span><br><span class="line">         previous:<span class="string">'back'</span>,</span><br><span class="line">         next:<span class="string">'next'</span>,</span><br><span class="line">         auto:<span class="string">'play'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      settings:&#123;</span><br><span class="line">         amount:<span class="number">5</span>,</span><br><span class="line">         skin:<span class="string">'blue'</span>,</span><br><span class="line">         autoplay:<span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">highlight</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> &#123;config:config,init:init&#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<h2 id="避免严重嵌套">避免严重嵌套</h2><p><strong>多层嵌套的代码很不易读。</strong></p>
<p>循环嵌套循环是个坏主意，需要小心几个迭代器变量（i, j, k, l, m…）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderProfiles</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> out = <span class="built_in">document</span>.getElementById(<span class="string">'profiles'</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;o.members.length;i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line">      <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">      li.appendChild(<span class="built_in">document</span>.createTextNode(o.members[i].name));</span><br><span class="line">      <span class="keyword">var</span> nestedul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;o.members[i].data.length;j++)&#123;</span><br><span class="line">         <span class="keyword">var</span> datali = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">         datali.appendChild(</span><br><span class="line">            <span class="built_in">document</span>.createTextNode(</span><br><span class="line">               o.members[i].data[j].label + <span class="string">' '</span> +</span><br><span class="line">               o.members[i].data[j].value</span><br><span class="line">            )</span><br><span class="line">         );</span><br><span class="line">         nestedul.appendChild(detali);</span><br><span class="line">      &#125;</span><br><span class="line">      li.appendChild(nestedul);</span><br><span class="line">   &#125;</span><br><span class="line">   out.appendChild(ul);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用专门的工具方法避免重度的循环嵌套。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderProfiles</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> out = <span class="built_in">document</span>.getElementById(<span class="string">'profiles'</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;o.members.length;i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line">      <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">      li.appendChild(<span class="built_in">document</span>.createTextNode(data.members[i].name));</span><br><span class="line">      li.appendChild(addMemberData(o.members[i]));</span><br><span class="line">   &#125;</span><br><span class="line">   out.appendChild(ul);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMemberData</span>(<span class="params">member</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;member.data.length;i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">      li.appendChild(</span><br><span class="line">         <span class="built_in">document</span>.createTextNode(</span><br><span class="line">            member.data[i].label + <span class="string">' '</span> +</span><br><span class="line">            member.data[i].value</span><br><span class="line">         )</span><br><span class="line">      );</span><br><span class="line">   &#125;</span><br><span class="line">   ul.appendChild(li);</span><br><span class="line">   <span class="keyword">return</span> ul;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="优化循环">优化循环</h2><p><strong>JavaScript 循环可能非常慢。</strong></p>
<p>不要让 JavaScript 每次迭代都读取数组的长度，用变量保存长度的值。</p>
<p>不好：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'George'</span>,</span><br><span class="line"><span class="string">'Ringo'</span>,</span><br><span class="line"><span class="string">'Paul'</span>,</span><br><span class="line"><span class="string">'John'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;names.length;i++)&#123;</span><br><span class="line">   doSomethingWith(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'George'</span>,</span><br><span class="line"><span class="string">'Ringo'</span>,</span><br><span class="line"><span class="string">'Paul'</span>,</span><br><span class="line"><span class="string">'John'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=names.length;i&lt;j;i++)&#123;</span><br><span class="line">  doSomethingWith(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<div>重度计算代码放到循环外边，包括正则表达式，首要的是 DOM 操作。</div>

<p>你可以在循环里创建 DOM 节点，但是避免插入文档对象。</p>
<h2 id="DOM_访问最小化">DOM 访问最小化</h2><p><strong>如果可以避免，不要访问 DOM。</strong></p>
<p><strong>原因：</strong>比较慢，有各种各样的浏览器问题</p>
<p><strong>解决方案：</strong>编写或使用一个辅助方法，批量把数据集转换成 HTML 。</p>
<p>所有的数据在一个方法中处理，最后把结果一次性加入到 DOM 中去。</p>
<h2 id="不要屈服于浏览器的奇怪表现">不要屈服于浏览器的奇怪表现</h2><p><strong>依赖浏览器稀奇古怪的行为，不如希望它一切正常。</strong></p>
<p>避免使用一些奇技淫巧，分析问题的根源。</p>
<p>很多时候，你会发现你需要额外的功能，是因为你的界面规划不好。</p>
<h2 id="不要信任任何数据">不要信任任何数据</h2><p><strong>好的代码不会信任收到的任何数据。</strong></p>
<ul>
<li>不要相信 HTML 文档<br>任何用户都可以干预它，比如通过 Firebug 。</li>
<li>不要相信你的函数接收的数据格式永远正确。<br>用 typeof 测试，然后再处理它。</li>
<li>不要预期 DOM 中的元素是可用的。<br>改变它们之前测试一下，确保它们如你的预期。</li>
<li>不要妄图使用 JavaScript 保护一些东西。<br>JavaScript 代码很容易被破解 :)</li>
</ul>
<h2 id="通过_JavaScript_添加功能，而不是添加内容">通过 JavaScript 添加功能，而不是添加内容</h2><p>如果你发现 JavaScript 里面有过多的 HTML ，你可能做错了什么。</p>
<p>创建使用 DOM 不是很方便，一般用 <strong>innerHTML</strong> ，这样很难追踪 HTML 的代码质量。</p>
<p>如果的确有大量的界面，可以通过 Ajax 加载静态的 HTML 文档界面。</p>
<p>这种方式 HTML 好维护，并且支持定制。</p>
<h2 id="站在巨人的肩膀上">站在巨人的肩膀上</h2><p><strong>JavaScript 很有趣，不过针对所有浏览器写 JavaScript 不那么有趣… 所以从一个好框架入手。</strong></p>
<p>JavaScript 框架专门用于堵浏览器的漏洞，让浏览器行为和你的代码更符合预期。</p>
<p>好的框架帮助你写代码，帮你节省了一些支持主流浏览器的开销。</p>
<h2 id="开发代码不等于线上代码">开发代码不等于线上代码</h2><p><strong>线上代码为机器所写，开发环境代码为人而写。</strong></p>
<ul>
<li>构建流程包含核对，最小化和优化代码。</li>
<li>不要过早优化。</li>
<li>如果我们减少了编码时间，可以有更多时间完善向机器码的转换。</li>
</ul>
<blockquote>
<p>参考资料：<br><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="external">Learning JavaScript Design Patterns</a> </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇指南分两部分，翻译自 Mozilla 的 Web 布道师 Christian Heilmann 的 <a href="http://www.slideshare.net/cheilmann/javascript-best-practices-1041724">PPT</a> （需翻墙）</p>
<blockquote>
<p>原文：<br><a href="http://www.thinkful.com/learn/javascript-best-practices-1/">Javascript BEST PRACTICES PART 1</a><br><a href="http://www.thinkful.com/learn/javascript-best-practices-2/">Javascript BEST PRACTICES PART 2</a><br>译者：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<h2 id="Make_it_Understandable（更易理解）">Make it Understandable（更易理解）</h2><p>变量和函数选择容易理解，较短的单词命名。</p>
<div style="color:#c01d1d">不好的变量名：</div><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">x1</span> fe2 xbqne</span><br></pre></td></tr></table></figure><br><br><br><div style="color:#c01d1d">也不好的变量名：</div><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">incrementerForMainLoopWhichSpansFromTenToTwenty</span></span><br><span class="line">createNewMemberIfAgeOverTwentyOneAndMoonIsFull</span><br></pre></td></tr></table></figure><br><br>避免用变量或函数名描述一个值。<br><br><div style="color:#c01d1d">在有的国家也许讲不通：</div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isOverEighteen</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><br><br><div style="color:#5ead12">工作良好：</div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isLegalAge</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><br>Your code is a story - make your storyline easy to follow!<br>你的代码是一则故事 - 让故事情节更容易投入。<br><br>## 避免全局变量<br><br>全局变量是魔鬼<br><br><strong>原因：</strong>其它后面的 JavaScript 代码随时会覆盖你的代码。<br><br><strong>变通方案：</strong>使用闭包和模块模式<br><br><div style="color:#c01d1d"><br>    <strong>问题：</strong>所有全局变量都可以被访问；访问不受控制，页面任何东西都可以被覆盖。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> current = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> labels = &#123;</span><br><span class="line">   <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">   <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">   <span class="string">'contact'</span>:<span class="string">'contact'</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   current = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   show();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://jinlong.github.io/tags/Javascript/"/>
    
      <category term="Javascript" scheme="http://jinlong.github.io/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用户体验设计中的巧妙过渡]]></title>
    <link href="http://jinlong.github.io/2013/11/25/smart-transitions-in-user-experience-design/"/>
    <id>http://jinlong.github.io/2013/11/25/smart-transitions-in-user-experience-design/</id>
    <published>2013-11-25T03:55:00.000Z</published>
    <updated>2015-10-29T02:54:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://uxdesign.smashingmagazine.com/2013/10/23/smart-transitions-in-user-experience-design/" target="_blank" rel="external">Smart Transitions In User Experience Design</a><br>译者：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>一些网站不仅在内容，可用性，设计，功能等方面，让人耳目一新；交互设计细节和动画更是与众不同。我们将分享一些模型的经验，分析一下这些简单的模式为什么效果很好。</p>
<p>当我们设计数码产品时，我们一般使用 Photoshop 和 Sketch 此类软件。大多数有数年行业经验的人显然明白设计不仅仅是视觉传达。尽管如此，有些人还是继续做静态设计。<a href="http://www.nytimes.com/2003/11/30/magazine/30IPOD.html?pagewanted=all" target="_blank" rel="external">Steve Jobs 如此描述设计</a>：</p>
<blockquote>
<p>“It’s not just what it looks like and feels like. Design is how it works.“<br>“设计不仅仅是看起来和感受到的样子。设计是如何工作。”</p>
</blockquote>
<p>我们对于产品的体验和印象来源于诸多因素的集合，交互扮演一个根基的角色。我们无法想象用户界面是静态设计，随后再添加交互魔法。相反，我们需要在早期加入交互特性，把它当成天然的组成部分。</p>
<p>让我们看看一些巧妙的交互，它们是一些微妙的动画，优雅地改善了用户体验。<br><a id="more"></a></p>
<h2 id="动画滚动">动画滚动</h2><p>超链接总是褒贬不一，当点击一个链接时，可以生硬地跳转，结果是<strong>丢失上下文</strong>。</p>
<p>对网站而言，特别是长网站，加一个线性滚动动画，可以改善用户体验：</p>
<p><img src="/images/post/smart-transitions/ScrollingAnimated.gif"></p>
<p>对比下面看看：</p>
<p><img src="/images/post/smart-transitions/ScrollingNoAnimation.gif"></p>
<p>对比下默认行为和动画行为，跳过内容不再是无意识的行为；它是一个决定。实际上，《<a href="http://hopelies.com/" target="_blank" rel="external">Hope Lies at 24 Frames Per Second</a>》此文中的菜单按钮没有任何动画，它花了我1分多钟才明白确切发生了什么。</p>
<p><strong>要点：</strong>界面的突然变化用户很难适应，总是告知他们发生了什么。</p>
<h2 id="有状态的切换">有状态的切换</h2><p>让我们看看另一个例子：切换菜单。用户点击“+”号增加内容或展开元素。通过旋转 45 度，加号变成了叉号，叉号大家广泛理解为“关闭”：</p>
<p><img src="/images/post/smart-transitions/Stateful-toggle.gif"></p>
<p>简单的变换完全改变了图标的意义。这个小细节比让用户猜测接下来发生什么，以及理解图标是什么意思容易多了。这个切换对用户非常友好。此外，加号旋转总是跟内容保持一个方向，加强了信息的流动。</p>
<p><strong>要点：</strong>让网站元素的每个状态都可理解。</p>
<h2 id="渐进呈现表单和评论">渐进呈现表单和评论</h2><p>许多博客和新闻网站的评论表单不是很友好，当你准备发表评论时，你只想输入评论而不是干别的，典型的问题是，它会询问你各种其它的事情，好烦人呐。</p>
<p>为了激发用户的评论热情，我们可以<strong>仅显示最重要的元素：评论框</strong>。当用户点击输入区域时，展开相应的表单。真实世界渐进展现的例子，可以看纽约时报的 beta 网站：</p>
<p><img src="/images/post/smart-transitions/NY-Times.gif"></p>
<p>你可以更进一步，当评论框获得焦点时展开表单。这么做有个问题，交互设计的基本原则提到：<strong>an action should always happen close to where the interaction occurs （一个行为总是发生在离交互点最近的地方）</strong>（关注焦点附近）。我们可以再进一步，给评论框添加动画引导用户：</p>
<p><img src="/images/post/smart-transitions/ExpandingComments.gif"></p>
<p>你还可以把评论框固定在顶部，在下面展开相应内容，显示附加字段。</p>
<p>如你所见，这么做减少了混乱，令评论表单更吸引人。</p>
<p>更好的做法是，当用户到达页面底部时自动加载评论。我们应该避免强迫用户去点击，除非有更好的理由。</p>
<p><strong>要点：</strong>渐进展现为了减少 UI 组件的呈现，用户需要它们时再显示出来。</p>
<h2 id="Pull_To_Refresh_（拉动刷新）">Pull To Refresh （拉动刷新）</h2><p>最令人激动的交互之一是伴随着 iPhone 出现， Loren Brichter 倡导的 “拉动刷新”。用户可以更新可卷动的时序型内容。你可以在 Twitter 的应用中看到此效果。</p>
<p><img src="/images/post/smart-transitions/Twitter.gif"></p>
<p>为什么效果这么好？在拉动刷新出现之前，用户必须点击浏览器的刷新按钮加载更多内容。把用户发现更多内容的愿望和刷新行为联系起来，明确的点击行为变得好古板。</p>
<p><strong>要点：</strong>连接意图和行为，体验变得更加无缝。</p>
<h2 id="Sticky_Labels_（粘性标签）">Sticky Labels （粘性标签）</h2><p>粘性标签是另一个微妙而实用的组合，它把用户界面与有意义的过渡结合起来。看看 <a href="http://edenspiekermann.com/projects" target="_blank" rel="external">Edenspiekermann’s use of this technique</a> 的运用。</p>
<p><img src="/images/post/smart-transitions/Sticky-Label.gif"></p>
<p>项目标签一直固定在内容的左侧，直到下一个项目出现。这个效果类似 iOS 地址本，它为较长区域提供了上下文。过渡效果不仅增加了方向感，而且提供了基于上下文的描述。</p>
<p><strong>要点：</strong>长区域中添加了有价值信息的摘要或者标题可以使用粘性标签。</p>
<h2 id="Affordance_Transition_（自解释的过渡效果）">Affordance Transition （自解释的过渡效果）</h2><p>自解释的概念源于认知心理学，指一个对象的特征，它用于引导用户。</p>
<p>在用户界面设计的上下文，EU 网站的<a href="http://ec.europa.eu/regional_policy/archive/country/commu/docevent/26112008/5_doulgerof_glossary.pdf" target="_blank" rel="external">可用性词汇</a>（PDF）中如此定义自解释性：</p>
<blockquote>
<p>“An affordance is a desirable property of a user interface — software which naturally leads people to take the correct steps to accomplish their goals.”<br>“自解释性是用户界面令人满意的特性 —— 软件很自然地引导用户，通过正确的步骤达到预期的目标。”</p>
</blockquote>
<p>Ridges（棱线）常常用于提高自解释性。按钮周围的棱线暗示按钮是可操作的。这种用户体验技术被 iOS 上的相机应用广泛推广。</p>
<p><img src="/images/post/smart-transitions/iOS_Lockscreen-500-final.jpg"></p>
<p>iOS 6 的锁屏旁边的相机图标，暗示可以拖动。Apple 在 iOS 7里移除了它，显然是因为用户习惯让它看起来更像一个独立的图标。后来是怎么做的：当你拖动按钮，锁屏弹起，相机出现在下面。这是一项将用户指向功能的很好的技术。</p>
<p><strong>要点：</strong>在界面上，给予元素高度自解释性，它会把用户指向功能。</p>
<h2 id="Context-Based_Hiding（基于上下文隐藏）">Context-Based Hiding（基于上下文隐藏）</h2><p>iOS 上的 Google Chrome 启动后有个基于上下文隐藏功能，见下图：</p>
<p><img src="/images/post/smart-transitions/CBH.gif"></p>
<p>基本理念是当用户向下滚动页面，浏览器导航面板自动隐藏。当用户再次向上滚动页面，控制面板出现。这种方法不仅改善了上下文体验（专注于内容本身），而且增加了屏幕可用空间。屏幕空间在移动设备尤为重要。</p>
<p>首先假设<strong>用户将一直浏览关注的内容</strong>。当他们停止浏览，上下文可能改变；因此，导航面板需要重新出现。这一技术节省屏幕空间的同时，检查某种假设是否超出了你的测试用例。</p>
<p>iOS 处理的更好，当到达页面的底部时，控制面板再次出现。这是一个动态整合用户需求的绝佳的例子。</p>
<p><strong>要点：</strong>使用基于上下文的隐藏功能提高用户关注度，节省屏幕空间。</p>
<h2 id="Focus_Transition（焦点过渡）">Focus Transition（焦点过渡）</h2><p>当通过键盘导航时，用户按下 Tab 键，常常搞不清焦点移动到哪里了。通过动画指引他们到达页面指定位置。过渡是微妙的，但在指引用户方面影响巨大。</p>
<p><strong>要点：</strong>为用户指明方向，不管他们如何导航。</p>
<h2 id="总之">总之</h2><p>这几个例子仅仅是九牛一毛罢了，本文要点不是秀一些最新最酷的交互技术，而是强调如何通过轻微的交互细节大大提高用户体验。</p>
<p>如果我们想设计出更好的数字产品，我们需要挑战当前的信念，看看何种交互模式更能方便用户的使用。我没说要重复造轮子，但是不要停止探索。因此，走出你的安乐窝，保持探索，勇于尝试。</p>
<p>如果你喜欢本文，可以在 Twitter 上<a href="http://www.twitter.com/webchaeschtli" target="_blank" rel="external">关注我</a> ，或者到瑞士请我一块瑞士巧克力。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://uxdesign.smashingmagazine.com/2013/10/23/smart-transitions-in-user-experience-design/">Smart Transitions In User Experience Design</a><br>译者：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<p>一些网站不仅在内容，可用性，设计，功能等方面，让人耳目一新；交互设计细节和动画更是与众不同。我们将分享一些模型的经验，分析一下这些简单的模式为什么效果很好。</p>
<p>当我们设计数码产品时，我们一般使用 Photoshop 和 Sketch 此类软件。大多数有数年行业经验的人显然明白设计不仅仅是视觉传达。尽管如此，有些人还是继续做静态设计。<a href="http://www.nytimes.com/2003/11/30/magazine/30IPOD.html?pagewanted=all">Steve Jobs 如此描述设计</a>：</p>
<blockquote>
<p>“It’s not just what it looks like and feels like. Design is how it works.“<br>“设计不仅仅是看起来和感受到的样子。设计是如何工作。”</p>
</blockquote>
<p>我们对于产品的体验和印象来源于诸多因素的集合，交互扮演一个根基的角色。我们无法想象用户界面是静态设计，随后再添加交互魔法。相反，我们需要在早期加入交互特性，把它当成天然的组成部分。</p>
<p>让我们看看一些巧妙的交互，它们是一些微妙的动画，优雅地改善了用户体验。<br>]]>
    
    </summary>
    
      <category term="交互设计" scheme="http://jinlong.github.io/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="用户体验" scheme="http://jinlong.github.io/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
      <category term="用户体验" scheme="http://jinlong.github.io/categories/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
      <category term="交互设计" scheme="http://jinlong.github.io/categories/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS 滑动门十年纪念]]></title>
    <link href="http://jinlong.github.io/2013/10/20/ten-years-of-sliding-doors-of-css/"/>
    <id>http://jinlong.github.io/2013/10/20/ten-years-of-sliding-doors-of-css/</id>
    <published>2013-10-20T10:24:00.000Z</published>
    <updated>2014-10-25T02:21:14.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/post/css-sliding-door/sliding_doors.png"></p>
<blockquote>
<p>看到这篇文章，真是让我心潮澎湃，仿佛看到刚接触前端的我，拿着本《<a href="http://www.amazon.cn/CSS%E8%AE%BE%E8%AE%A1%E5%BD%BB%E5%BA%95%E7%A0%94%E7%A9%B6-%E6%B8%A9%E8%B0%A6/dp/B00139O3TG/ref=sr_1_1?ie=UTF8&amp;qid=1382869723&amp;sr=8-1&amp;keywords=css%E8%AE%BE%E8%AE%A1%E5%BD%BB%E5%BA%95%E7%A0%94%E7%A9%B6" target="_blank" rel="external">CSS设计彻底研究</a>》慢慢的啃。当时看到前人发明的 CSS 滑动门，真是觉得相当惊艳，转眼间，这个技术距今已有10年。</p>
</blockquote>
<p>正是十年前的 2003年10月20日，<a href="http://alistapart.com/ Doug Bowman http://twitter.com/stop" target="_blank" rel="external">A List Apart</a> 的文章《<a href="http://alistapart.com/article/slidingdoors" target="_blank" rel="external">CSS 滑动门</a>》。</p>
<p>A List Apart 现在提醒读者“尽管它曾经辉煌，但此文不再代表当今的最佳实践”。的确是这样，但是让这个周年纪念悄悄过去心有不甘。</p>
<p>可能许多人没有从事 web 工作，他们或许想知道为什么一篇如何把无序列表修饰成标签的文章怎么会如此重要，因为我们现在可以使用支持更好的 CSS 属性达到同样的效果。</p>
<p>我们可以在单个元素使用多背景图片，而不是给列表项和锚点同时应用图片。我们可以使用圆角，多个内部盒子阴影（box shadow）创建时髦的 3d 标签。如果我们打算牺牲一点浏览器兼容性，甚至可以使用 CSS 渐变 。</p>
<p>但是在 Doug 之前，毫不夸张地说，没有人想出如何用 CSS 制作圆角标签。这是 A List Apart 一系列开创性文章的伊始，它不仅打破了 CSS 的限制，而且改变了 web ，被众人熟知。如果你还没读过<a href="http://alistapart.com/article/slidingdoors" target="_blank" rel="external">滑动门的文章</a>以及<a href="http://alistapart.com/article/slidingdoors2" target="_blank" rel="external">后续文章</a>，现在可以品味下了。</p>
<p>怀旧之情？是的，今天的我们是多么幸运，拥有成熟的 CSS 和浏览器兼容性，那些只是 2003 年时的梦想。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/post/css-sliding-door/sliding_doors.png"></p>
<blockquote>
<p>看到这篇文章，真是让我心潮澎湃，仿佛看到刚接触前端的我，拿着本《<a href="http://www.amazo]]>
    </summary>
    
      <category term="CSS" scheme="http://jinlong.github.io/tags/CSS/"/>
    
      <category term="滑动门" scheme="http://jinlong.github.io/tags/%E6%BB%91%E5%8A%A8%E9%97%A8/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/categories/CSS/"/>
    
      <category term="滑动门" scheme="http://jinlong.github.io/categories/CSS/%E6%BB%91%E5%8A%A8%E9%97%A8/"/>
    
  </entry>
  
</feed>
