<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Alon's Blog]]></title>
  <subtitle><![CDATA[一边翻译一边学习---涂鸦码龙]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jinlong.github.io/"/>
  <updated>2015-10-28T14:31:33.734Z</updated>
  <id>http://jinlong.github.io/</id>
  
  <author>
    <name><![CDATA[Alon Zhang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JavaScript API 设计原则]]></title>
    <link href="http://jinlong.github.io/2015/08/31/secrets-of-awesome-javascript-api-design/"/>
    <id>http://jinlong.github.io/2015/08/31/secrets-of-awesome-javascript-api-design/</id>
    <published>2015-08-31T13:45:36.000Z</published>
    <updated>2015-10-28T14:31:33.734Z</updated>
    <content type="html"><![CDATA[<p>前段时间组织优化我们的原生模块 API（iOS、Android 模块封装成 JavaScript 接口），于是学习了几篇 JavaScript API 设计的文章，尽管是旧文，但受益匪浅，这里记录一下。</p>
<hr>
<p>好的 API 设计：在自描述的同时，达到抽象的目标。</p>
<p>设计良好的 API ，开发者可以快速上手，没必要经常抱着手册和文档，也没必要频繁光顾技术支持社区。</p>
<p>#流畅的接口</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Method_chaining" target="_blank" rel="external">方法链</a>：流畅易读，更易理解</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见的 API 调用方式：改变一些颜色，添加事件监听</span></span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"foobar"</span>);</span><br><span class="line">elem.style.background = <span class="string">"red"</span>;</span><br><span class="line">elem.style.color = <span class="string">"green"</span>;</span><br><span class="line">elem.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"hello world!"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（设想的）方法链 API</span></span><br><span class="line">DOMHelper.getElementById(<span class="string">'foobar'</span>)</span><br><span class="line">  .setStyle(<span class="string">"background"</span>, <span class="string">"red"</span>)</span><br><span class="line">  .setStyle(<span class="string">"color"</span>, <span class="string">"green"</span>)</span><br><span class="line">  .addEvent(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"hello world"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>设置和获取操作，可以合二为一；方法越多，文档可能越难写</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $elem = jQuery(<span class="string">"#foobar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//setter</span></span><br><span class="line">$elem.setCss(<span class="string">"background"</span>, <span class="string">"green"</span>);</span><br><span class="line"><span class="comment">//getter</span></span><br><span class="line">$elem.getCss(<span class="string">"color"</span>) === <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter, setter 合二为一</span></span><br><span class="line">$elem.css(<span class="string">"background"</span>, <span class="string">"green"</span>);</span><br><span class="line">$elem.css(<span class="string">"color"</span>) === <span class="string">"red"</span>;</span><br></pre></td></tr></table></figure>
<p>#一致性</p>
<p>相关的接口保持一致的风格，一整套 API 如果传递一种熟悉和舒适的感觉，会大大减轻开发者对新工具的适应性。   </p>
<p>命名这点事：既要短，又要自描述，最重要的是保持一致性</p>
<blockquote>
<p>“There are only two hard problems in computer science: cache-invalidation and naming things.”<br>“在计算机科学界只有两件头疼的事：缓存失效和命名问题”<br>— Phil Karlton</p>
</blockquote>
<p>选择一个你喜欢的措辞，然后持续使用。选择一种风格，然后保持这种风格。</p>
<p>#处理参数</p>
<p>需要考虑大家如何使用你提供的方法，是否会重复调用？为何会重复调用？你的 API 如何帮助开发者减少重复的调用？<br>接收map映射参数，回调或者序列化的属性名，不仅让你的 API 更干净，而且使用起来更舒服、高效。</p>
<p>jQuery 的 <code>css()</code> 方法可以给 DOM 元素设置样式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="string">"#some-selector"</span>)</span><br><span class="line">  .css(<span class="string">"background"</span>, <span class="string">"red"</span>)</span><br><span class="line">  .css(<span class="string">"color"</span>, <span class="string">"white"</span>)</span><br><span class="line">  .css(<span class="string">"font-weight"</span>, <span class="string">"bold"</span>)</span><br><span class="line">  .css(<span class="string">"padding"</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>这个方法可以接受一个 JSON 对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="string">"#some-selector"</span>).css(&#123;</span><br><span class="line">  <span class="string">"background"</span> : <span class="string">"red"</span>,</span><br><span class="line">  <span class="string">"color"</span> : <span class="string">"white"</span>,</span><br><span class="line">  <span class="string">"font-weight"</span> : <span class="string">"bold"</span>,</span><br><span class="line">  <span class="string">"padding"</span> : <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过传一个 map 映射绑定事件</span></span><br><span class="line">jQuery(<span class="string">"#some-selector"</span>).on(&#123;</span><br><span class="line">  <span class="string">"click"</span> : myClickHandler,</span><br><span class="line">  <span class="string">"keyup"</span> : myKeyupHandler,</span><br><span class="line">  <span class="string">"change"</span> : myChangeHandler</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为多个事件绑定同一个处理函数</span></span><br><span class="line">jQuery(<span class="string">"#some-selector"</span>).on(<span class="string">"click keyup change"</span>, myEventHandler);</span><br></pre></td></tr></table></figure>
<p>##处理类型</p>
<p>定义方法的时候，需要决定它可以接收什么样的参数。我们不清楚人们如何使用我们的代码，但可以更有远见，考虑支持哪些参数类型。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来的代码</span></span><br><span class="line">DateInterval.prototype.days = <span class="function"><span class="keyword">function</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor((end - start) / <span class="number">86400000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改后的代码</span></span><br><span class="line">DateInterval.prototype.days = <span class="function"><span class="keyword">function</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(start <span class="keyword">instanceof</span> <span class="built_in">Date</span>)) &#123;</span><br><span class="line">    start = <span class="keyword">new</span> <span class="built_in">Date</span>(start);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!(end <span class="keyword">instanceof</span> <span class="built_in">Date</span>)) &#123;</span><br><span class="line">    end = <span class="keyword">new</span> <span class="built_in">Date</span>(end);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor((end.getTime() - start.getTime()) / <span class="number">86400000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>加了短短的6行代码，我们的方法强大到可以接收 <code>Date</code> 对象，数字的时间戳，甚至像 <code>Sat Sep 08 2012 15:34:35 GMT+0200 (CEST)</code> 这样的字符串</p>
<p>如果你需要确保传入的参数类型（字符串，数字，布尔），可以这样转换：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">castaway</span>(<span class="params">some_string, some_integer, some_boolean</span>) </span>&#123;</span><br><span class="line">  some_string += <span class="string">""</span>;</span><br><span class="line">  some_integer += <span class="number">0</span>; <span class="comment">// parseInt(some_integer, 10) 更安全些</span></span><br><span class="line">  some_boolean = !!some_boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##处理 undefined</p>
<p>为了使你的 API 更健壮，需要鉴别是否真正的 <code>undefined</code> 值被传递进来，可以检查 <code>arguments</code> 对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testUndefined</span>(<span class="params">expecting, someArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (someArgument === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"someArgument 是 undefined"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"然而它实际是传进来的"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testUndefined(<span class="string">"foo"</span>);</span><br><span class="line"><span class="comment">// 结果: someArgument 是 undefined</span></span><br><span class="line">testUndefined(<span class="string">"foo"</span>, <span class="literal">undefined</span>);</span><br><span class="line"><span class="comment">// 结果:  someArgument 是 undefined , 然而它实际是传进来的</span></span><br></pre></td></tr></table></figure>
<p>##给参数命名</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">event.initMouseEvent(</span><br><span class="line">  <span class="string">"click"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">window</span>,</span><br><span class="line">  <span class="number">123</span>, <span class="number">101</span>, <span class="number">202</span>, <span class="number">101</span>, <span class="number">202</span>,</span><br><span class="line">  <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>,</span><br><span class="line">  <span class="number">1</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/en-US/docs/DOM/event.initMouseEvent" target="_blank" rel="external">Event.initMouseEvent</a> 这个方法简直丧心病狂，不看文档的话，谁能说出每个参数是什么意思？ </p>
<p>给每个参数起个名字，赋个默认值，可好</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">event.initMouseEvent(</span><br><span class="line">  type=<span class="string">"click"</span>,</span><br><span class="line">  canBubble=<span class="literal">true</span>,</span><br><span class="line">  cancelable=<span class="literal">true</span>,</span><br><span class="line">  view=<span class="built_in">window</span>,</span><br><span class="line">  detail=<span class="number">123</span>,</span><br><span class="line">  screenX=<span class="number">101</span>,</span><br><span class="line">  screenY=<span class="number">202</span>,</span><br><span class="line">  clientX=<span class="number">101</span>,</span><br><span class="line">  clientY=<span class="number">202</span>,</span><br><span class="line">  ctrlKey=<span class="literal">true</span>,</span><br><span class="line">  altKey=<span class="literal">false</span>,</span><br><span class="line">  shiftKey=<span class="literal">false</span>,</span><br><span class="line">  metaKey=<span class="literal">false</span>,</span><br><span class="line">  button=<span class="number">1</span>,</span><br><span class="line">  relatedTarget=<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>ES6, 或者 Harmony 就有 <a href="http://wiki.ecmascript.org/doku.php?id=harmony:parameter_default_values" target="_blank" rel="external">默认参数值</a> 和 <a href="http://wiki.ecmascript.org/doku.php?id=harmony:rest_parameters" target="_blank" rel="external">rest 参数</a> 了。</p>
<p>##参数接收 JSON 对象</p>
<p>与其接收一堆参数，不如接收一个 JSON 对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nightmare</span>(<span class="params">accepts, async, beforeSend, cache, complete, <span class="comment">/* 等28个参数 */</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (accepts === <span class="string">"text"</span>) &#123;</span><br><span class="line">    <span class="comment">// 准备接收纯文本</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dream</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = options || &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (options.accepts === <span class="string">"text"</span>) &#123;</span><br><span class="line">    <span class="comment">// 准备接收纯文本</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用起来也更简单了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nightmare(<span class="string">"text"</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">false</span>, <span class="literal">undefined</span>, <span class="comment">/* 等28个参数 */</span>);</span><br><span class="line"></span><br><span class="line">dream(&#123;</span><br><span class="line">  accepts: <span class="string">"text"</span>,</span><br><span class="line">  <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">  cache: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>##参数默认值</p>
<p>参数最好有默认值，通过 <a href="http://api.jquery.com/jQuery.extend/  , _.extend(" target="_blank" rel="external">jQuery.extend()</a> <a href="http://underscorejs.org/#extend" target="_blank" rel="external">http://underscorejs.org/#extend</a>) 和 Protoype 的 <a href="http://api.prototypejs.org/language/Object/extend/" target="_blank" rel="external">Object.extend</a> ，可以覆盖预设的默认值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> default_options = &#123;</span><br><span class="line">  accepts: <span class="string">"text"</span>,</span><br><span class="line">  <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">  beforeSend: <span class="literal">null</span>,</span><br><span class="line">  cache: <span class="literal">false</span>,</span><br><span class="line">  complete: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dream</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = jQuery.extend(&#123;&#125;, default_options, options || &#123;&#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(o.accepts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dream(&#123; <span class="keyword">async</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="comment">// prints: "text"</span></span><br></pre></td></tr></table></figure>
<p>#扩展性</p>
<p>##回调（callbacks）</p>
<p>通过回调， API 用户可以覆盖你的某一部分代码。把一些需要自定义的功能开放成可配置的回调函数，允许 API 用户轻松覆盖你的默认代码。</p>
<p>API 接口一旦接收回调，确保在文档中加以说明，并提供代码示例。</p>
<p>##事件（events）</p>
<p>事件接口最好见名知意，可以自由选择事件名字，避免与<a href="https://developer.mozilla.org/en-US/docs/DOM/DOM_event_reference" target="_blank" rel="external">原生事件</a> 重名。</p>
<p>#处理错误</p>
<p>不是所有的错误都对开发者调试代码有用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery 允许这么写</span></span><br><span class="line">$(<span class="built_in">document</span>.body).on(<span class="string">'click'</span>, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击时报错</span></span><br><span class="line"><span class="comment">//   TypeError: ((p.event.special[l.origType] || &#123;&#125;).handle || l.handler).apply is not a function</span></span><br><span class="line"><span class="comment">//   in jQuery.min.js on Line 3</span></span><br></pre></td></tr></table></figure>
<p>这样的错误调试起来很痛苦，不要浪费开发者的时间，直接告诉他们犯了什么错：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(callback) !== <span class="string">'[object Function]'</span>) &#123; <span class="comment">// 看备注</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"callback is not a function!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：<code>typeof callback === &quot;function&quot;</code> 在老的浏览器上会有问题，<code>object</code> 会当成个 <code>function</code> 。</p>
</blockquote>
<p>#可预测性</p>
<p>好的 API 具有可预测性，开发者可以根据例子推断它的用法。</p>
<p><a href="http://modernizr.com/docs/#howitworks" target="_blank" rel="external">Modernizr’s 特性检测</a> 是个例子：</p>
<p>a) 它使用的属性名完全与 HTML5、CSS 概念和 API 相匹配</p>
<p>b) 每一个单独的检测一致地返回 true 或 false 值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有这些属性都返回 'true' 或 'false'</span></span><br><span class="line">Modernizr.geolocation</span><br><span class="line">Modernizr.localstorage</span><br><span class="line">Modernizr.webworkers</span><br><span class="line">Modernizr.canvas</span><br><span class="line">Modernizr.borderradius</span><br><span class="line">Modernizr.boxshadow</span><br><span class="line">Modernizr.flexbox</span><br></pre></td></tr></table></figure>
<p>依赖于开发者已熟悉的概念也可以达到可预测的目的。</p>
<p><a href="http://api.jquery.com/category/selectors/" target="_blank" rel="external">jQuery’s 选择器语法</a> 就是一个显著的例子，CSS1-CSS3 的选择器可直接用于它的 DOM 选择器引擎。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#grid"</span>) <span class="comment">// Selects by ID</span></span><br><span class="line">$(<span class="string">"ul.nav &gt; li"</span>) <span class="comment">// All LIs for the UL with class "nav"</span></span><br><span class="line">$(<span class="string">"ul li:nth-child(2)"</span>) <span class="comment">// Second item in each list</span></span><br></pre></td></tr></table></figure>
<p>#比例协调</p>
<p>好的 API 并不一定是小的 API，API 的体积大小要跟它的功能相称。</p>
<p>比如 <a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> ，著名的日期解析和格式化的库，可以称之为均衡，它的 API 既简洁又功能明确。</p>
<p>像 Moment.js 这样特定功能的库，确保 API 的专注和小巧非常重要。</p>
<p>#编写 API 文档</p>
<p>软件开发最艰难的任务之一是写文档，实际上每个人都恨写文档，怨声载道的是没有一个好用的文档工具。</p>
<p>以下是一些文档自动生成工具：</p>
<ul>
<li><a href="http://yui.github.com/yuidoc/" target="_blank" rel="external">YUIDoc</a> (requires Node.js, npm)</li>
<li><a href="https://github.com/p120ph37/node-jsdoc-toolkit" target="_blank" rel="external">JsDoc Toolkit</a> (requires Node.js, npm)</li>
<li><a href="https://github.com/cbou/markdox" target="_blank" rel="external">Markdox</a> (requires Node.js, npm)</li>
<li><a href="https://github.com/visionmedia/dox" target="_blank" rel="external">Dox</a> (requires Node.js, npm)</li>
<li><a href="http://jashkenas.github.com/docco/" target="_blank" rel="external">Docco</a> (requires Node.js, Python, CoffeeScript)</li>
<li><a href="https://github.com/senchalabs/jsduck" target="_blank" rel="external">JSDuck</a> (reqires Ruby, gem)</li>
<li><a href="https://github.com/jsdoc3/jsdoc" target="_blank" rel="external">JSDoc 3</a> (requires Java)</li>
</ul>
<p><strong>最重要的是：确保文档跟代码同步更新。</strong></p>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="http://reeze.cn/2014/02/07/what-makes-a-good-api/" target="_blank" rel="external">好的 API 设计</a></li>
<li><a href="http://www.smashingmagazine.com/2012/10/09/designing-javascript-apis-usability/" target="_blank" rel="external">Designing Better JavaScript APIs</a></li>
<li><a href="http://webstandardssherpa.com/reviews/secrets-of-awesome-javascript-api-design/" target="_blank" rel="external">Secrets of Awesome JavaScript API Design</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间组织优化我们的原生模块 API（iOS、Android 模块封装成 JavaScript 接口），于是学习了几篇 JavaScript API 设计的文章，尽管是旧文，但受益匪浅，这里记录一下。</p>
<hr>
<p>好的 API 设计：在自描述的同时，达到抽象的目标。</p>
<p>设计良好的 API ，开发者可以快速上手，没必要经常抱着手册和文档，也没必要频繁光顾技术支持社区。</p>
<p>#流畅的接口</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Method_chaining">方法链</a>：流畅易读，更易理解</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见的 API 调用方式：改变一些颜色，添加事件监听</span></span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"foobar"</span>);</span><br><span class="line">elem.style.background = <span class="string">"red"</span>;</span><br><span class="line">elem.style.color = <span class="string">"green"</span>;</span><br><span class="line">elem.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"hello world!"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（设想的）方法链 API</span></span><br><span class="line">DOMHelper.getElementById(<span class="string">'foobar'</span>)</span><br><span class="line">  .setStyle(<span class="string">"background"</span>, <span class="string">"red"</span>)</span><br><span class="line">  .setStyle(<span class="string">"color"</span>, <span class="string">"green"</span>)</span><br><span class="line">  .addEvent(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"hello world"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="API Design" scheme="http://jinlong.github.io/tags/API-Design/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Retina屏的移动设备如何实现真正1px的线？]]></title>
    <link href="http://jinlong.github.io/2015/05/24/css-retina-hairlines/"/>
    <id>http://jinlong.github.io/2015/05/24/css-retina-hairlines/</id>
    <published>2015-05-24T10:02:35.000Z</published>
    <updated>2015-10-28T10:09:38.256Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前些日子总被人问起 iOS Retina 屏，设置 1px 边框，实际显示 2px，如何解决？<br>原来一直没在意，源于自己根本不是像素眼……<br>今天仔细瞅了瞅原生实现的边框和CSS设置的边框，确实差距不小……</p>
</blockquote>
<p>上图是原生实现，下图是 CSS 边框，手机上对比更加明显<br><img src="/image/css-retina-1px/native.jpg"><img src="/image/css-retina-1px/css.jpg"></p>
<p>然后，如何解决呢？搜遍整个谷歌，发现好多人早已开始研究解决方案了。到底有哪些方案，到底好不好用呢？试过才知道，把我试过的结论记录一下。</p>
<a id="more"></a>
<p>#有说用 0.5px 解决的</p>
<p>在2014年的 WWDC，“设计响应的Web体验” 一讲中，Ted O’Connor 讲到关于“retina<br> hairlines”（retina 极细的线）：在retina屏上仅仅显示1物理像素的边框，开发者应该如何处理呢。</p>
<p>他们曾介绍到 iOS 8 和 OS X Yosemite 即将支持 0.5px 的边框：</p>
<p><img src="/image/css-retina-1px/hairline.jpg"></p>
<p>额的神呐！so easy! 果真如此吗？</p>
<p>这样还不够（WWDC幻灯片通常是“唬人”的），但是相差不多。</p>
<p>问题是 retina 屏的浏览器可能不认识0.5px的边框，将会把它解释成0px，没有边框。包括 iOS 7 和 之前版本，OS X Mavericks 及以前版本，还有 Android 设备。</p>
<p><strong>解决方案</strong></p>
<p>解决方案是通过 JavaScript 检测浏览器能否处理0.5px的边框，如果可以，给<code>&lt;html&gt;</code>元素添加个<code>class</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> testElem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  testElem.style.border = <span class="string">'.5px solid transparent'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(testElem);</span><br><span class="line">  <span class="keyword">if</span> (testElem.offsetHeight == <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'html'</span>).classList.add(<span class="string">'hairlines'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(testElem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 脚本应该放在&lt;body&gt;内， 如果在&lt;head&gt;里面运行，需要包装 $(document).ready(function() &#123;   &#125;)</span></span><br></pre></td></tr></table></figure>
<p>然后，极细的边框样式就容易了：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#bbb</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="class">.hairlines</span> <span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">0.5px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>看起来是个解决方案，可是我要兼容安卓设备，和 iOS 8 以下设备怎么办？这个思路行不通。</strong></p>
<p>#还有用图片实现 border 的</p>
<p>6x6 的 一张图片</p>
<p><img src="/image/css-retina-1px/border.png"></p>
<p>可以用 gif，png，或 base64 图片</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.border</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">1px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border-image</span>:<span class="value"> <span class="function">url</span>(border.gif) <span class="number">2</span> repeat</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>缺点是改边框颜色时要改图片，不是很方便。</strong></p>
<p>#还有用多背景渐变实现的</p>
<p>设置1px的渐变背景，50%有颜色，50%透明</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.border</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"></span><br><span class="line">    <span class="function">linear-gradient</span>(<span class="number">180deg</span>, black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) top    left  / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line">    <span class="function">linear-gradient</span>(<span class="number">90deg</span>,  black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) top    right / <span class="number">1px</span> <span class="number">100%</span> no-repeat,</span><br><span class="line">    <span class="function">linear-gradient</span>(<span class="number">0</span>,      black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) bottom right / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line">    <span class="function">linear-gradient</span>(-<span class="number">90deg</span>, black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) bottom left  / <span class="number">1px</span> <span class="number">100%</span> no-repeat</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>多写了不少代码，圆角也没法实现，也是不太好用。</strong></p>
<p>#还有用 box-shadow 模拟边框的</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> none</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="function">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>试了下不太好用，颜色不好处理，有阴影出现。</strong></p>
<p>#<a href="http://m.taobao.com/" target="_blank" rel="external">淘宝M站</a>是通过 viewport + rem 实现的</p>
<p>在<code>devicePixelRatio = 2</code> 时，输出viewport</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>devicePixelRatio = 3</code> 时，输出viewport</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同时通过设置对应viewport的rem基准值，这种方式就可以像以前一样轻松愉快的写1px了。</p>
<p><strong>个人感觉为了做个 border 多准备两套样式，还得动态改变 viewport ，有点费劲。</strong></p>
<p>#最后找到一个还算好用的方法：伪类  + transform</p>
<p>原理是把原先元素的 border 去掉，然后利用 <code>:before</code> 或者 <code>:after</code> 重做 border ，并 transform 的 scale 缩小一半，原先的元素相对定位，新做的 border 绝对定位</p>
<ul>
<li>单条 border</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value">none</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span><span class="pseudo">:after</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">''</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">1px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">scaleY</span>(<span class="number">0.5</span>)</span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">scaleY</span>(<span class="number">0.5</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>四条 border</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value">none</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.hairlines</span> <span class="tag">li</span><span class="pseudo">:after</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">''</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">scale</span>(<span class="number">0.5</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">scale</span>(<span class="number">0.5</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value"> left top</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> left top</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>样式使用的时候，也要结合 JS 代码，判断是否 Retina 屏</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>).className = <span class="string">'hairlines'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以支持圆角，唯一的一点小缺陷是 <code>&lt;td&gt;</code> 用不了。</p>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="http://dieulot.net/css-retina-hairline" target="_blank" rel="external">CSS retina hairline, the easy way.</a></li>
<li><a href="http://www.ghugo.com/css-retina-hairline/" target="_blank" rel="external">再谈mobile web retina 下 1px 边框解决方案</a></li>
<li><a href="https://51bits.com/writing/half-point-css-borders-in-ios/" target="_blank" rel="external">Half-Point CSS Borders in iOS</a></li>
<li><a href="http://n12v.com/css-retina-and-physical-pixels/" target="_blank" rel="external">CSS, Retina, and Physical Pixels</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前些日子总被人问起 iOS Retina 屏，设置 1px 边框，实际显示 2px，如何解决？<br>原来一直没在意，源于自己根本不是像素眼……<br>今天仔细瞅了瞅原生实现的边框和CSS设置的边框，确实差距不小……</p>
</blockquote>
<p>上图是原生实现，下图是 CSS 边框，手机上对比更加明显<br><img src="/image/css-retina-1px/native.jpg" /><img src="/image/css-retina-1px/css.jpg" /></p>
<p>然后，如何解决呢？搜遍整个谷歌，发现好多人早已开始研究解决方案了。到底有哪些方案，到底好不好用呢？试过才知道，把我试过的结论记录一下。</p>]]>
    
    </summary>
    
      <category term="1px线" scheme="http://jinlong.github.io/tags/1px%E7%BA%BF/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/tags/CSS/"/>
    
      <category term="Retina" scheme="http://jinlong.github.io/tags/Retina/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[去除 JavaScript 代码的怪味]]></title>
    <link href="http://jinlong.github.io/2015/05/21/eliminate-javascript-code-smells/"/>
    <id>http://jinlong.github.io/2015/05/21/eliminate-javascript-code-smells/</id>
    <published>2015-05-21T15:06:21.000Z</published>
    <updated>2015-10-28T14:32:27.562Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：《<a href="http://elijahmanor.github.io/talks/js-smells/#/" target="_blank" rel="external">ELIMINATE JAVASCRIPT CODE SMELLS</a>》<br>作者：<a href="http://elijahmanor.com" target="_blank" rel="external">@elijahmanor</a><br>笔记：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码农</a></p>
</blockquote>
<p>#难闻的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* const */</span> <span class="keyword">var</span> CONSONANTS = <span class="string">'bcdfghjklmnpqrstvwxyz'</span>;</span><br><span class="line"><span class="comment">/* const */</span> <span class="keyword">var</span> VOWELS = <span class="string">'aeiou'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">englishToPigLatin</span>(<span class="params">english</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* const */</span> <span class="keyword">var</span> SYLLABLE = <span class="string">'ay'</span>;</span><br><span class="line">  <span class="keyword">var</span> pigLatin = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (english !== <span class="literal">null</span> &amp;&amp; english.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    (VOWELS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span> ||</span><br><span class="line">    CONSONANTS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span> )) &#123;</span><br><span class="line">    <span class="keyword">if</span> (VOWELS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      pigLatin = english + SYLLABLE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> preConsonants = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; english.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CONSONANTS.indexOf(english[i]) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">          preConsonants += english[i];</span><br><span class="line">          <span class="keyword">if</span> (preConsonants == <span class="string">'q'</span> &amp;&amp;</span><br><span class="line">            i+<span class="number">1</span> &lt; english.length &amp;&amp; english[i+<span class="number">1</span>] == <span class="string">'u'</span>) &#123;</span><br><span class="line">            preConsonants += <span class="string">'u'</span>;</span><br><span class="line">            i += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      pigLatin = english.substring(i) + preConsonants + SYLLABLE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pigLatin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##为毛是这个味？<br><a id="more"></a></p>
<p>##很多原因：</p>
<ul>
<li>声明过多</li>
<li>嵌套太深</li>
<li>复杂度太高</li>
</ul>
<p>##检查工具 </p>
<p><strong>Lint 规则</strong></p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span>jshint maxstatements:15, maxdepth:2, maxcomplexity:5 <span class="keyword">*</span>/</span><br><span class="line">/<span class="keyword">*</span>jshint 最多声明:15, 最大深度:2, 最高复杂度:5<span class="keyword">*</span>/</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span>eslint max-statements:[2, 15], max-depth:[1, 2], complexity:[2, 5] <span class="keyword">*</span>/</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>:<span class="number">0</span> - <span class="built_in">Function</span> <span class="string">'englishToPigLatin'</span> has a complexity <span class="keyword">of</span> <span class="number">7.</span></span><br><span class="line"><span class="comment">//englishToPigLatin 方法复杂度为 7</span></span><br><span class="line"><span class="number">7</span>:<span class="number">0</span> - This <span class="function"><span class="keyword">function</span> <span class="title">has</span> <span class="title">too</span> <span class="title">many</span> <span class="title">statements</span> (<span class="params">16</span>). <span class="title">Maximum</span> <span class="title">allowed</span> <span class="title">is</span> 15.</span><br><span class="line">//次方法有太多声明(<span class="params">16</span>)。最大允许值为15。</span><br><span class="line">22:10 - <span class="title">Blocks</span> <span class="title">are</span> <span class="title">nested</span> <span class="title">too</span> <span class="title">deeply</span> (<span class="params">5</span>).</span><br><span class="line">//嵌套太深(<span class="params">5</span>)</span></span><br></pre></td></tr></table></figure>
<p>##重构</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CONSONANTS = [<span class="string">'th'</span>, <span class="string">'qu'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>,</span><br><span class="line"><span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>];</span><br><span class="line"><span class="keyword">const</span> VOWELS = [<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>];</span><br><span class="line"><span class="keyword">const</span> ENDING = <span class="string">'ay'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isValid = word =&gt; startsWithVowel(word) || startsWithConsonant(word);</span><br><span class="line"><span class="keyword">let</span> startsWithVowel = word =&gt; !!~VOWELS.indexOf(word[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">let</span> startsWithConsonant = word =&gt; !!~CONSONANTS.indexOf(word[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">let</span> getConsonants = word =&gt; CONSONANTS.reduce((memo, char) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (word.startsWith(char)) &#123;</span><br><span class="line">    memo += char;</span><br><span class="line">    word = word.substr(char.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">englishToPigLatin</span>(<span class="params">english=''</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (isValid(english)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (startsWithVowel(english)) &#123;</span><br><span class="line">        english += ENDING;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> letters = getConsonants(english);</span><br><span class="line">        english = <span class="string">`<span class="subst">$&#123;english.substr(letters.length)&#125;</span><span class="subst">$&#123;letters&#125;</span><span class="subst">$&#123;ENDING&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> english;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>重构后统计</strong></p>
<ul>
<li>max-statements（最多声明）: 16 → 6</li>
<li>max-depth（最大嵌套）: 5 → 2</li>
<li>complexity（复杂度）: 7 → 3</li>
<li>max-len（最多行数）: 65 → 73</li>
<li>max-params（最多参数）: 1 → 2</li>
<li>max-nested-callbacks（最多嵌套回调）: 0 → 1</li>
</ul>
<p>##资源</p>
<p>jshint - <a href="jshint - http://jshint.com/">http://jshint.com/</a><br>eslint - <a href="http://eslint.org/" target="_blank" rel="external">http://eslint.org/</a><br>jscomplexity - <a href="http://jscomplexity.org/" target="_blank" rel="external">http://jscomplexity.org/</a><br>escomplex - <a href="https://github.com/philbooth/escomplex" target="_blank" rel="external">https://github.com/philbooth/escomplex</a><br>jasmine - <a href="http://jasmine.github.io/" target="_blank" rel="external">http://jasmine.github.io/</a> </p>
<p>#复制粘贴代码的味道</p>
<p>已有功能…</p>
<p><img src="/image/js-smell/copy-paste-code-box-crop.png"></p>
<p>已有代码，BOX.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... more code ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.Box'</span>);</span><br><span class="line"></span><br><span class="line">[].forEach.call(boxes, <span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">  element.innerText = <span class="string">"Box: "</span> + index;</span><br><span class="line">  element.style.backgroundColor =</span><br><span class="line">    <span class="string">'#'</span> + (<span class="built_in">Math</span>.random() * <span class="number">0xFFFFFF</span> &lt;&lt; <span class="number">0</span>).toString(<span class="number">16</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... more code ...</span></span><br></pre></td></tr></table></figure>
<p>那么，现在想要这个功能</p>
<p><img src="/image/js-smell/copy-paste-code-circle-crop.png"></p>
<p>于是，Duang!  CIRCLE.JS 就出现了…</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... more code ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> circles = <span class="built_in">document</span>.querySelectorAll(<span class="string">".Circle"</span>);</span><br><span class="line"></span><br><span class="line">[].forEach.call(circles, <span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">  element.innerText = <span class="string">"Circle: "</span> + index;</span><br><span class="line">  element.style.color =</span><br><span class="line">    <span class="string">'#'</span> + (<span class="built_in">Math</span>.random() * <span class="number">0xFFFFFF</span> &lt;&lt; <span class="number">0</span>).toString(<span class="number">16</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... more code ...</span></span><br></pre></td></tr></table></figure>
<p>为毛是这个味？因为我们复制粘贴了！</p>
<p>##工具</p>
<p><a href="https://github.com/danielstjules/jsinspect" target="_blank" rel="external">JSINSPECT</a></p>
<p>检查复制粘贴和结构相似的代码</p>
<p>一行命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsinspect</span><br></pre></td></tr></table></figure>
<p><img src="/image/js-smell/jsinspect.png"></p>
<p><a href="https://github.com/kucherenko/jscpd" target="_blank" rel="external">JSCPD</a></p>
<p>程序源码的复制/粘贴检查器</p>
<p>(JavaScript, TypeScript, C#, Ruby, CSS, SCSS, HTML, 等等都适用…)</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jscpd -f <span class="keyword">*</span><span class="keyword">*</span>/<span class="keyword">*</span>.js -l 1 -t 30 --languages javascript</span><br></pre></td></tr></table></figure>
<p><img src="/image/js-smell/jscpd.png"></p>
<p>##怎么能不被发现？重构</p>
<p>把随机颜色部分丢出去…</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomColor = () =&gt; <span class="string">`#<span class="subst">$&#123;(Math.random() * 0xFFFFFF &lt;&lt; 0).toString(16)&#125;</span>;</span><br><span class="line"></span><br><span class="line">let boxes = document.querySelectorAll(".Box");</span><br><span class="line">[].forEach.call(boxes, (element, index) =&gt; &#123;</span><br><span class="line">  element.innerText = "Box: " + index;</span><br><span class="line">  element.style.backgroundColor = randomColor();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let circles = document.querySelectorAll(".Circle");</span><br><span class="line">[].forEach.call(circles, (element, index) =&gt; &#123;</span><br><span class="line">  element.innerText = "Circle: " + index;</span><br><span class="line">  element.style.color = randomColor();</span><br><span class="line">&#125;);</span></span><br></pre></td></tr></table></figure>
<p>再重构</p>
<p>再把怪异的 [].forEach.call 部分丢出去…</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomColor = () =&gt; <span class="string">`#<span class="subst">$&#123;(Math.random() * 0xFFFFFF &lt;&lt; 0).toString(16)&#125;</span>;</span><br><span class="line"></span><br><span class="line">let $$ = selector =&gt; [].slice.call(document.querySelectorAll(selector || '*'));</span><br><span class="line"></span><br><span class="line">$$('.Box').forEach((element, index) =&gt; &#123;</span><br><span class="line">  element.innerText = "Box: " + index;</span><br><span class="line">  element.style.backgroundColor = randomColor();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$$(".Circle").forEach((element, index) =&gt; &#123;</span><br><span class="line">  element.innerText = "Circle: " + index;</span><br><span class="line">  element.style.color = randomColor();</span><br><span class="line">&#125;);</span></span><br></pre></td></tr></table></figure>
<p>再再重构</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomColor = () =&gt; <span class="string">`#<span class="subst">$&#123;(Math.random() * 0xFFFFFF &lt;&lt; 0).toString(16)&#125;</span>;</span><br><span class="line"></span><br><span class="line">let $$ = selector =&gt; [].slice.call(document.querySelectorAll(selector || '*'));</span><br><span class="line"></span><br><span class="line">let updateElement = (selector, textPrefix, styleProperty) =&gt; &#123;</span><br><span class="line">  $$(selector).forEach((element, index) =&gt; &#123;</span><br><span class="line">    element.innerText = textPrefix + ': ' + index;</span><br><span class="line">    element.style[styleProperty] = randomColor();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateElement('.Box', 'Box', 'backgroundColor');</span><br><span class="line"></span><br><span class="line">updateElement('.Circle', 'Circle', 'color');</span></span><br></pre></td></tr></table></figure>
<p>##资源</p>
<ul>
<li><a href="https://github.com/danielstjules" target="_blank" rel="external">jsinspect</a>  </li>
<li><a href="https://github.com/kucherenko/jscpd" target="_blank" rel="external">jscpd</a>  </li>
<li><a href="http://codepen.io/elijahmanor/pen/myQebo" target="_blank" rel="external">CodePen</a> </li>
</ul>
<p>#switch 味道</p>
<p>##难闻的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Triangle'</span>:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Square'</span>:</span><br><span class="line">      area = <span class="built_in">Math</span>.pow(options.width, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Rectangle'</span>:</span><br><span class="line">      area = options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid shape: '</span> + shape);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(<span class="string">'Triangle'</span>,  &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Square'</span>,    &#123; width: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Rectangle'</span>, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Bogus'</span>);</span><br></pre></td></tr></table></figure>
<p>##为毛是这个味？违背“<a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design" target="_blank" rel="external">开放/封闭原则</a>” </p>
<p>增加个新形状</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Triangle'</span>:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Square'</span>:</span><br><span class="line">      area = <span class="built_in">Math</span>.pow(options.width, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Rectangle'</span>:</span><br><span class="line">      area = options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Circle'</span>:</span><br><span class="line">      area = <span class="built_in">Math</span>.PI * <span class="built_in">Math</span>.pow(options.radius, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid shape: '</span> + shape);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加点设计模式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">shapes</span>) </span>&#123; <span class="comment">// triangle.js</span></span><br><span class="line">  <span class="keyword">var</span> Triangle = shapes.Triangle = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.width = options.width;</span><br><span class="line">    <span class="keyword">this</span>.height = options.height;</span><br><span class="line">  &#125;;</span><br><span class="line">  Triangle.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span> * <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;(<span class="built_in">window</span>.shapes = <span class="built_in">window</span>.shapes || &#123;&#125;));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Shape = <span class="built_in">window</span>.shapes[shape], area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Shape &amp;&amp; <span class="keyword">typeof</span> Shape === <span class="string">'function'</span>) &#123;</span><br><span class="line">    area = <span class="keyword">new</span> Shape(options).getArea();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid shape: '</span> + shape);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(<span class="string">'Triangle'</span>,  &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Square'</span>,    &#123; width: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Rectangle'</span>, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br><span class="line">getArea(<span class="string">'Bogus'</span>);</span><br></pre></td></tr></table></figure>
<p>再增加新形状时</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">shapes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Circle = shapes.Circle = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = options.radius;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Circle.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="built_in">Math</span>.pow(<span class="keyword">this</span>.radius, <span class="number">2</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Circle.prototype.getCircumference = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;(<span class="built_in">window</span>.shapes = <span class="built_in">window</span>.shapes || &#123;&#125;));</span><br></pre></td></tr></table></figure>
<p>##还有其它的味道吗？神奇的字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Triangle'</span>:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">/* ... more code ... */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(<span class="string">'Triangle'</span>, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>神奇的字符串重构为对象类型</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="string">'Triangle'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> shapeType.triangle:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(shapeType.triangle, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>神奇字符重构为 CONST &amp; SYMBOLS</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="keyword">new</span> <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> shapeType.triangle:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(shapeType.triangle, &#123; width: <span class="number">100</span>, height: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>##工具！？！</p>
<p>木有 :(</p>
<p><a href="http://bit.ly/eslint-plugin-smells" target="_blank" rel="external">ESLINT-PLUGIN-SMELLS</a><br>用于 JavaScript Smells（味道） 的 ESLint 规则</p>
<p>规则</p>
<ul>
<li>no-switch - 不允许使用  switch  声明</li>
<li>no-complex-switch-case -  不允许使用复杂的  switch  声明</li>
</ul>
<p>##资源</p>
<ul>
<li><a href="http://codepen.io/elijahmanor/pen/OPazmm" target="_blank" rel="external">CodePen</a>  </li>
<li><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="external">Addy Osmani’s JavaScript Design Patterns eBook</a>  </li>
<li><a href="http://eslint.org/" target="_blank" rel="external">ESLint</a>  </li>
<li><a href="https://github.com/elijahmanor/eslint-plugin-smells" target="_blank" rel="external">eslint-plugin-smells</a>  </li>
<li><a href="http://www.2ality.com/2015/02/es6-scoping.html" target="_blank" rel="external">ES6 Scoping</a>  </li>
<li><a href="http://www.2ality.com/2014/12/es6-symbols.html" target="_blank" rel="external">ES6 Symbols</a>  </li>
<li><a href="http://babeljs.io/docs/learn-es6" target="_blank" rel="external">Learn ES6</a></li>
</ul>
<p>#this 深渊的味道</p>
<p>##难闻的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth = [&#123; clean: <span class="literal">false</span> &#125;, &#123; clean: <span class="literal">false</span> &#125;, &#123; clean: <span class="literal">false</span> &#125;];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">tooth</span>) </span>&#123;</span><br><span class="line">    that.clean(tooth);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.clean = <span class="function"><span class="keyword">function</span>(<span class="params">tooth</span>) </span>&#123;</span><br><span class="line">  tooth.clean = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.brush();</span><br><span class="line"><span class="built_in">console</span>.log(person.teeth);</span><br></pre></td></tr></table></figure>
<p>##为什么是这个味？that 还是 self 还是 selfie</p>
<p>替换方案<br>1) bind</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">tooth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clean(tooth);</span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>替换方案<br>2) forEach 的第二个参数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">tooth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clean(tooth);</span><br><span class="line">  &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>替换方案<br>3) ECMAScript 2015 (ES6)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(tooth =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.clean(tooth);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>4a) 函数式编程</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="keyword">this</span>.clean);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>4b) 函数式编程</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.brush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.teeth.forEach(<span class="keyword">this</span>.clean.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'brushed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>##工具</p>
<p>ESLint</p>
<ul>
<li><a href="https://github.com/elijahmanor/eslint-plugin-smells" target="_blank" rel="external">no-this-assign</a> (eslint-plugin-smells) </li>
<li><a href="http://eslint.org/docs/rules/consistent-this" target="_blank" rel="external">consistent-this</a> </li>
<li><a href="http://eslint.org/docs/rules/no-extra-bind" target="_blank" rel="external">no-extra-bind</a></li>
</ul>
<p>#字符串连接的味道</p>
<p>##难闻的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> build = <span class="function"><span class="keyword">function</span>(<span class="params">id, href</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $( <span class="string">"&lt;div id='tab'&gt;&lt;a href='"</span> + href + <span class="string">"' id='"</span>+ id + <span class="string">"'&gt;&lt;/div&gt;"</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##为毛是这个味？因为字符串连接</p>
<p>替换方案<br>@thomasfuchs <a href="http://mir.aculo.us/2011/03/09/little-helpers-a-tweet-sized-javascript-templating-engine/" target="_blank" rel="external">推文上的 JavaScript 模板引擎</a> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">s, d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> d)</span><br><span class="line">    s = s.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'&#123;'</span> + p + <span class="string">'&#125;'</span>, <span class="string">'g'</span>), d[p]);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> build = <span class="function"><span class="keyword">function</span>(<span class="params">id, href</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    id: id</span><br><span class="line">    href: href</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> t(<span class="string">'&lt;div id="tab"&gt;&lt;a href="&#123;href&#125;" id="&#123;id&#125;"&gt;&lt;/div&gt;'</span>, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>替换方案<br>2) ECMAScript 2015 (ES6) 模板字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> build = (id, href) =&gt;</span><br><span class="line">  <span class="string">`&lt;div id="tab"&gt;&lt;a href="<span class="subst">$&#123;href&#125;</span>" id="<span class="subst">$&#123;id&#125;</span>"&gt;&lt;/div&gt;`</span>;</span><br></pre></td></tr></table></figure>
<p>替换方案<br>3) ECMAScript 2015 (ES6)  模板字符串  (多行)</p>
<p>替换方案<br>4) 其它小型库或大型库/框架</p>
<ul>
<li>Lowdash 或 Underscore</li>
<li>Angular</li>
<li>React</li>
<li>Ember</li>
<li>等等…</li>
</ul>
<p>##工具</p>
<p>ESLINT-PLUGIN-SMELLS<br><a href="http://bit.ly/eslint-plugin-smells" target="_blank" rel="external">no-complex-string-concat</a> </p>
<p>##资源</p>
<p><a href="http://mir.aculo.us/2011/03/09/little-helpers-a-tweet-sized-javascript-templating-engine/" target="_blank" rel="external">Tweet Sized JavaScript Templating Engine</a> by @thomasfuchs<br>Learn ECMAScript 2015 (ES6) - <a href="http://babeljs.io/docs/learn-es6/" target="_blank" rel="external">http://babeljs.io/docs/learn-es6/</a></p>
<p>#jQuery 调查</p>
<p>##难闻的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.Component'</span>)</span><br><span class="line">    .find(<span class="string">'button'</span>)</span><br><span class="line">      .addClass(<span class="string">'Component-button--action'</span>)</span><br><span class="line">      .click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">'HEY!'</span>); &#125;)</span><br><span class="line">    .end()</span><br><span class="line">    .mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; $(<span class="keyword">this</span>).addClass(<span class="string">'Component--over'</span>); &#125;)</span><br><span class="line">    .mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; $(<span class="keyword">this</span>).removeClass(<span class="string">'Component--over'</span>); &#125;)</span><br><span class="line">    .addClass(<span class="string">'initialized'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>##为毛是这个味？丧心病狂的链式调用</p>
<p>愉快地重构吧</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Event Delegation before DOM Ready</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'mouseenter mouseleave'</span>, <span class="string">'.Component'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).toggleClass(<span class="string">'Component--over'</span>, e.type === <span class="string">'mouseenter'</span>);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'.Component'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'HEY!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.Component button'</span>).addClass(<span class="string">'Component-button--action'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>最终 Demo</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="pvQQZw" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/pvQQZw/" target="_blank" rel="external">pvQQZw</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>##工具</p>
<p>ESLINT-PLUGIN-SMELLS</p>
<ul>
<li><a href="http://bit.ly/eslint-plugin-smells" target="_blank" rel="external">no-complex-chaining</a> </li>
</ul>
<p>#难以琢磨的计时器</p>
<p>##难闻的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start setInterval'</span>);</span><br><span class="line">  someLongProcess(getRandomInt(<span class="number">2000</span>, <span class="number">4000</span>));</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someLongProcess</span>(<span class="params">duration</span>) </span>&#123;</span><br><span class="line">  setTimeout(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'long process: '</span> + duration); &#125;,</span><br><span class="line">    duration</span><br><span class="line">  );  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##为毛这个味？无法同步的计时器</p>
<p>Demo: setInterval</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="bNQmzP" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/bNQmzP/" target="_blank" rel="external">bNQmzP</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>用 setTimeout 保证顺序</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start setTimeout'</span>)</span><br><span class="line">  someLongProcess(getRandomInt(<span class="number">2000</span>, <span class="number">4000</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(timer, <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someLongProcess</span>(<span class="params">duration, callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'long process: '</span> + duration);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;, duration);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* getRandomInt(min, max) &#123;&#125; */</span></span><br></pre></td></tr></table></figure>
<p>Demo: setTimeout </p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="raQQay" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/raQQay/" target="_blank" rel="external">raQQay</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>#重复定义</p>
<p>##难闻的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="keyword">this</span>.appendAnalyticsData(data);</span><br><span class="line">data = <span class="keyword">this</span>.appendSubmissionData(data);</span><br><span class="line">data = <span class="keyword">this</span>.appendAdditionalInputs(data);</span><br><span class="line">data = <span class="keyword">this</span>.pruneObject(data);</span><br></pre></td></tr></table></figure>
<p>替换方案<br>1) 嵌套调用函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="keyword">this</span>.pruneObject(</span><br><span class="line">  <span class="keyword">this</span>.appendAdditionalInputs(</span><br><span class="line">    <span class="keyword">this</span>.appendSubmissionData(</span><br><span class="line">      <span class="keyword">this</span>.appendAnalyticsData(data)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>2) forEach<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [</span><br><span class="line">  <span class="keyword">this</span>.appendAnalyticsData,</span><br><span class="line">  <span class="keyword">this</span>.appendSubmissionData,</span><br><span class="line">  <span class="keyword">this</span>.appendAdditionalInputs,</span><br><span class="line">  <span class="keyword">this</span>.pruneObject</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  data = func(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>3) reduce<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [</span><br><span class="line">  <span class="keyword">this</span>.appendAnalyticsData,</span><br><span class="line">  <span class="keyword">this</span>.appendSubmissionData,</span><br><span class="line">  <span class="keyword">this</span>.appendAdditionalInputs,</span><br><span class="line">  <span class="keyword">this</span>.pruneObject</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">data = funcs.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">memo, func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> func(memo);</span><br><span class="line">&#125;, data);</span><br></pre></td></tr></table></figure></p>
<p>4) <a href="https://lodash.com/docs#flow" target="_blank" rel="external">flow</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = _.flow(</span><br><span class="line">  <span class="keyword">this</span>.appendAnalyticsData,</span><br><span class="line">  <span class="keyword">this</span>.appendSubmissionData,</span><br><span class="line">  <span class="keyword">this</span>.appendAdditionalInputs,</span><br><span class="line">  <span class="keyword">this</span>.pruneObject</span><br><span class="line">)(data);</span><br></pre></td></tr></table></figure></p>
<p>##工具</p>
<p>ESLINT-PLUGIN-SMELLS</p>
<ul>
<li><a href="http://bit.ly/eslint-plugin-smells" target="_blank" rel="external">no-reassign</a> </li>
</ul>
<p>##资源</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="external">forEach</a>  </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">reduce</a>  </li>
<li><a href="https://lodash.com/docs#flow" target="_blank" rel="external">_.flow</a> </li>
</ul>
<p>#过度耦合</p>
<p>##难闻的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShoppingCart</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.items = []; &#125;</span><br><span class="line">ShoppingCart.prototype.addItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items.push(item);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">Product.prototype.addToCart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  shoppingCart.addItem(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shoppingCart = <span class="keyword">new</span> ShoppingCart();</span><br><span class="line"><span class="keyword">var</span> product = <span class="keyword">new</span> Product(<span class="string">'Socks'</span>);</span><br><span class="line">product.addToCart();</span><br><span class="line"><span class="built_in">console</span>.log(shoppingCart.items);</span><br></pre></td></tr></table></figure>
<p>##为毛是这个味？紧密耦合的依赖关系</p>
<p>如何改善！？！</p>
<ol>
<li>依赖注入</li>
<li><p>消息订阅</p>
</li>
<li><p>依赖注入 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShoppingCart</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.items = []; &#125;</span><br><span class="line">ShoppingCart.prototype.addItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items.push(item);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, shoppingCart</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.shoppingCart = shoppingCart;</span><br><span class="line">&#125;</span><br><span class="line">Product.prototype.addToCart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.shoppingCart.addItem(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shoppingCart = <span class="keyword">new</span> ShoppingCart();</span><br><span class="line"><span class="keyword">var</span> product = <span class="keyword">new</span> Product(<span class="string">'Socks'</span>, shoppingCart);</span><br><span class="line">product.addToCart();</span><br><span class="line"><span class="built_in">console</span>.log(shoppingCart.items);</span><br></pre></td></tr></table></figure>
</li>
<li><p>消息订阅 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> channel = postal.channel();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShoppingCart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items = [];</span><br><span class="line">  channel.subscribe(<span class="string">'shoppingcart.add'</span>, <span class="keyword">this</span>.addItem);</span><br><span class="line">&#125;</span><br><span class="line">ShoppingCart.prototype.addItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items.push(item);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">Product.prototype.addToCart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  channel.publish(<span class="string">'shoppingcart.add'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shoppingCart = <span class="keyword">new</span> ShoppingCart();</span><br><span class="line"><span class="keyword">var</span> product = <span class="keyword">new</span> Product(<span class="string">'Socks'</span>);</span><br><span class="line">product.addToCart();</span><br><span class="line"><span class="built_in">console</span>.log(shoppingCart.items);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>资源</p>
<ul>
<li><a href="https://github.com/postaljs/postal.js" target="_blank" rel="external">postal</a> by @ifandelse</li>
</ul>
<p>#连续不断的交互</p>
<p>##难闻的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Make Ajax call for autocomplete</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Demo: 根本停不下来</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="LEXBdX" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/LEXBdX/" target="_blank" rel="external">LEXBdX</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>解决方案：节流阀<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, _.throttle(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Make Ajax call for autocomplete</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;, <span class="number">500</span>));</span><br></pre></td></tr></table></figure></p>
<p>Demo: </p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="azQjGj" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/azQjGj/" target="_blank" rel="external">azQjGj</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>解决方案：DEBOUNCE<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, _.debounce(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Make Ajax call for autocomplete</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;, <span class="number">500</span>));</span><br></pre></td></tr></table></figure></p>
<p>Demo</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="bNQjje" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/bNQjje/" target="_blank" rel="external">bNQjje</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>资源</p>
<ul>
<li><a href="https://lodash.com/" target="_blank" rel="external">lodash</a>  </li>
<li><a href="https://lodash.com/docs#throttle" target="_blank" rel="external">throttle</a> </li>
<li><a href="https://lodash.com/docs#debounce" target="_blank" rel="external">debounce</a></li>
</ul>
<p>#匿名函数</p>
<p>##难闻的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>给函数命名的原因：</p>
<ol>
<li>堆栈追踪</li>
<li>去关联</li>
<li><p>代码复用</p>
</li>
<li><p>堆栈追踪</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/image/js-smell/06-1-a.png"></p>
<p>修改后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'.Autocomplete'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> <span class="title">matches</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><img src="/image/js-smell/06-1-b.png"></p>
<ol>
<li>去关联</li>
</ol>
<p>单次事件绑定<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'button'</span>)</span><br><span class="line">  .addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">'Ka-boom!'</span>);</span><br><span class="line">    <span class="keyword">this</span>.removeEventListener(<span class="string">'click'</span>, handler);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p>
<p>Demo</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="PwxBxP" data-default-tab="result" data-user="elijahmanor" class="codepen">See the Pen <a href="http://codepen.io/elijahmanor/pen/PwxBxP/" target="_blank" rel="external">PwxBxP</a> by Elijah Manor (<a href="http://codepen.io/elijahmanor" target="_blank" rel="external">@elijahmanor</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<ol>
<li>代码复用</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kaboom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">'Ka-boom'</span>); &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'button'</span>).addEventListener(<span class="string">'click'</span>, kaboom);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#egg'</span>).addEventListener(<span class="string">'mouseenter'</span>, kaboom);</span><br></pre></td></tr></table></figure>
<p>##资源</p>
<ul>
<li><a href="https://developer.chrome.com/devtools" target="_blank" rel="external">Chrome DevTools</a> </li>
</ul>
<p>#结尾</p>
<p>更多的 ESLint 规则</p>
<ul>
<li><a href="https://www.npmjs.com/package/eslint-plugin-react" target="_blank" rel="external">eslint-plugin-react</a>  </li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-angular" target="_blank" rel="external">eslint-plugin-angular</a> </li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-ember" target="_blank" rel="external">eslint-plugin-ember</a>  </li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-backbone" target="_blank" rel="external">eslint-plugin-backbone</a> </li>
</ul>
<p>##资源</p>
<p>NPM 搜索  <a href="https://www.npmjs.com/search?q=eslint-plugin" target="_blank" rel="external">eslint-plugin</a>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：《<a href="http://elijahmanor.github.io/talks/js-smells/#/">ELIMINATE JAVASCRIPT CODE SMELLS</a>》<br>作者：<a href="http://elijahmanor.com">@elijahmanor</a><br>笔记：<a href="http://weibo.com/newwave">涂鸦码农</a></p>
</blockquote>
<p>#难闻的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* const */</span> <span class="keyword">var</span> CONSONANTS = <span class="string">'bcdfghjklmnpqrstvwxyz'</span>;</span><br><span class="line"><span class="comment">/* const */</span> <span class="keyword">var</span> VOWELS = <span class="string">'aeiou'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">englishToPigLatin</span>(<span class="params">english</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* const */</span> <span class="keyword">var</span> SYLLABLE = <span class="string">'ay'</span>;</span><br><span class="line">  <span class="keyword">var</span> pigLatin = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (english !== <span class="literal">null</span> &amp;&amp; english.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    (VOWELS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span> ||</span><br><span class="line">    CONSONANTS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span> )) &#123;</span><br><span class="line">    <span class="keyword">if</span> (VOWELS.indexOf(english[<span class="number">0</span>]) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      pigLatin = english + SYLLABLE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> preConsonants = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; english.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CONSONANTS.indexOf(english[i]) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">          preConsonants += english[i];</span><br><span class="line">          <span class="keyword">if</span> (preConsonants == <span class="string">'q'</span> &amp;&amp;</span><br><span class="line">            i+<span class="number">1</span> &lt; english.length &amp;&amp; english[i+<span class="number">1</span>] == <span class="string">'u'</span>) &#123;</span><br><span class="line">            preConsonants += <span class="string">'u'</span>;</span><br><span class="line">            i += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      pigLatin = english.substring(i) + preConsonants + SYLLABLE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pigLatin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##为毛是这个味？<br>]]>
    
    </summary>
    
      <category term="ES6" scheme="http://jinlong.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 错误以及如何修复]]></title>
    <link href="http://jinlong.github.io/2015/02/01/javascript-errors-and-how-to-fix-them/"/>
    <id>http://jinlong.github.io/2015/02/01/javascript-errors-and-how-to-fix-them/</id>
    <published>2015-02-01T14:09:27.000Z</published>
    <updated>2015-10-28T14:34:00.552Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文《<a href="http://davidwalsh.name/fix-javascript-errors" target="_blank" rel="external">JavaScript Errors and How to Fix Them</a>》<br>作者：Jani Hartikainen<br>翻译：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码农</a></p>
</blockquote>
<p>JavaScript 调试是一场噩梦：首先给出的错误非常难以理解，其次给出的行号不总有帮助。有个查找错误含义，及修复措施的列表，是不是很有用？</p>
<p>以下是奇怪的 JavaScript 错误列表。同样的错误，不同的浏览器会给出不同的消息，因此有一些不同的例子。</p>
<p>###如何读懂错误？</p>
<p>首先，让我们快速看下错误信息的结构。理解结构有助于理解错误，如果遇到列表之外的错误会减少麻烦。</p>
<p>Chrome 中典型的错误像这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">TypeError</span>: <span class="literal">undefined</span> is not a <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure>
<p>错误的结构如下：</p>
<ol>
<li><p><strong>Uncaught TypeError：</strong>这部分信息通常不是很有用。<code>Uncaught</code> 表示错误没有被 <code>catch</code> 语句捕获，<code>TypeError</code> 是错误的名字。</p>
</li>
<li><p><strong>undefined is not a function:</strong> 这部分信息，你必须逐字阅读。比如这里表示代码尝试使用 <code>undefined</code> ，把它当做一个函数。</p>
</li>
</ol>
<p>其它基于 webkit 的浏览器，比如 Safari ，给出的错误格式跟 Chrome 很类似。Firefox 也类似，但是不总包含第一部分，最新版本的 IE 也给出比 Chrome 简单的错误 - 但是在这里，简单并不总代表好。</p>
<p>以下是真正的错误。</p>
<p>###Uncaught TypeError: undefined is not a function</p>
<p><strong>相关错误：</strong>number is not a function, object is not a function, string is not a function, Unhandled Error: ‘foo’ is not a function, Function Expected</p>
<p>当尝试调用一个像方法的值时，这个值并不是一个方法。比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">undefined</span>;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果你尝试调用一个对象的方法时，你输错了名字，这个典型的错误很容易发生。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementByID(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure>
<p>由于对象的属性不存在，默认是 <code>undefined</code> ，以上代码将导致这个错误。</p>
<p>尝试调用一个像方法的数字，“number is not a function” 错误出现。</p>
<p><strong>如何修复错误：</strong>确保方法名正确。这个错误的行号将指出正确的位置。</p>
<p>###Uncaught ReferenceError: Invalid left-hand side in assignment</p>
<p><strong>相关错误：</strong>Uncaught exception: ReferenceError: Cannot assign to ‘functionCall()’, Uncaught exception: ReferenceError: Cannot assign to ‘this’</p>
<p>尝试给不能赋值的东西赋值，引起这个错误。</p>
<p>这个错误最常见的例子出现在 if 语句使用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(doSomething() = <span class="string">'somevalue'</span>)</span><br></pre></td></tr></table></figure>
<p>此例中，程序员意外地使用了单个等号，而不是双等号。“left-hand side in assignment” 提及了等号左手边的部分，因此你可以看到以上例子，左手边包含不能赋值的东西，导致这个错误。</p>
<p><strong>如何修复错误：</strong>确保没有给函数结果赋值，或者给 <code>this</code> 关键字赋值。</p>
<p>###Uncaught TypeError: Converting circular structure to JSON</p>
<p><strong>相关错误：</strong>Uncaught exception: TypeError: JSON.stringify: Not an acyclic Object, TypeError: cyclic object value, Circular reference in value argument not supported</p>
<p>把循环引用的对象，传给 <code>JSON.stringify</code> 总会引起错误。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; &#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; a: a &#125;;</span><br><span class="line">a.b = b;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(a);</span><br></pre></td></tr></table></figure>
<p>由于以上的 <code>a</code> 和 <code>b</code> 循环引用彼此，结果对象无法转换成 JSON。</p>
<p><strong>如何修复错误：</strong>移除任何想转换成 JSON 的对象中的循环引用。</p>
<p>###Unexpected token ;</p>
<p><strong>相关错误：</strong>Expected ), missing ) after argument list</p>
<p>JavaScript 解释器预期的东西没有被包含。不匹配的圆括号或方括号通常引起这个错误。</p>
<p>错误信息可能有所不同 - “Unexpected token ]” 或者 “Expected {” 等。</p>
<p><strong>如何修复错误：</strong>有时错误出现的行号并不准确，因此很难修复。</p>
<ul>
<li>[ ] { } ( ) 这几个符号不配对常常导致出错。检查所有的圆括号和方括号是否配对。行号指出的不仅是问题字符。</li>
<li>Unexpected / 跟正则表达式有关。此时行号通常是正确的。</li>
<li>Unexpected ;  对象或者数组字面量里面有个 ; 通常引起这个错误，或者函数调用的参数列表里有个分号。此时的行号通常也是正确的。</li>
</ul>
<p>###Uncaught SyntaxError: Unexpected token ILLEGAL</p>
<p><strong>相关错误：</strong>Unterminated String Literal, Invalid Line Terminator</p>
<p>一个字符串字面量少了结尾的引号。</p>
<p><strong>如何修复错误：</strong>确保所有的字符串都有结束的引号。</p>
<p>###Uncaught TypeError: Cannot read property ‘foo’ of null, Uncaught TypeError: Cannot read property ‘foo’ of undefined</p>
<p><strong>相关错误：</strong>TypeError: someVal is null, Unable to get property ‘foo’ of undefined or null reference</p>
<p>尝试读取 <code>null</code> 或者 <code>undefined</code> ，把它当成了对象。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someVal = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(someVal.foo);</span><br></pre></td></tr></table></figure>
<p><strong>如何修复错误：</strong>通常由于拼写错误导致。检查错误指出的行号附近使用的变量名是否正确。</p>
<p>###Uncaught TypeError: Cannot set property ‘foo’ of null, Uncaught TypeError: Cannot set property ‘foo’ of undefined</p>
<p><strong>相关错误：</strong>TypeError: someVal is undefined, Unable to set property ‘foo’ of undefined or null reference</p>
<p>尝试写入 <strong>null</strong> 或者 <strong>undefined</strong> ，把它当成了一个对象。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someVal = <span class="literal">null</span>;</span><br><span class="line">someVal.foo = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><strong>如何修复错误：</strong>也是由于拼写错误所致。检查错误指出的行号附近的变量名。</p>
<p>###Uncaught RangeError: Maximum call stack size exceeded</p>
<p><strong>相关错误：</strong>Related errors: Uncaught exception: RangeError: Maximum recursion depth exceeded, too much recursion, Stack overflow</p>
<p>通常由程序逻辑 bug 引起，导致函数的无限递归调用。</p>
<p><strong>如何修复错误：</strong>检查递归函数中可能导致无限循环 的 bug 。</p>
<p>###Uncaught URIError: URI malformed</p>
<p><strong>相关错误：</strong>URIError: malformed URI sequence</p>
<p>无效的 decodeURIComponent 调用所致。</p>
<p><strong>如何修复错误：</strong>按照错误指出的行号，检查 <code>decodeURIComponent</code> 调用，它是正确的。</p>
<p>###XMLHttpRequest cannot load <a href="http://some/url/" target="_blank" rel="external">http://some/url/</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource</p>
<p><strong>相关错误：</strong>Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at<br><a href="http://some/url/" target="_blank" rel="external">http://some/url/</a></p>
<p>错误肯定是使用 XMLHttpRequest 引起的。</p>
<p><strong>如何修复：</strong>确保请求的 URL 是正确的，它遵循<a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">同源策略</a> 。最好的方法是从代码中找到错误信息指出的 URL 。</p>
<p>###InvalidStateError: An attempt was made to use an object that is not, or is no longer, usable</p>
<p><strong>相关错误：</strong>InvalidStateError, DOMException code 11</p>
<p>代码调用的方法在当前状态无法调用。通常由 <code>XMLHttpRequest</code> 引起，在方法准备完毕之前调用它会引起错误。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Some-Header'</span>, <span class="string">'val'</span>);</span><br></pre></td></tr></table></figure>
<p>这时就会出错，因为 <code>setRequestHeader</code> 方法只能在 <code>xhr.open</code> 方法之后调用。</p>
<p><strong>如何修复：</strong>查看错误指出的行号，确保代码运行的时机正确，或者在它（例如 <strong>xhr.open</strong><br>）之前添加了不必要的调用</p>
<p>###结论</p>
<p>我看过不少无用的 JavaScript 错误，比如 PHP 中声名狼藉的异常 <code>Expected T_PAAMAYIM_NEKUDOTAYIM</code> 。抛出更熟悉的错误才更有意义。现代浏览器不再抛出完全无用的错误，才会更有帮助。</p>
<p>你看到的最令人困惑的错误是什么？在评论中分享一下呗。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文《<a href="http://davidwalsh.name/fix-javascript-errors">JavaScript Errors and How to Fix Them</a>》<br>作者：Jani Hartikainen<br>翻译：<a href="http://weibo.com/newwave">涂鸦码农</a></p>
</blockquote>
<p>JavaScript 调试是一场噩梦：首先给出的错误非常难以理解，其次给出的行号不总有帮助。有个查找错误含义，及修复措施的列表，是不是很有用？</p>
<p>以下是奇怪的 JavaScript 错误列表。同样的错误，不同的浏览器会给出不同的消息，因此有一些不同的例子。</p>
<p>###如何读懂错误？</p>
<p>首先，让我们快速看下错误信息的结构。理解结构有助于理解错误，如果遇到列表之外的错误会减少麻烦。</p>
<p>Chrome 中典型的错误像这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">TypeError</span>: <span class="literal">undefined</span> is not a <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure>
<p>错误的结构如下：</p>
<ol>
<li><p><strong>Uncaught TypeError：</strong>这部分信息通常不是很有用。<code>Uncaught</code> 表示错误没有被 <code>catch</code> 语句捕获，<code>TypeError</code> 是错误的名字。</p>
</li>
<li><p><strong>undefined is not a function:</strong> 这部分信息，你必须逐字阅读。比如这里表示代码尝试使用 <code>undefined</code> ，把它当做一个函数。</p>
</li>
</ol>
<p>其它基于 webkit 的浏览器，比如 Safari ，给出的错误格式跟 Chrome 很类似。Firefox 也类似，但是不总包含第一部分，最新版本的 IE 也给出比 Chrome 简单的错误 - 但是在这里，简单并不总代表好。</p>
<p>以下是真正的错误。</p>
<p>###Uncaught TypeError: undefined is not a function</p>
<p><strong>相关错误：</strong>number is not a function, object is not a function, string is not a function, Unhandled Error: ‘foo’ is not a function, Function Expected</p>
<p>当尝试调用一个像方法的值时，这个值并不是一个方法。比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">undefined</span>;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSHint 配置浅析]]></title>
    <link href="http://jinlong.github.io/2014/10/25/jshint-configuration/"/>
    <id>http://jinlong.github.io/2014/10/25/jshint-configuration/</id>
    <published>2014-10-25T03:05:14.000Z</published>
    <updated>2015-10-28T14:35:01.138Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.jshint.com/" target="_blank" rel="external">JSHint</a>，发现错误和潜在问题的社区驱动的工具<br><a href="http://jslinterrors.com/" target="_blank" rel="external">JSLint 错误解析</a></p>
</blockquote>
<p>##单独安装</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> jshint -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jshint myfile<span class="class">.js</span></span><br><span class="line">myfile<span class="class">.js</span>: line <span class="number">10</span>, col <span class="number">39</span>, Octal literals are not allowed <span class="keyword">in</span> strict mode.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> error</span><br></pre></td></tr></table></figure>
<p>##编辑器和IDE插件</p>
<p><a href="https://github.com/victorporof/Sublime-JSHint" target="_blank" rel="external">Sublime-JSHint</a> </p>
<p>###安装</p>
<p><code>Ctrl+Shift+P</code> 或 <code>Cmd+Shift+P</code><br>输入 <code>install</code>，选择 <code>Package Control: Install Package</code><br>输入 <code>js gutter</code>，选择 <code>JSHint Gutter</code></p>
<p>###使用方法：</p>
<p>Tools -&gt; Command Palette (<code>Ctrl+Shift+P</code> 或者 <code>Cmd+Shift+P</code>) 然后输入 <code>jshint</code></p>
<p>– 或者 –</p>
<p><code>Ctrl+Shift+J</code> (或者 Mac 使用 <code>Cmd+Shift+J</code>)</p>
<p>– 或者 –</p>
<p>当前文件右键选择 JSHint -&gt; Lint Code</p>
<p>– 或者 –</p>
<p>打开 JavaScript 文件，菜单 View -&gt; Show Console，然后输入 <code>view.run_command(&quot;jshint&quot;</code>)</p>
<a id="more"></a>
<p>###编辑，加载或保存时自动检查</p>
<p>右键 -&gt; JSHint -&gt; Set Plugin Options</p>
<p>三项设置为 <code>true</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"lint_on_edit"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"lint_on_load"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"lint_on_save"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>##三种配置方式：</p>
<p>通过 <code>--config</code> 标记手动配置</p>
<p>使用 <strong>.jshintrc</strong> 文件</p>
<p>配置放到项目的 <strong>package.json</strong> 文件里面， <strong>jshintConfig</strong> 下面</p>
<p><a href="http://www.jshint.com/docs/options/" target="_blank" rel="external">自定义 <strong>.jshintrc</strong> 配置文件</a></p>
<p>##JSHint 设置</p>
<p>###强制选项</p>
<p>禁用位运算符，位运算符在 JavaScript 中使用较少，经常是把 &amp;&amp; 错输成 &amp;<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">bitwise:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>循环或者条件语句必须使用花括号包围<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">curly:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>强制使用三等号<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">eqeqeq:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>兼容低级浏览器 IE 6/7/8/9<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">es3:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>禁止重写原生对象的原型，比如 <code>Array</code>，<code>Date</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">freeze:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>代码缩进<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">indent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>禁止定义之前使用变量，忽略 <code>function</code> 函数声明<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">latedef:</span> <span class="string">"nofunc"</span></span><br></pre></td></tr></table></figure></p>
<p>构造器函数首字母大写<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">newcap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>禁止使用 <code>arguments.caller</code> 和 <code>arguments.callee</code>，未来会被弃用， ECMAScript 5 禁止使用 <code>arguments.callee</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">noarg:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>为 <code>true</code> 时，禁止单引号和双引号混用<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"quotmark"</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>变量未定义<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"undef"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>变量未使用<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"unused"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>严格模式<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">strict:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>最多参数个数<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">maxparams</span>: <span class="string">4</span></span><br></pre></td></tr></table></figure></p>
<p>最大嵌套深度<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">maxdepth</span>: <span class="string">4</span></span><br></pre></td></tr></table></figure></p>
<p>复杂度检测<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">maxcomplexity:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>最大行数<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">maxlen</span>: <span class="string">600</span></span><br></pre></td></tr></table></figure></p>
<p>###宽松选项</p>
<p>控制“缺少分号”的警告<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"asi"</span>: <span class="literal">true</span></span><br><span class="line"><span class="string">"boss"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>忽略 <code>debugger</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"debug"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>控制 <code>eval</code> 使用警告<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"evil"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查一行代码最后声明后面的分号是否遗漏<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"lastsemic"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查不安全的折行，忽略逗号在最前面的编程风格<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"laxcomma"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查循环内嵌套 <code>function</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"loopfunc"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查多行字符串<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"multistr"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>检查无效的 <code>typeof</code> 操作符值<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"notypeof"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p><code>person[&#39;name&#39;]</code> vs. <code>person.name</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"sub"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p><code>new function () { ... }</code> 和 <code>new Object</code>;<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"supernew"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>在非构造器函数中使用 <code>this</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"validthis"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>###环境</p>
<p>预定义一些全局变量</p>
<p>预定义全局变量 <code>document</code>，<code>navigator</code>，<code>FileReader</code> 等<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"browser"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>定义用于调试的全局变量：<code>console</code>，<code>alert</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devel"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>定义全局变量<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jquery"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"node"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><a href="http://www.jshint.com/">JSHint</a>，发现错误和潜在问题的社区驱动的工具<br><a href="http://jslinterrors.com/">JSLint 错误解析</a></p>
</blockquote>
<p>##单独安装</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> jshint -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jshint myfile<span class="class">.js</span></span><br><span class="line">myfile<span class="class">.js</span>: line <span class="number">10</span>, col <span class="number">39</span>, Octal literals are not allowed <span class="keyword">in</span> strict mode.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> error</span><br></pre></td></tr></table></figure>
<p>##编辑器和IDE插件</p>
<p><a href="https://github.com/victorporof/Sublime-JSHint">Sublime-JSHint</a> </p>
<p>###安装</p>
<p><code>Ctrl+Shift+P</code> 或 <code>Cmd+Shift+P</code><br>输入 <code>install</code>，选择 <code>Package Control: Install Package</code><br>输入 <code>js gutter</code>，选择 <code>JSHint Gutter</code></p>
<p>###使用方法：</p>
<p>Tools -&gt; Command Palette (<code>Ctrl+Shift+P</code> 或者 <code>Cmd+Shift+P</code>) 然后输入 <code>jshint</code></p>
<p>– 或者 –</p>
<p><code>Ctrl+Shift+J</code> (或者 Mac 使用 <code>Cmd+Shift+J</code>)</p>
<p>– 或者 –</p>
<p>当前文件右键选择 JSHint -&gt; Lint Code</p>
<p>– 或者 –</p>
<p>打开 JavaScript 文件，菜单 View -&gt; Show Console，然后输入 <code>view.run_command(&quot;jshint&quot;</code>)</p>]]>
    
    </summary>
    
      <category term="JSHint" scheme="http://jinlong.github.io/tags/JSHint/"/>
    
      <category term="JSHint" scheme="http://jinlong.github.io/categories/JSHint/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Handlebars 文档笔记]]></title>
    <link href="http://jinlong.github.io/2014/10/19/handlebars-docs/"/>
    <id>http://jinlong.github.io/2014/10/19/handlebars-docs/</id>
    <published>2014-10-19T14:30:55.000Z</published>
    <updated>2015-10-28T14:37:08.072Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>官方文档：<a href="http://handlebarsjs.com/" target="_blank" rel="external">http://handlebarsjs.com/</a><br>笔记：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>Handlebars 兼容 <a href="https://github.com/janl/mustache.js" target="_blank" rel="external">Mustache 模板</a>。</p>
<p>对比了几个 Node.js 常用模板，什么 EJS 、Jade 等等，还是感觉 Handlebars 比较顺手，模板只做数据展示，前端逻辑的东西通过 helper 实现，HTML 中没有掺杂太多 JS 的东西，看起来整洁一些。</p>
<p>Express 中引入 Handlebars 模板的话，需要引入<a href="https://github.com/donpark/hbs" target="_blank" rel="external">hbs 模块</a></p>
<hr>
<p><strong>handlebars 表达式</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在上下文中找 title 属性，获取它的值</p>
<p><strong>点分割表达式</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当前上下文找 article 属性，再找它的 title 属性</p>
<p><em>标识符可以是除了以下字符以外的 unicode 字符</em><br>Whitespace ! “ # % &amp; ‘ ( ) * + , . / ; &lt; = &gt; @ [ \ ] ^ ` { | } ~</p>
<a id="more"></a>
<p><strong>不合法的标识符用 “[]” 包装</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#each articles.[10].[#comments]&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;subject&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    &amp;#123;&amp;#123;body&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不转义</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;foo&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Helpers</strong></p>
<p>0或多个参数，用空格分割，每个参数是个 handlebars 表达式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;link story&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><em>link</em> 是 helper 名字，<em>story</em> 是 helper 参数。</p>
<p><strong>注册 helper</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'link'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(</span><br><span class="line">    <span class="string">"&lt;a href='"</span> + object.url + <span class="string">"'&gt;"</span> + object.text + <span class="string">"&lt;/a&gt;"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>helper 返回 HTML ，不想被转义，用 <code>Handlebars.SafeString()</code>。</p>
<p>helper 把接收的上下文作为 <code>this</code> 上下文</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#each items&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>&amp;#123;&amp;#123;agree_button&#125;&#125;<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>上下文和 helper：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = &#123;</span><br><span class="line">  items: [</span><br><span class="line">    &#123;name: <span class="string">"Handlebars"</span>, emotion: <span class="string">"love"</span>&#125;,</span><br><span class="line">    &#123;name: <span class="string">"Mustache"</span>, emotion: <span class="string">"enjoy"</span>&#125;,</span><br><span class="line">    &#123;name: <span class="string">"Ember"</span>, emotion: <span class="string">"want to learn"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'agree_button'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(</span><br><span class="line">    <span class="string">"&lt;button&gt;I agree. I "</span> + <span class="keyword">this</span>.emotion + <span class="string">" "</span> + <span class="keyword">this</span>.name + <span class="string">"&lt;/button&gt;"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">button</span>&gt;</span>I agree. I love Handlebars<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">button</span>&gt;</span>I agree. I enjoy Mustache<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">button</span>&gt;</span>I agree. I want to learn Ember<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以直接传字符串参数</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;link "See more..." story.url&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;link story.text story.url&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'link'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">text, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(</span><br><span class="line">    <span class="string">"&lt;a href='"</span> + url + <span class="string">"'&gt;"</span> + text + <span class="string">"&lt;/a&gt;"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>helper 最后一个参数也可以接收可选的键值对序列（文档提到的 <strong>hash</strong> 参数）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;link "See more..." href=story.url class="story"&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>hash</strong> 参数的 <code>key</code> 必须是简单的标识符，<code>value</code> 是 Handlebars 表达式， <code>value</code> 可以是简单的标识符，路径，或者字符串。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'link'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">text, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> attrs = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> options.hash) &#123;</span><br><span class="line">    attrs.push(prop + <span class="string">'="'</span> + options.hash[prop] + <span class="string">'"'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(</span><br><span class="line">    <span class="string">"&lt;a "</span> + attrs.join(<span class="string">" "</span>) + <span class="string">"&gt;"</span> + text + <span class="string">"&lt;/a&gt;"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>#基础 Blocks</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span></span><br><span class="line">    &amp;#123;&amp;#123;#noop&#125;&#125;&amp;#123;&amp;#123;body&#125;&#125;&amp;#123;&amp;#123;/noop&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'noop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> options.fn(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>noop helper 实际跟没有 helper 类似，只是传递上下文，返回字符串。Handlebars 把当前的上下文作为 <code>this</code> 。</p>
<p>#内建 helper</p>
<p>##with helper</p>
<p>根据模板传递的上下文解析模板</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#with story&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"intro"</span>&gt;</span>&amp;#123;&amp;#123;&#123;intro&#125;&#125;&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span>&amp;#123;&amp;#123;&#123;body&#125;&#125;&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/with&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当 JSON 对象包含嵌套属性时，不必再三重复父属性的名字。比如以下数据：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  title: <span class="string">"First Post"</span>,</span><br><span class="line">  story: &#123;</span><br><span class="line">    intro: <span class="string">"Before the jump"</span>,</span><br><span class="line">    body: <span class="string">"After the jump"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>helper 接收参数，参数为 JSON 属性的 上下文。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'with'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">context, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> options.fn(context);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>##简单迭代器 each helper</p>
<p>Handlebars 内建了　<strong>each</strong>　迭代器</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"comments"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#each comments&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"comment"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&amp;#123;&amp;#123;subject&#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">      &amp;#123;&amp;#123;&#123;body&#125;&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实现原理如下：　把 comments 数组的每一个元素作为上下文解析模板</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'each'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">context, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, j=context.length; i&lt;j; i++) &#123;</span><br><span class="line">    ret = ret + options.fn(context[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可以用 <code>this</code> 引用迭代元素</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"people_list"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#each people&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>&amp;#123;&amp;#123;this&#125;&#125;<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上下文：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  people: [</span><br><span class="line">    <span class="string">"Yehuda Katz"</span>,</span><br><span class="line">    <span class="string">"Alan Johnson"</span>,</span><br><span class="line">    <span class="string">"Charles Jolley"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"people_list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Yehuda Katz<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Alan Johnson<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Charles Jolley<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当某一项为空时，可以用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;else&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p> 表达式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#each paragraphs&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>&amp;#123;&amp;#123;this&#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;else&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"empty"</span>&gt;</span>No content<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>通过<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;@index&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p> 可以引用当前的循环索引</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#each array&#125;&#125;</span><br><span class="line">  &amp;#123;&amp;#123;@index&#125;&#125;: &amp;#123;&amp;#123;this&#125;&#125;</span><br><span class="line">&amp;#123;&amp;#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;@key&#125;&#125;</span><br><span class="line">``` </span><br><span class="line">引用当前的键名：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&amp;#123;&amp;#123;#each object&#125;&#125;</span><br><span class="line">  &amp;#123;&amp;#123;@key&#125;&#125;: &amp;#123;&amp;#123;this&#125;&#125;</span><br><span class="line">&amp;#123;&amp;#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>数组迭代的第一步和最后一步用 <code>@first</code> 和 <code>@last</code> 变量表示， 对象迭代时仅 <code>@first</code> 可用。</p>
<p>##条件语句 if helper</p>
<p>如果条件参数返回 <code>false</code>, <code>undefined</code>, <code>null</code>, <code>&quot;&quot;</code> 或 <code>[]</code>（非真的值）时，Handlebars 将不渲染该块</p>
<p>Handlebars 内建了 <code>if</code> 和 <code>unless</code> 语句</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#if isActive&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"star.gif"</span> <span class="attribute">alt</span>=<span class="value">"Active"</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>实现原理：根据传入的条件参数，判断是否解析模板</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'if'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">conditional, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(conditional) &#123;</span><br><span class="line">    <span class="keyword">return</span> options.fn(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Handlebars 还提供了 <code>else</code> 语句</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;#if isActive&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"star.gif"</span> <span class="attribute">alt</span>=<span class="value">"Active"</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;else&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"cry.gif"</span> <span class="attribute">alt</span>=<span class="value">"Inactive"</span>&gt;</span></span><br><span class="line">&amp;#123;&amp;#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>##unless helper</p>
<p><code>unless</code> 跟 <code>if</code> 正好相反，如果表达式返回 false ，模板将被渲染。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;#unless license&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">h3</span> <span class="attribute">class</span>=<span class="value">"warning"</span>&gt;</span>WARNING: This entry does not have a license!<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/unless&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当 license 返回 <code>false</code>，Handlebars 将渲染 warning 。</p>
<p>##log helper</p>
<p>记录上下文状态</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;log "Look at me!"&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>#JavaScript 编译模板</p>
<p>模板可以包含在特殊的 <code>&lt;script&gt;</code> 里：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">id</span>=<span class="value">"entry-template"</span> <span class="attribute">type</span>=<span class="value">"text/x-handlebars-template"</span>&gt;</span><span class="undefined"></span><br><span class="line">  template content</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后用 <code>Handlebars.compile</code> 编译模板</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source   = $(<span class="string">"#entry-template"</span>).html();</span><br><span class="line"><span class="keyword">var</span> template = Handlebars.compile(source);</span><br></pre></td></tr></table></figure>
<p>获取编译后的 HTML 模板，用 JSON 数据填充模板</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = &#123;title: <span class="string">"My New Post"</span>, body: <span class="string">"This is my first post!"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> html    = template(context);</span><br></pre></td></tr></table></figure>
<p>最终结果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>My New Post<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span></span><br><span class="line">    This is my first post!</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>##HTML 转义</p>
<p>不想转义用 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&amp;#123;</span><br></pre></td></tr></table></figure>
<p>模板：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span></span><br><span class="line">    &amp;#123;&amp;#123;&#123;body&#125;&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上下文数据：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  title: <span class="string">"All about &lt;p&gt; Tags"</span>,</span><br><span class="line">  body: <span class="string">"&lt;p&gt;This is a post about &amp;lt;p&amp;gt; tags&lt;/p&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终结果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>All About &amp;lt;p&amp;gt; Tags<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>This is a post about &amp;lt;p&amp;gt; tags<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <code>Handlebars.SafeString</code> 方法不做转义，通常返回 <code>new Handlebars.SafeString(result)</code>。此种情形，你可能想手动转义参数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'link'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">text, url</span>) </span>&#123;</span><br><span class="line">  text = Handlebars.Utils.escapeExpression(text);</span><br><span class="line">  url  = Handlebars.Utils.escapeExpression(url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'&lt;a href="'</span> + url + <span class="string">'"&gt;'</span> + text + <span class="string">'&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>模板注释<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;! &#125;&#125;</span><br><span class="line">``` </span><br><span class="line">或者 </span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&amp;#123;&amp;#123;!-- --&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;! only output this author names if an author exists &#125;&#125;</span><br><span class="line">  &amp;#123;&amp;#123;#if author&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&amp;#123;&amp;#123;firstName&#125;&#125; &amp;#123;&amp;#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;/if&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>模板注释不会输出，HTML 注释会输出</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span></span><br><span class="line">  &amp;#123;&amp;#123;! This comment will not be in the output &#125;&#125;</span><br><span class="line">  <span class="comment">&lt;!-- This comment will be in the output --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>##Partials 局部模板</p>
<p>用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;&amp;#123;&gt; partialName&#125;&#125;</span><br><span class="line">``` </span><br><span class="line">引入局部模板，局部模板可以使字符串，也可以是编译模板的函数。</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">var source = "<span class="tag">&lt;<span class="title">ul</span>&gt;</span>&amp;#123;&amp;#123;#people&#125;&#125;<span class="tag">&lt;<span class="title">li</span>&gt;</span>&amp;#123;&amp;#123;&gt; link&#125;&#125;<span class="tag">&lt;/<span class="title">li</span>&gt;</span>&amp;#123;&amp;#123;/people&#125;&#125;<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>";</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerPartial(<span class="string">'link'</span>, <span class="string">'&lt;a href="/people/&amp;#123;&amp;#123;id&#125;&#125;"&gt;&amp;#123;&amp;#123;name&#125;&#125;&lt;/a&gt;'</span>)</span><br><span class="line"><span class="keyword">var</span> template = Handlebars.compile(source);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="string">"people"</span>: [</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Alan"</span>, <span class="string">"id"</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Yehuda"</span>, <span class="string">"id"</span>: <span class="number">2</span> &#125;</span><br><span class="line">  ]&#125;;</span><br><span class="line"></span><br><span class="line">template(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should render:</span></span><br><span class="line"><span class="comment">// &lt;ul&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li&gt;&lt;a href="/people/1"&gt;Alan&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li&gt;&lt;a href="/people/2"&gt;Yehuda&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// &lt;/ul&gt;</span></span><br></pre></td></tr></table></figure>
<p>#内建工具</p>
<p>##转义字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.escapeExpression(string)</span><br></pre></td></tr></table></figure>
<p>##判断空值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.isEmpty(value)</span><br></pre></td></tr></table></figure>
<p>##扩展对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.extend(foo, &#123;bar: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>##转字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.toString(obj)</span><br></pre></td></tr></table></figure>
<p>##判断数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.isArray(obj)</span><br></pre></td></tr></table></figure>
<p>##判断函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.Utils.isFunction(obj)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[前段时间项目正好用到 Handlebars ，边研究文档边翻译了下，留个备份]]>
    
    </summary>
    
      <category term="Handlebars" scheme="http://jinlong.github.io/tags/Handlebars/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/tags/Node-js/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Express 入门]]></title>
    <link href="http://jinlong.github.io/2014/01/07/introduction-to-express/"/>
    <id>http://jinlong.github.io/2014/01/07/introduction-to-express/</id>
    <published>2014-01-07T08:19:00.000Z</published>
    <updated>2015-10-28T14:37:46.003Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://net.tutsplus.com/tutorials/javascript-ajax/introduction-to-express/" target="_blank" rel="external">Introduction to Express</a><br>笔记：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>##安装</p>
<p>package.json 中手动添加 Express 依赖</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"name"</span>: <span class="string">"demo1"</span>,</span><br><span class="line">   <span class="string">"description"</span>: <span class="string">"First Express app"</span>,</span><br><span class="line">   <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">   <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">      <span class="string">"express"</span>: <span class="string">"3.x"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相同的目录运行：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>命令行安装 Express 直接运行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> express</span></span><br></pre></td></tr></table></figure>
<p>安装完后可以用 express 在命令行生成应用。</p>
<p>添加 app.js 文件，写个最简单的应用，创建一个 Express 实例，开始监听特定的端口 ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>运行 <code>node app</code> 没发生任何事情。</p>
<a id="more"></a>
<p>##定义路由</p>
<p>我们给应用添加一些简单的路由，Express 可以响应各种 HTTP 请求：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Regular HTTP get</span></span><br><span class="line">app.get(some url, <span class="keyword">do</span> something);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Some other page</span></span><br><span class="line">app.get(some other url, <span class="keyword">do</span> something <span class="keyword">else</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//I can respond to a form post</span></span><br><span class="line">app.post(some url, <span class="keyword">do</span> more stuff);</span><br></pre></td></tr></table></figure>
<p>我们写个真实的例子，给应用添加主页：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">   response.send(<span class="string">"This would be some HTML"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意 Express 为 response 对象添加了 <code>send()</code> 方法，一些模板代码可以处理响应。重启应用，访问 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a> 看看。</p>
<p><strong>request.send()</strong> API 智能处理不同类型的数据，假如你想为网站添加简单的基于 JSON 的 API ，Express 可以把返回结果转换成 JSON 并设置适当的响应头。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">   response.send(&#123;name:<span class="string">"Raymond"</span>,age:<span class="number">40</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可想而知，添加更多的路由，并处理所需的响应，就可以构建一个应用。<br><!--more--></p>
<p>##通用的博客应用</p>
<p>跳过 package.json 文件，因为除了 name 属性不一样，其它项都一样。来看 app.js 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/about.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/article.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>我们把 <strong>send</strong> 换成了 <strong>sendfile</strong> 。与其把大段的 HTML 字符串放到 app.js 文件里，不如增加三个路由，主页，关于页，文章页。</p>
<p>###添加 HTML</p>
<p>主页：</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-home-html" target="_blank" rel="external">HTML 代码</a></p>
<p>这里并没什么特别的，Express 将返回纯静态的 HTML 。关于页和文章页只不过把 title 和 h1 值改了。</p>
<p>###由静态到动态</p>
<p>Express 支持各种模板引擎，express 命令行可以添加对 Jade，EJS，JSHTML 和 Hogan 的支持。根据 Express 文档，任何模版引擎只要符合特定的签名就可以生效。推荐从 <a href="https://github.com/visionmedia/consolidate.js" target="_blank" rel="external">consolidate.js</a> 库（模版引擎集合）里面查找喜欢的模版引擎。</p>
<p>我是 <a href="http://handlebarsjs.com/" target="_blank" rel="external">Handlebars</a> 的超级粉，我的许多客户端应用都用它，服务器端自然也少不了它。要用 Handlebars 还需要安装包装库 <a href="https://github.com/donpark/hbs" target="_blank" rel="external">hbs</a> 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"name"</span>: <span class="string">"blog2"</span>,</span><br><span class="line">   <span class="string">"description"</span>: <span class="string">"Blog app"</span>,</span><br><span class="line">   <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">   <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">      <span class="string">"express"</span>: <span class="string">"3.x"</span>,</span><br><span class="line">      <span class="string">"hbs"</span>:<span class="string">"*"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后更新 app.js 使用此引擎：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">'hbs'</span>);</span><br><span class="line"> </span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line">app.engine(<span class="string">'html'</span>, hbs.__express);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'about'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'article'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>为了使用 Handlebars ，我们通过 require 把 HBS 包装库引入，然后让 Express 使用它。<br>默认情况下，Handlebars 会解析包含了特定引擎扩展的文件，这里是 <code>something.hbs</code> 。但也可以使用 “<code>view engine</code>”指令告诉 Express 动态解析 HTML 文件。这样我的编辑器可以提供良好的代码校验和语法高亮。通过 <code>app.engine</code> 真正加载引擎。</p>
<p>最终路由用了新的 <code>render</code> 方法，Express 默认使用 views 文件夹，因此我们可以省略。由于 Express 记住了我们要解析的扩展名，所以它也可以省略。<code>res.render(&#39;something&#39;)</code> 实际等于告诉 Express 查找 <code>views/something.html</code> 。Express 基于模板引擎规则解析它，并返回到浏览器。</p>
<p>###主页显示博客条目</p>
<p>我们可以连接到 MySQL 或者 Mongo，这里我们创建一个静态的数据集，取名 blog.js ，它提供获取一组条目和获取一个条目功能。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> entries = [</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">1</span>, <span class="string">"title"</span>:<span class="string">"Hello World!"</span>, <span class="string">"body"</span>:<span class="string">"This is the body of my blog entry. Sooo exciting."</span>, <span class="string">"published"</span>:<span class="string">"6/2/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">2</span>, <span class="string">"title"</span>:<span class="string">"Eggs for Breakfast"</span>, <span class="string">"body"</span>:<span class="string">"Today I had eggs for breakfast. Sooo exciting."</span>, <span class="string">"published"</span>:<span class="string">"6/3/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">3</span>, <span class="string">"title"</span>:<span class="string">"Beer is Good"</span>, <span class="string">"body"</span>:<span class="string">"News Flash! Beer is awesome!"</span>, <span class="string">"published"</span>:<span class="string">"6/4/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">4</span>, <span class="string">"title"</span>:<span class="string">"Mean People Suck"</span>, <span class="string">"body"</span>:<span class="string">"People who are mean aren't nice or fun to hang around."</span>, <span class="string">"published"</span>:<span class="string">"6/5/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">5</span>, <span class="string">"title"</span>:<span class="string">"I'm Leaving Technology X and You Care"</span>, <span class="string">"body"</span>:<span class="string">"Let me write some link bait about why I'm not using a particular technology anymore."</span>, <span class="string">"published"</span>:<span class="string">"6/10/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">6</span>, <span class="string">"title"</span>:<span class="string">"Help My Kickstarter"</span>, <span class="string">"body"</span>:<span class="string">"I want a new XBox One. Please fund my Kickstarter."</span>, <span class="string">"published"</span>:<span class="string">"6/12/2013"</span>&#125;];</span><br><span class="line">exports.getBlogEntries = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> entries;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">exports.getBlogEntry = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; entries.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(entries[i].id == id) <span class="keyword">return</span> entries[i];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们还可以提供添加，编辑和删除，这里到此为止。再更新下 app.js ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">'hbs'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> blogEngine = <span class="built_in">require</span>(<span class="string">'./blog'</span>);</span><br><span class="line"> </span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line">app.engine(<span class="string">'html'</span>, hbs.__express);</span><br><span class="line">app.use(express.bodyParser());</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'index'</span>,&#123;title:<span class="string">"My Blog"</span>, entries:blogEngine.getBlogEntries()&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'about'</span>, &#123;title:<span class="string">"About Me"</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/article/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> entry = blogEngine.getBlogEntry(req.params.id);</span><br><span class="line">   res.render(<span class="string">'article'</span>,&#123;title:entry.title, blog:entry&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>我们用 <code>require</code> 引入数据集，如此可以调用它得到条目。</p>
<p>在主页，我们给 <code>render</code> API 传两个参数，参数是一个对象，包含 <code>title</code> 和 <code>entries</code> 属性。title 的值时字符串，但是 entries 调用 <code>blogEngine</code> API 。我们传的任何数据将对模版生效，主页模版需要调整。</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-home-tpl-html" target="_blank" rel="external">主页模版代码</a></p>
<p>即使你从没用过 Handlebars ，仍旧能猜到这里的含义。<code>#each</code> 指令将循环一个数组，&#123;&#123;&#125;&#125; 表示从博客条目列表取到的参数。</p>
<p>###创建一个布局</p>
<p>你肯定关心剩下的 HTML 怎么改，Express 用了模版引擎会自动支持布局。这意味着我可以创建通用的网站设计布局，Express 将利用它构造特定的页面。按照约定，它取名 <code>layout.something</code> ，“something”是你使用的特定扩展。我们用了 HTML ，它就是 <code>layout.html</code> 。</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-layout-html" target="_blank" rel="external">layout.html 代码</a></p>
<p>关于页面没什么亮点，我们跳过，下面看文章路由。URL 现在包含了标记 <code>:id</code> ，Express 可以创建动态的 URL ，用于对应请求参数。我们定义的链接像这样：<br><code>/article/</code></p>
<p>理论上，每一个博客条目需要一个路由，但是创建一个抽象的路由匹配这些请求效果更好。 <code>bodyParser</code> （这一特性来源于 Connect 框架，的确对我很有帮助，它不仅支持查询字符串，而且支持表单主体，几乎每个 Express 应用都会用到它。）</p>
<p>###显示个别文章</p>
<p>由于 URL 结尾包含动态值，我们可以把它传给 <code>blogEngine</code> 对象，用得到的结果作为视图的变量。</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-article-html" target="_blank" rel="external">article.html 文件</a></p>
<p>现在我们创建了一个真正动态，但是难看的应用，这是新主页：</p>
<p><img src="/images/post/exp-blog/express-blog3-home.jpg"></p>
<p>这是特定的博客条目：</p>
<p><img src="/images/post/exp-blog/express-blog3-article.jpg"></p>
<p>##润色！</p>
<p>我们加点基本的样式，让应用变好看点。Express 提供了简洁的方式添加图像，JavaScript 库和样式表之类的静态资源，简单定义一个静态文件夹，任何请求将从这个文件夹查找文件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure>
<p>此时，如果请求 /foo.css，public 文件夹存在 foo.css 文件，将返回它。我把 <a href="http://twitter.github.io/bootstrap/" target="_blank" rel="external">Bootstrap</a> 和 jQuery 副本放到了 public 文件夹。</p>
<p>然后在我的 layout.html ，我可以引用这些资源。这是链接 bootstrap.css 的例子：</p>
<p><a href="https://gist.github.com/jinlong/8297190#file-layout1-html" target="_blank" rel="external">代码实例</a></p>
<p>Express 将自动检查 public 文件夹，可以有多个静态文件夹，甚至可以自定义 URL 前缀。最终效果是极好的。</p>
<p>主页：</p>
<p><img src="/images/post/exp-blog/express-blog4-home.jpg"></p>
<p>文章页：</p>
<p><img src="/images/post/exp-blog/express-blog4-article.jpg"></p>
<p>##进阶？</p>
<p>延伸阅读：</p>
<ul>
<li><a href="http://expressjs.com/" target="_blank" rel="external">Express homepage</a>    </li>
<li><a href="https://groups.google.com/forum/?fromgroups#!forum/express-js" target="_blank" rel="external">Google group</a>   </li>
<li><a href="https://github.com/visionmedia/express/tree/master/examples" target="_blank" rel="external">Express 实例</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://net.tutsplus.com/tutorials/javascript-ajax/introduction-to-express/">Introduction to Express</a><br>笔记：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<p>##安装</p>
<p>package.json 中手动添加 Express 依赖</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"name"</span>: <span class="string">"demo1"</span>,</span><br><span class="line">   <span class="string">"description"</span>: <span class="string">"First Express app"</span>,</span><br><span class="line">   <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">   <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">      <span class="string">"express"</span>: <span class="string">"3.x"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相同的目录运行：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>命令行安装 Express 直接运行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> express</span></span><br></pre></td></tr></table></figure>
<p>安装完后可以用 express 在命令行生成应用。</p>
<p>添加 app.js 文件，写个最简单的应用，创建一个 Express 实例，开始监听特定的端口 ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>运行 <code>node app</code> 没发生任何事情。</p>]]>
    
    </summary>
    
      <category term="Express" scheme="http://jinlong.github.io/tags/Express/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/tags/Node-js/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/categories/Node-js/"/>
    
      <category term="Express" scheme="http://jinlong.github.io/categories/Node-js/Express/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Grunt-前端利器]]></title>
    <link href="http://jinlong.github.io/2013/12/22/grunt-for-fe/"/>
    <id>http://jinlong.github.io/2013/12/22/grunt-for-fe/</id>
    <published>2013-12-22T15:42:00.000Z</published>
    <updated>2014-10-25T02:55:52.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://24ways.org/2013/grunt-is-not-weird-and-hard/" target="_blank" rel="external">Grunt for People Who Think Things Like Grunt are Weird and Hard</a><br>此篇笔记包含了个人的理解，只记录了文章的要点，并没有逐句翻译，如有不妥望指正。</p>
</blockquote>
<p>Grunt 可以帮前端工程师做什么：</p>
<ul>
<li>合并 CSS 和 JS 文件   </li>
<li>压缩 CSS ，最小化 JS   </li>
<li>优化图片   </li>
<li>使用 Sass</li>
</ul>
<p>前提：安装 <a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a> </p>
<p>项目根目录需要 <strong>package.json</strong> 文件</p>
<p><img src="/images/post/gruntForFE/package-json-file.gif"></p>
<p>package.json 内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"example-project"</span></span>,</span><br><span class="line">  "<span class="attribute">version</span>": <span class="value"><span class="string">"0.1.0"</span></span>,</span><br><span class="line">  "<span class="attribute">devDependencies</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">grunt</span>": <span class="value"><span class="string">"~0.4.1"</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>打开命令行工具，切换到项目文件夹，运行命令：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p>
<p><strong>node_modules</strong> 文件夹出现了，里面是 “<strong>devDependencies</strong>”属性定义的依赖包</p>
<p>全局安装 Grunt CLI：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> grunt-cli</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>##合并文件</p>
<p>安装合并文件插件 <a href="https://github.com/gruntjs/grunt-contrib-concat" target="_blank" rel="external">grunt-contrib-concat</a> </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> grunt-contrib-<span class="keyword">concat</span> <span class="comment">--save-dev</span></span></span><br></pre></td></tr></table></figure>
<p>package.json 会为” devDependencies“属性自动添加新的依赖，多了这一行：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"grunt-contrib-concat"</span>: <span class="string">"~0.3.0"</span></span><br></pre></td></tr></table></figure>
<p>配置 <strong>Gruntfile.js</strong> 配置文件</p>
<p>格式如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 所有配置文件 </span></span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line"></span><br><span class="line">        concat: &#123;</span><br><span class="line">            <span class="comment">// 2.  合并文件的配置项</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 加载使用的插件</span></span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 默认任务</span></span><br><span class="line">    grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'concat'</span>]);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>合并文件的插件配置<a href="https://github.com/gruntjs/grunt-contrib-concat#usage-examples" target="_blank" rel="external">实例</a>： </p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">concat</span>: &#123;   </span><br><span class="line">    <span class="tag">dist</span>: &#123;</span><br><span class="line">        <span class="attribute">src</span>: [</span><br><span class="line">            <span class="string">'js/libs/*.js'</span>, <span class="comment">//libs 文件夹的所有 JS 文件</span></span><br><span class="line">            <span class="string">'js/global.js'</span>  <span class="comment">// 指定文件</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attribute">dest</span>: <span class="string">'js/build/production.js'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>src 属性是原 JS 文件的数组，dest 是合并后的文件</p>
<p>比较全面 Gruntfile.js 文件看<a href="https://github.com/chriscoyier/My-Grunt-Boilerplate/blob/master/Gruntfile.js" target="_blank" rel="external">这个模版</a> </p>
<p>然后在命令行运行：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt</span><br></pre></td></tr></table></figure></p>
<p>##最小化 JS</p>
<p>为 Grunt 添加新任务比较简单：</p>
<ol>
<li>找到需要的 Grunt 插件   </li>
<li>学习插件的配置风格   </li>
<li>为自己的项目写配置文件</li>
</ol>
<p>官方的最小化插件 <a href="https://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">grunt-contrib-uglify</a> ，安装一下：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-contrib-uglify --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>
<p>修改 Gruntfile.js 文件，加载此插件：<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="symbol">'grunt</span>-contrib-uglify');</span><br></pre></td></tr></table></figure></p>
<p>配置一下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">uglify</span>: &#123;</span><br><span class="line">    <span class="tag">build</span>: &#123;</span><br><span class="line">        <span class="attribute">src</span>: <span class="string">'js/build/production.js'</span>,</span><br><span class="line">        <span class="attribute">dest</span>: <span class="string">'js/build/production.min.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>更新默认任务：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="atom">grunt</span>.<span class="atom">registerTask</span>(<span class="string">'default'</span>, [<span class="string">'concat'</span>, <span class="string">'uglify'</span>]);</span><br></pre></td></tr></table></figure>
<p>运行 <code>grunt</code> 即可执行最小化任务</p>
<p><img src="/images/post/gruntForFE/uglify-code.gif"></p>
<p>##优化图片</p>
<p>官方的图片优化插件 <a href="https://github.com/gruntjs/grunt-contrib-imagemin" target="_blank" rel="external">grunt-contrib-imagemin</a> </p>
<p>安装即可：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-contrib-imagemin --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p>
<p>修改 Gruntfile.js 文件，加载此插件：<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="symbol">'grunt</span>-contrib-imagemin');</span><br></pre></td></tr></table></figure></p>
<p>添加配置：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">imagemin</span>: <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">dynamic</span>:<span class="value"> &#123;</span><br><span class="line">        files: [&#123;</span><br><span class="line">            expand: true,</span><br><span class="line">            cwd: <span class="string">'images/'</span>,</span><br><span class="line">            src: [<span class="string">'**/*.&#123;png,jpg,gif&#125;'</span>],</span><br><span class="line">            dest: <span class="string">'images/build/'</span></span><br><span class="line">        </span></span></span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>添加成默认任务<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="atom">grunt</span>.<span class="atom">registerTask</span>(<span class="string">'default'</span>, [<span class="string">'concat'</span>, <span class="string">'uglify'</span>, <span class="string">'imagemin'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>运行 <code>grunt</code> 看奇迹发生</p>
<p><img src="/images/post/gruntForFE/squished-images.gif"></p>
<p>##让任务更智能，更自动</p>
<ol>
<li>需要执行的时候自动执行   </li>
<li>一次执行一个任务   </li>
</ol>
<p>比如:</p>
<ol>
<li>当 JS 修改了以后，合并，最小化文件   </li>
<li>当添加新图片，修改旧图片时优化图像   </li>
</ol>
<p>可以通过官方的  <a href="https://github.com/gruntjs/grunt-contrib-watch" target="_blank" rel="external">grunt-contrib-watch</a> 插件监视文件。</p>
<p>照例安装插件，修改配置文件：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">watch</span>: <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">scripts</span>:<span class="value"> &#123;</span><br><span class="line">        files: [<span class="string">'js/*.js'</span>],</span><br><span class="line">        tasks: [<span class="string">'concat'</span>, <span class="string">'uglify'</span>],</span><br><span class="line">        options: &#123;</span><br><span class="line">            spawn: false,</span><br><span class="line">        </span></span></span>&#125;,</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>出现错误的时候，命令行会有提示：</p>
<p><img src="/images/post/gruntForFE/error-running-grunt.gif"></p>
<p>##Grunt 做我们的预处理器</p>
<p>我还没用过此类的预处理器，好 out ……先留个坑，等用的时候再做记录。请感兴趣的同学<a href="http://24ways.org/2013/grunt-is-not-weird-and-hard/" target="_blank" rel="external">参考原文</a></p>
<p>##继续升级</p>
<p>添加更多有用的任务：</p>
<ul>
<li>使用 <a href="http://css-tricks.com/autoprefixer/" target="_blank" rel="external">Autoprefixer</a> ，CSS 中自动加前缀   </li>
<li>JS 单元测试（比如：<a href="https://github.com/pivotal/jasmine" target="_blank" rel="external">Jasmine</a> ）   </li>
<li>自动生成图片雪碧图和 SVG 图标（比如：<a href="https://github.com/filamentgroup/grunticon" target="_blank" rel="external">Grunticon</a> ）   </li>
<li>作为文件资源服务器   </li>
<li>代码质量工具： <a href="http://philipwalton.com/articles/introducing-html-inspector/" target="_blank" rel="external">HTML-Inspector</a> ， <a href="http://csslint.net/" target="_blank" rel="external">CSS Lint</a>  或者 <a href="http://www.jshint.com/" target="_blank" rel="external">JS Hint</a>   </li>
<li><a href="http://css-tricks.com/cross-browser-css-injection/" target="_blank" rel="external">跨浏览器 CSS 注入</a>   </li>
<li>帮助提交版本控制仓库，比如 GitHub   </li>
<li>添加资源版本号（清缓存）   </li>
<li>帮助部署测试和生成环境（比如：<a href="http://leanmeanfightingmachine.github.io/dploy/" target="_blank" rel="external">DPLOY</a> ）</li>
</ul>
<p>延伸阅读：</p>
<ul>
<li>读 Mark McDonnell 的 <a href="http://www.integralist.co.uk/Grunt-Boilerplate.html" target="_blank" rel="external">Grunt 模版</a>   </li>
<li>读 Nicolas Bevacqua 的 <a href="http://blog.ponyfoo.com/2013/11/13/grunt-tips-and-tricks" target="_blank" rel="external">Grunt 小窍门</a>   </li>
<li>通过<a href="https://github.com/cowboy/wesbos/commit/5a2980a7818957cbaeedcd7552af9ce54e05e3fb" target="_blank" rel="external">分割小文件</a> 组织 Gruntfile.js 文件   </li>
<li>深层学习 Grunt 源码和 <a href="http://gruntjs.com/api/grunt" target="_blank" rel="external">API</a>    </li>
</ul>
<p>附赠：<a href="https://github.com/vladikoff/grunt-devtools" target="_blank" rel="external">Grunt DevTools Chrome 扩展</a>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://24ways.org/2013/grunt-is-not-weird-and-hard/">Grunt for People Who Think Things Like Grunt are Weird and Hard</a><br>此篇笔记包含了个人的理解，只记录了文章的要点，并没有逐句翻译，如有不妥望指正。</p>
</blockquote>
<p>Grunt 可以帮前端工程师做什么：</p>
<ul>
<li>合并 CSS 和 JS 文件   </li>
<li>压缩 CSS ，最小化 JS   </li>
<li>优化图片   </li>
<li>使用 Sass</li>
</ul>
<p>前提：安装 <a href="http://nodejs.org/">Node.js</a> </p>
<p>项目根目录需要 <strong>package.json</strong> 文件</p>
<p><img src="/images/post/gruntForFE/package-json-file.gif" /></p>
<p>package.json 内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"example-project"</span></span>,</span><br><span class="line">  "<span class="attribute">version</span>": <span class="value"><span class="string">"0.1.0"</span></span>,</span><br><span class="line">  "<span class="attribute">devDependencies</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">grunt</span>": <span class="value"><span class="string">"~0.4.1"</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>打开命令行工具，切换到项目文件夹，运行命令：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p>
<p><strong>node_modules</strong> 文件夹出现了，里面是 “<strong>devDependencies</strong>”属性定义的依赖包</p>
<p>全局安装 Grunt CLI：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> grunt-cli</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Grunt" scheme="http://jinlong.github.io/tags/Grunt/"/>
    
      <category term="Grunt" scheme="http://jinlong.github.io/categories/Grunt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Grunt 入门笔记]]></title>
    <link href="http://jinlong.github.io/2013/12/22/grunt-getting-started/"/>
    <id>http://jinlong.github.io/2013/12/22/grunt-getting-started/</id>
    <published>2013-12-22T09:03:00.000Z</published>
    <updated>2015-10-28T14:38:26.312Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文： <a href="http://gruntjs.com/getting-started" target="_blank" rel="external">Getting started</a></p>
</blockquote>
<p>##安装 CLI</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> grunt-cli</span></span><br></pre></td></tr></table></figure>
<p>可以在任何路径运行 <code>grunt</code> 命令</p>
<p>通过 <code>Gruntfile</code> 文件运行某一版本 grunt ，允许多版本共存</p>
<p>##CLI 如何工作</p>
<p>每次运行 grunt ，它会使用 node 的 <code>require()</code> 查找本地安装的 grunt 。基于此原因，你可以在项目的任何子目录运行它。</p>
<p>找到了本地安装的 Grunt ，CLI 加载本地安装的 Grunt 库，应用 <code>Gruntfile</code> 里的配置，执行预期的任务。</p>
<p>想理解真正奥秘，可以<a href="https://github.com/gruntjs/grunt-cli/blob/master/bin/grunt" target="_blank" rel="external">读源码</a>，它非常短。</p>
<p>##运行已存在的 Grunt 项目</p>
<p>假设  Grunt CLI 已安装，项目已通过 <code>package.json</code> 和 <code>Gruntfile</code> 配置好，使用 Grunt 非常简单：</p>
<ol>
<li>切换到项目的根目录   </li>
<li>通过 <code>npm install</code> 安装项目依赖   </li>
<li>通过 <code>grunt</code> 命令运行 Grunt </li>
</ol>
<p><code>grunt --help</code> 可以罗列已安装的 Grunt 任务列表，但是最好从项目文档开始。</p>
<a id="more"></a>
<p>##准备新的 Grunt 项目</p>
<p>典型安装是往项目中添加2个文件：<code>package.json</code> 和 <code>Gruntfile</code></p>
<p><strong>package.json</strong>：存储作为 npm 发布模块的项目的元数据。你可以在 <a href="https://npmjs.org/doc/json.html#devDependencies" target="_blank" rel="external">devDependencies</a> 一项列举项目的需要的 Grunt 插件。</p>
<p><strong>Gruntfile</strong>：文件名是 <code>Gruntfile.js</code> 或者 <code>Gruntfile.coffee</code> ，用于配置或定义任务和加载 Grunt 插件。</p>
<p>###package.json</p>
<p><strong>package.json</strong> 应该在项目的根目录，跟 <strong>Gruntfile</strong> 同目录，应该把它提交到项目源码中。在 package.json 同一文件夹中运行 <strong>npm install</strong>，将安装里面列举的每个依赖的正确版本。</p>
<p>有几种创建 package.json 的方式：</p>
<p>1.大部分 <a href="http://gruntjs.com/project-scaffolding" target="_blank" rel="external">grunt-init</a> 模版会自动创建项目专属的 package.json 文件</p>
<p>安装 </p>
<p><strong>npm install -g grunt-init</strong></p>
<p>安装模版</p>
<p><strong>git clone <a href="https://github.com/gruntjs/grunt-init-gruntfile.git" target="_blank" rel="external">https://github.com/gruntjs/grunt-init-gruntfile.git</a> ~/.grunt-init/gruntfile</strong></p>
<p>使用</p>
<p><strong>grunt-init gruntfile</strong></p>
<p>2.<a href="https://npmjs.org/doc/init.html" target="_blank" rel="external">npm init</a> 命令将创建基本的 package.json 文件。</p>
<p>3.从以下例子开始，扩展需要的内容，遵循<a href="https://npmjs.org/doc/json.html" target="_blank" rel="external">这个规范</a></p>
<p>例子地址：<a href="https://gist.github.com/jinlong/8083660" target="_blank" rel="external">https://gist.github.com/jinlong/8083660</a></p>
<p>##安装 Grunt 和 gruntplugins</p>
<p>往已存在的 package.json 中添加 Grunt 和 gruntplugins 最简单的方式是通过命令：</p>
<p><strong>npm install <module> –save-dev</module></strong></p>
<p>不仅会本地安装 &lt;module&gt;，而且自动把它们添加到 <a href="https://npmjs.org/doc/json.html#devDependencies" target="_blank" rel="external">devDependencies</a> 部分。</p>
<p>例如，下面将往项目目录安装最新版的 Grunt ，并把它添加到 devDependencies ：</p>
<p><strong>npm install grunt –save-dev</strong></p>
<p>gruntplugins 同理。确保把更新后的 package.json 提交到项目里。</p>
<p>##Gruntfile</p>
<p><strong>Gruntfile.js</strong> 或 <strong>Gruntfile.coffee</strong> 是有效的 JavaScript 或者 CoffeeScript 文件，放在项目的根目录，跟 package.json 同目录，需要提交到项目源码中。</p>
<p>Gruntfile 由下面几部分组成：</p>
<ul>
<li>“wrapper 包装”函数   </li>
<li>项目和任务配置   </li>
<li>加载 Grunt 插件和任务   </li>
<li>自定义任务</li>
</ul>
<p>###Gruntfile 例子</p>
<p>以下的 Gruntfile 中，项目元数据从项目的 package.json 文件导入到 Grunt 配置，<a href="http://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">grunt-contrib-uglify</a> 插件的 <strong>uglify</strong> 任务会最小化源文件，并利用元数据动态生成注释。当在命令行运行 <strong>grunt</strong> 时，<strong>uglify</strong> 任务默认启动。</p>
<p>例子地址：<a href="https://gist.github.com/jinlong/8083660" target="_blank" rel="external">https://gist.github.com/jinlong/8083660</a></p>
<p>既然已经见到了整个 Gruntfile ，下面继续看看它的组成部分。</p>
<p>###“ wrapper 包装”函数</p>
<p>所有的 Gruntfile （和 gruntplugin）使用这种基本格式，所有的 Grunt 代码必须放到特定的函数里面：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do grunt-related things in here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>###项目和任务配置</p>
<p>大部分的 Grunt 任务依赖于 <a href="http://gruntjs.com/grunt#grunt.initconfig" target="_blank" rel="external">grunt.initConfig</a> 方法定义的配置数据。此例中，<strong>grunt.file.readJSON(‘package.json’)</strong> 把 package.json 中存储的 JSON 元数据导入到 grunt 配置中。因为 <strong>&lt;% %&gt;</strong> 模版字符串可能引用任何配置属性，像文件路径，文件列表之类的配置数据如此定义，为了避免重复代码。</p>
<p>配置对象可以存储任意的数据，只要不跟任务需要的属性冲突即可，否则将被忽略。此外，由于这是 JavaScript 文件，所以不仅限于 JSON ；可以用合法的 JS 。<a href="http://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">grunt-contrib-uglify</a> 的 uglify 任务需要指定 <strong>uglify</strong> 属性。<strong>banner</strong> 选项需要指定注释内容，<strong>build</strong> 属性定义最小化的源文件和目标文件。</p>
<p>###加载 Grunt 插件和任务</p>
<p>像<a href="https://github.com/gruntjs/grunt-contrib-concat" target="_blank" rel="external">合并多个文件</a> ，<a href="http://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">最小化文件</a> ，和<a href="https://github.com/gruntjs/grunt-contrib-jshint" target="_blank" rel="external">验证 JS 文件</a> 都有了 <a href="https://github.com/gruntjs" target="_blank" rel="external">grunt 插件</a> 。只要在 <strong>package.json</strong> 里面定义插件，通过 <strong>npm install</strong> 即可安装，通过简单的命令即可在 Gruntfile 里面启用它：</p>
<p>// 加载提供 “uglify” 任务的插件<br>grunt.loadNpmTasks(‘grunt-contrib-uglify’);</p>
<p>注意：<strong>grunt –help</strong> 命令会列出所有可用任务。</p>
<p>###自定义任务</p>
<p>你可以配置 Grunt 默认执行一个或多个任务。以下例子，命令行运行 grunt，默认会执行 <strong>uglify</strong> 任务，等同于执行 <strong>grunt uglify</strong> 或者 <strong>grunt default</strong> 。多个任务（带或不带参数）需要放到数组里。</p>
<p>// 默认任务</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>]);</span><br></pre></td></tr></table></figure>
<p>如果 Grunt 插件无法满足要求，你可以在 Gruntfile 定义自己的任务。例如，这个 Gruntfile 定义了自己的 default 任务，甚至没有利用任务配置：</p>
<p><a href="https://gist.github.com/jinlong/8083660" target="_blank" rel="external">https://gist.github.com/jinlong/8083660</a></p>
<p>定制的项目专属任务不需要定义到 Gruntfile 中；可以在外部 <strong>.js</strong> 文件定义，通过 <a href="http://gruntjs.com/grunt#grunt.loadtasks" target="_blank" rel="external">grunt.loadTasks</a> 方法加载。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文： <a href="http://gruntjs.com/getting-started">Getting started</a></p>
</blockquote>
<p>##安装 CLI</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> grunt-cli</span></span><br></pre></td></tr></table></figure>
<p>可以在任何路径运行 <code>grunt</code> 命令</p>
<p>通过 <code>Gruntfile</code> 文件运行某一版本 grunt ，允许多版本共存</p>
<p>##CLI 如何工作</p>
<p>每次运行 grunt ，它会使用 node 的 <code>require()</code> 查找本地安装的 grunt 。基于此原因，你可以在项目的任何子目录运行它。</p>
<p>找到了本地安装的 Grunt ，CLI 加载本地安装的 Grunt 库，应用 <code>Gruntfile</code> 里的配置，执行预期的任务。</p>
<p>想理解真正奥秘，可以<a href="https://github.com/gruntjs/grunt-cli/blob/master/bin/grunt">读源码</a>，它非常短。</p>
<p>##运行已存在的 Grunt 项目</p>
<p>假设  Grunt CLI 已安装，项目已通过 <code>package.json</code> 和 <code>Gruntfile</code> 配置好，使用 Grunt 非常简单：</p>
<ol>
<li>切换到项目的根目录   </li>
<li>通过 <code>npm install</code> 安装项目依赖   </li>
<li>通过 <code>grunt</code> 命令运行 Grunt </li>
</ol>
<p><code>grunt --help</code> 可以罗列已安装的 Grunt 任务列表，但是最好从项目文档开始。</p>]]>
    
    </summary>
    
      <category term="Grunt" scheme="http://jinlong.github.io/tags/Grunt/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/tags/Node-js/"/>
    
      <category term="Grunt" scheme="http://jinlong.github.io/categories/Grunt/"/>
    
      <category term="Nodejs" scheme="http://jinlong.github.io/categories/Grunt/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript 最佳实践]]></title>
    <link href="http://jinlong.github.io/2013/11/25/javascript-best-practices/"/>
    <id>http://jinlong.github.io/2013/11/25/javascript-best-practices/</id>
    <published>2013-11-25T05:12:00.000Z</published>
    <updated>2015-10-28T14:44:32.615Z</updated>
    <content type="html"><![CDATA[<p>本篇指南分两部分，翻译自 Mozilla 的 Web 布道师 Christian Heilmann 的 <a href="http://www.slideshare.net/cheilmann/javascript-best-practices-1041724" target="_blank" rel="external">PPT</a> （需翻墙）</p>
<blockquote>
<p>原文：<br><a href="http://www.thinkful.com/learn/javascript-best-practices-1/" target="_blank" rel="external">Javascript BEST PRACTICES PART 1</a><br><a href="http://www.thinkful.com/learn/javascript-best-practices-2/" target="_blank" rel="external">Javascript BEST PRACTICES PART 2</a><br>译者：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>##Make it Understandable（更易理解）</p>
<p>变量和函数选择容易理解，较短的单词命名。</p>
<div style="color:#c01d1d">不好的变量名：</div><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">x1</span> fe2 xbqne</span><br></pre></td></tr></table></figure><br><br><br><div style="color:#c01d1d">也不好的变量名：</div><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">incrementerForMainLoopWhichSpansFromTenToTwenty</span></span><br><span class="line">createNewMemberIfAgeOverTwentyOneAndMoonIsFull</span><br></pre></td></tr></table></figure><br><br>避免用变量或函数名描述一个值。<br><br><div style="color:#c01d1d">在有的国家也许讲不通：</div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isOverEighteen</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><br><br><div style="color:#5ead12">工作良好：</div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isLegalAge</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><br>Your code is a story - make your storyline easy to follow!<br>你的代码是一则故事 - 让故事情节更容易投入。<br><br>##避免全局变量<br><br>全局变量是魔鬼<br><br><strong>原因：</strong>其它后面的 JavaScript 代码随时会覆盖你的代码。<br><br><strong>变通方案：</strong>使用闭包和模块模式<br><br><div style="color:#c01d1d"><br>    <strong>问题：</strong>所有全局变量都可以被访问；访问不受控制，页面任何东西都可以被覆盖。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> current = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> labels = &#123;</span><br><span class="line">   <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">   <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">   <span class="string">'contact'</span>:<span class="string">'contact'</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   current = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   show();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>对象字面量：</strong>所有东西都被包含起来，但是通过对象名字可以访问。</p>
<div style="color:#c01d1d"><strong>问题：</strong>重复的模块名称导致代码庞大恼人。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">demo = &#123;</span><br><span class="line">   current:<span class="literal">null</span>,</span><br><span class="line">   labels:&#123;</span><br><span class="line">      <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">      <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">      <span class="string">'contact'</span>:<span class="string">'contact'</span></span><br><span class="line">   &#125;,</span><br><span class="line">   init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;,</span><br><span class="line">   show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      demo.current = <span class="number">1</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      demo.show();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>模块模式：</strong>你需要指定哪些是全局的，哪些不是 —— 转换两者语法。</p>
<div style="color:#c01d1d"><strong>问题：</strong>重复的模块名称，内部函数的不同语法。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> labels = &#123;</span><br><span class="line">      <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">      <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">      <span class="string">'contact'</span>:<span class="string">'contact'</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">      current:<span class="literal">null</span>,</span><br><span class="line">      init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">module</span>.current = <span class="number">1</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">module</span>.show();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<div style="color:#5ead12"><br><strong>Revealing Module Pattern（揭示模块模式）：</strong>暴露的全局变量和局部变量，保持语法一致。<br></div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> current = <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">var</span> labels = &#123;</span><br><span class="line">      <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">      <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">      <span class="string">'contact'</span>:<span class="string">'contact'</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      current = <span class="number">1</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> hide = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      show();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>&#123;init:init, show:show, current:current&#125;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">module</span>.init();</span><br></pre></td></tr></table></figure>
<p>##坚持一种严格的编码风格</p>
<p>浏览器是非常宽容的 JavaScript 解析器。但是，当你转换到另一个环境，或者移交给另一个开发者时，松懈的代码风格对自己很不利。Valid code is secure code（有效的代码是安全的代码）。</p>
<p><strong>验证你的代码：</strong><a href="http://www.jslint.com/" target="_blank" rel="external">http://www.jslint.com/</a></p>
<p>##需要注释，不要过分注释</p>
<blockquote>
<p>“Good code explains itself （好的代码会自我解释）”是傲慢的神话。</p>
</blockquote>
<p>需要的时候加上注释 —— 但是不要长篇大论。</p>
<p>避免用单行注释 //。/&#42; &#42;/ 更安全，当删除换行符时不会导致出错。</p>
<p>如果你使用注释调试，这是个不错的小技巧：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> current = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">   var init = function()&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   var show = function()&#123;</span><br><span class="line">      current = 1;</span><br><span class="line">   &#125;;</span><br><span class="line">   var hide = function()&#123;</span><br><span class="line">      show();</span><br><span class="line">   &#125;</span><br><span class="line">// */</span></span><br><span class="line">   <span class="keyword">return</span>&#123;init:init, show:show, current:current&#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<p>HTML 或 JavaScript 里的注释不应该给最终用户看到。理解 <strong>Development code is not live code （开发代码不是线上代码）</strong>。</p>
<h2 id="避免与其它技术混用">避免与其它技术混用</h2><p>JavaScript 擅长计算，转换，访问外部资源（Ajax）和定义界面的交互行为（事件处理）。别的事情应该让别的技术完成。</p>
<p>例如：</p>
<div style="color:#c01d1d">当所有带“mandatory”class 的区域是空时，用红色边框标注一下。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="built_in">document</span>.getElementById(<span class="string">'mainform'</span>);</span><br><span class="line"><span class="keyword">var</span> inputs = f.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=inputs.length;i&lt;j;i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(inputs[i].className === <span class="string">'mandatory'</span> &amp;&amp; inputs.value === <span class="string">''</span>)&#123;</span><br><span class="line">      inputs[i].style.borderColor = <span class="string">'#f00'</span>;</span><br><span class="line">      inputs[i].style.borderStyle = <span class="string">'solid'</span>;</span><br><span class="line">      inputs[i].style.borderWidth = <span class="string">'1px'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="color:#c01d1d">… 两个月下来：所有的样式必须遵循新公司的风格指南，不允许有边框，错误应该有个警示图标。怎么办呢？</div><br><br><br><div style="color:#5ead12">我们不必通过改变 JavaScript 代码来改变外观和感觉。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="built_in">document</span>.getElementById(<span class="string">'mainform'</span>);</span><br><span class="line"><span class="keyword">var</span> inputs = f.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=inputs.length;i&lt;j;i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(inputs[i].className === <span class="string">'mandatory'</span> &amp;&amp; inputs.value === <span class="string">''</span>)&#123;</span><br><span class="line">      inputs[i].className+=<span class="string">' error'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div><br>使用 CSS 继承可以避免循环许多元素。<br></div>

<p>##使用简洁的写法</p>
<p><strong>一旦你习惯简洁写法，代码会更清爽，更易读。</strong></p>
<p>这段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lunch = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">lunch[<span class="number">0</span>]=<span class="string">'Dosa'</span>;</span><br><span class="line">lunch[<span class="number">1</span>]=<span class="string">'Roti'</span>;</span><br><span class="line">lunch[<span class="number">2</span>]=<span class="string">'Rice'</span>;</span><br><span class="line">lunch[<span class="number">3</span>]=<span class="string">'what the heck is this?'</span>;</span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lunch = [</span><br><span class="line">   <span class="string">'Dosa'</span>,</span><br><span class="line">   <span class="string">'Roti'</span>,</span><br><span class="line">   <span class="string">'Rice'</span>,</span><br><span class="line">   <span class="string">'what the heck is this?'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p>这段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(v)&#123;</span><br><span class="line">   <span class="keyword">var</span> x = v;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> x =<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = v || <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p>
<p>这段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> direction;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">100</span>)&#123;</span><br><span class="line">   direction = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   direction = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> direction = (x &gt; <span class="number">100</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>##模块化</p>
<p><strong>保持代码的模块化和专业化</strong></p>
<p>我们很容易写一个函数做所有事，可是当扩展功能时，发现好几个函数做同样的事情。</p>
<p>为了避免此事，确保写较小的，通用辅助函数，完成一个特定的任务，而不是所有的方法。</p>
<p>再后来，你可以使用 revealing module pattern（揭示模块模式）暴露一些方法，创建一套 API 扩展主要功能。</p>
<p>好的代码应该易于扩展，不需要重写核心。</p>
<p>##渐进增强</p>
<p><strong>避免创建许多 JavaScript 依赖代码</strong></p>
<p>DOM 操作又慢又昂贵。</p>
<p>当禁用 JavaScript 时，依赖 JavaScript 的元素要仍然可用。</p>
<p>##允许配置和转化</p>
<p><strong>代码也许会变，代码结构不应该是松散的。</strong></p>
<p>包括标签，CSS 类，ID 和默认配置。</p>
<p>把这些放进一个配置对象，保持公开，我们很容易维护，并且可以自由定制。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">carousel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> config = &#123;</span><br><span class="line">      CSS:&#123;</span><br><span class="line">         classes:&#123;</span><br><span class="line">            current:<span class="string">'current'</span>,</span><br><span class="line">            scrollContainer:<span class="string">'scroll'</span></span><br><span class="line">         &#125;,</span><br><span class="line">         IDs:&#123;</span><br><span class="line">            maincontainer:<span class="string">'carousel'</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      labels:&#123;</span><br><span class="line">         previous:<span class="string">'back'</span>,</span><br><span class="line">         next:<span class="string">'next'</span>,</span><br><span class="line">         auto:<span class="string">'play'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      settings:&#123;</span><br><span class="line">         amount:<span class="number">5</span>,</span><br><span class="line">         skin:<span class="string">'blue'</span>,</span><br><span class="line">         autoplay:<span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">highlight</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> &#123;config:config,init:init&#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<p>##避免严重嵌套</p>
<p><strong>多层嵌套的代码很不易读。</strong></p>
<p>循环嵌套循环是个坏主意，需要小心几个迭代器变量（i, j, k, l, m…）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderProfiles</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> out = <span class="built_in">document</span>.getElementById(<span class="string">'profiles'</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;o.members.length;i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line">      <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">      li.appendChild(<span class="built_in">document</span>.createTextNode(o.members[i].name));</span><br><span class="line">      <span class="keyword">var</span> nestedul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;o.members[i].data.length;j++)&#123;</span><br><span class="line">         <span class="keyword">var</span> datali = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">         datali.appendChild(</span><br><span class="line">            <span class="built_in">document</span>.createTextNode(</span><br><span class="line">               o.members[i].data[j].label + <span class="string">' '</span> +</span><br><span class="line">               o.members[i].data[j].value</span><br><span class="line">            )</span><br><span class="line">         );</span><br><span class="line">         nestedul.appendChild(detali);</span><br><span class="line">      &#125;</span><br><span class="line">      li.appendChild(nestedul);</span><br><span class="line">   &#125;</span><br><span class="line">   out.appendChild(ul);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用专门的工具方法避免重度的循环嵌套。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderProfiles</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> out = <span class="built_in">document</span>.getElementById(<span class="string">'profiles'</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;o.members.length;i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line">      <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">      li.appendChild(<span class="built_in">document</span>.createTextNode(data.members[i].name));</span><br><span class="line">      li.appendChild(addMemberData(o.members[i]));</span><br><span class="line">   &#125;</span><br><span class="line">   out.appendChild(ul);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMemberData</span>(<span class="params">member</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;member.data.length;i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">      li.appendChild(</span><br><span class="line">         <span class="built_in">document</span>.createTextNode(</span><br><span class="line">            member.data[i].label + <span class="string">' '</span> +</span><br><span class="line">            member.data[i].value</span><br><span class="line">         )</span><br><span class="line">      );</span><br><span class="line">   &#125;</span><br><span class="line">   ul.appendChild(li);</span><br><span class="line">   <span class="keyword">return</span> ul;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##优化循环</p>
<p><strong>JavaScript 循环可能非常慢。</strong></p>
<p>不要让 JavaScript 每次迭代都读取数组的长度，用变量保存长度的值。</p>
<p>不好：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'George'</span>,</span><br><span class="line"><span class="string">'Ringo'</span>,</span><br><span class="line"><span class="string">'Paul'</span>,</span><br><span class="line"><span class="string">'John'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;names.length;i++)&#123;</span><br><span class="line">   doSomethingWith(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'George'</span>,</span><br><span class="line"><span class="string">'Ringo'</span>,</span><br><span class="line"><span class="string">'Paul'</span>,</span><br><span class="line"><span class="string">'John'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=names.length;i&lt;j;i++)&#123;</span><br><span class="line">  doSomethingWith(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<div>重度计算代码放到循环外边，包括正则表达式，首要的是 DOM 操作。</div>

<p>你可以在循环里创建 DOM 节点，但是避免插入文档对象。</p>
<p>##DOM 访问最小化</p>
<p><strong>如果可以避免，不要访问 DOM。</strong></p>
<p><strong>原因：</strong>比较慢，有各种各样的浏览器问题</p>
<p><strong>解决方案：</strong>编写或使用一个辅助方法，批量把数据集转换成 HTML 。</p>
<p>所有的数据在一个方法中处理，最后把结果一次性加入到 DOM 中去。</p>
<p>##不要屈服于浏览器的奇怪表现</p>
<p><strong>依赖浏览器稀奇古怪的行为，不如希望它一切正常。</strong></p>
<p>避免使用一些奇技淫巧，分析问题的根源。</p>
<p>很多时候，你会发现你需要额外的功能，是因为你的界面规划不好。</p>
<p>##不要信任任何数据</p>
<p><strong>好的代码不会信任收到的任何数据。</strong></p>
<ul>
<li>不要相信 HTML 文档<br>任何用户都可以干预它，比如通过 Firebug 。</li>
<li>不要相信你的函数接收的数据格式永远正确。<br>用 typeof 测试，然后再处理它。</li>
<li>不要预期 DOM 中的元素是可用的。<br>改变它们之前测试一下，确保它们如你的预期。</li>
<li>不要妄图使用 JavaScript 保护一些东西。<br>JavaScript 代码很容易被破解 :)</li>
</ul>
<p>##通过 JavaScript 添加功能，而不是添加内容   </p>
<p>如果你发现 JavaScript 里面有过多的 HTML ，你可能做错了什么。</p>
<p>创建使用 DOM 不是很方便，一般用 <strong>innerHTML</strong> ，这样很难追踪 HTML 的代码质量。</p>
<p>如果的确有大量的界面，可以通过 Ajax 加载静态的 HTML 文档界面。</p>
<p>这种方式 HTML 好维护，并且支持定制。</p>
<p>##站在巨人的肩膀上</p>
<p><strong>JavaScript 很有趣，不过针对所有浏览器写 JavaScript 不那么有趣… 所以从一个好框架入手。</strong></p>
<p>JavaScript 框架专门用于堵浏览器的漏洞，让浏览器行为和你的代码更符合预期。</p>
<p>好的框架帮助你写代码，帮你节省了一些支持主流浏览器的开销。</p>
<p>##开发代码不等于线上代码</p>
<p><strong>线上代码为机器所写，开发环境代码为人而写。</strong></p>
<ul>
<li>构建流程包含核对，最小化和优化代码。</li>
<li>不要过早优化。</li>
<li>如果我们减少了编码时间，可以有更多时间完善向机器码的转换。</li>
</ul>
<blockquote>
<p>参考资料：<br><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="external">Learning JavaScript Design Patterns</a> </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇指南分两部分，翻译自 Mozilla 的 Web 布道师 Christian Heilmann 的 <a href="http://www.slideshare.net/cheilmann/javascript-best-practices-1041724">PPT</a> （需翻墙）</p>
<blockquote>
<p>原文：<br><a href="http://www.thinkful.com/learn/javascript-best-practices-1/">Javascript BEST PRACTICES PART 1</a><br><a href="http://www.thinkful.com/learn/javascript-best-practices-2/">Javascript BEST PRACTICES PART 2</a><br>译者：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<p>##Make it Understandable（更易理解）</p>
<p>变量和函数选择容易理解，较短的单词命名。</p>
<div style="color:#c01d1d">不好的变量名：</div><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">x1</span> fe2 xbqne</span><br></pre></td></tr></table></figure><br><br><br><div style="color:#c01d1d">也不好的变量名：</div><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">incrementerForMainLoopWhichSpansFromTenToTwenty</span></span><br><span class="line">createNewMemberIfAgeOverTwentyOneAndMoonIsFull</span><br></pre></td></tr></table></figure><br><br>避免用变量或函数名描述一个值。<br><br><div style="color:#c01d1d">在有的国家也许讲不通：</div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isOverEighteen</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><br><br><div style="color:#5ead12">工作良好：</div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isLegalAge</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><br>Your code is a story - make your storyline easy to follow!<br>你的代码是一则故事 - 让故事情节更容易投入。<br><br>##避免全局变量<br><br>全局变量是魔鬼<br><br><strong>原因：</strong>其它后面的 JavaScript 代码随时会覆盖你的代码。<br><br><strong>变通方案：</strong>使用闭包和模块模式<br><br><div style="color:#c01d1d"><br>    <strong>问题：</strong>所有全局变量都可以被访问；访问不受控制，页面任何东西都可以被覆盖。</div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> current = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> labels = &#123;</span><br><span class="line">   <span class="string">'home'</span>:<span class="string">'home'</span>,</span><br><span class="line">   <span class="string">'articles'</span>:<span class="string">'articles'</span>,</span><br><span class="line">   <span class="string">'contact'</span>:<span class="string">'contact'</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   current = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   show();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://jinlong.github.io/tags/Javascript/"/>
    
      <category term="Javascript" scheme="http://jinlong.github.io/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用户体验设计中的巧妙过渡]]></title>
    <link href="http://jinlong.github.io/2013/11/25/smart-transitions-in-user-experience-design/"/>
    <id>http://jinlong.github.io/2013/11/25/smart-transitions-in-user-experience-design/</id>
    <published>2013-11-25T03:55:00.000Z</published>
    <updated>2014-10-25T02:20:53.100Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://uxdesign.smashingmagazine.com/2013/10/23/smart-transitions-in-user-experience-design/" target="_blank" rel="external">Smart Transitions In User Experience Design</a><br>译者：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>一些网站不仅在内容，可用性，设计，功能等方面，让人耳目一新；交互设计细节和动画更是与众不同。我们将分享一些模型的经验，分析一下这些简单的模式为什么效果很好。</p>
<p>当我们设计数码产品时，我们一般使用 Photoshop 和 Sketch 此类软件。大多数有数年行业经验的人显然明白设计不仅仅是视觉传达。尽管如此，有些人还是继续做静态设计。<a href="http://www.nytimes.com/2003/11/30/magazine/30IPOD.html?pagewanted=all" target="_blank" rel="external">Steve Jobs 如此描述设计</a>：</p>
<blockquote>
<p>“It’s not just what it looks like and feels like. Design is how it works.“<br>“设计不仅仅是看起来和感受到的样子。设计是如何工作。”</p>
</blockquote>
<p>我们对于产品的体验和印象来源于诸多因素的集合，交互扮演一个根基的角色。我们无法想象用户界面是静态设计，随后再添加交互魔法。相反，我们需要在早期加入交互特性，把它当成天然的组成部分。</p>
<p>让我们看看一些巧妙的交互，它们是一些微妙的动画，优雅地改善了用户体验。<br><a id="more"></a></p>
<p>##动画滚动</p>
<p>超链接总是褒贬不一，当点击一个链接时，可以生硬地跳转，结果是<strong>丢失上下文</strong>。</p>
<p>对网站而言，特别是长网站，加一个线性滚动动画，可以改善用户体验：</p>
<p><img src="/images/post/smart-transitions/ScrollingAnimated.gif"></p>
<p>对比下面看看：</p>
<p><img src="/images/post/smart-transitions/ScrollingNoAnimation.gif"></p>
<p>对比下默认行为和动画行为，跳过内容不再是无意识的行为；它是一个决定。实际上，《<a href="http://hopelies.com/" target="_blank" rel="external">Hope Lies at 24 Frames Per Second</a>》此文中的菜单按钮没有任何动画，它花了我1分多钟才明白确切发生了什么。</p>
<p><strong>要点：</strong>界面的突然变化用户很难适应，总是告知他们发生了什么。</p>
<p>##有状态的切换</p>
<p>让我们看看另一个例子：切换菜单。用户点击“+”号增加内容或展开元素。通过旋转 45 度，加号变成了叉号，叉号大家广泛理解为“关闭”：</p>
<p><img src="/images/post/smart-transitions/Stateful-toggle.gif"></p>
<p>简单的变换完全改变了图标的意义。这个小细节比让用户猜测接下来发生什么，以及理解图标是什么意思容易多了。这个切换对用户非常友好。此外，加号旋转总是跟内容保持一个方向，加强了信息的流动。</p>
<p><strong>要点：</strong>让网站元素的每个状态都可理解。</p>
<p>##渐进呈现表单和评论</p>
<p>许多博客和新闻网站的评论表单不是很友好，当你准备发表评论时，你只想输入评论而不是干别的，典型的问题是，它会询问你各种其它的事情，好烦人呐。</p>
<p>为了激发用户的评论热情，我们可以<strong>仅显示最重要的元素：评论框</strong>。当用户点击输入区域时，展开相应的表单。真实世界渐进展现的例子，可以看纽约时报的 beta 网站：</p>
<p><img src="/images/post/smart-transitions/NY-Times.gif"></p>
<p>你可以更进一步，当评论框获得焦点时展开表单。这么做有个问题，交互设计的基本原则提到：<strong>an action should always happen close to where the interaction occurs （一个行为总是发生在离交互点最近的地方）</strong>（关注焦点附近）。我们可以再进一步，给评论框添加动画引导用户：</p>
<p><img src="/images/post/smart-transitions/ExpandingComments.gif"></p>
<p>你还可以把评论框固定在顶部，在下面展开相应内容，显示附加字段。</p>
<p>如你所见，这么做减少了混乱，令评论表单更吸引人。</p>
<p>更好的做法是，当用户到达页面底部时自动加载评论。我们应该避免强迫用户去点击，除非有更好的理由。</p>
<p><strong>要点：</strong>渐进展现为了减少 UI 组件的呈现，用户需要它们时再显示出来。</p>
<p>##Pull To Refresh （拉动刷新）</p>
<p>最令人激动的交互之一是伴随着 iPhone 出现， Loren Brichter 倡导的 “拉动刷新”。用户可以更新可卷动的时序型内容。你可以在 Twitter 的应用中看到此效果。</p>
<p><img src="/images/post/smart-transitions/Twitter.gif"></p>
<p>为什么效果这么好？在拉动刷新出现之前，用户必须点击浏览器的刷新按钮加载更多内容。把用户发现更多内容的愿望和刷新行为联系起来，明确的点击行为变得好古板。</p>
<p><strong>要点：</strong>连接意图和行为，体验变得更加无缝。</p>
<p>##Sticky Labels （粘性标签）</p>
<p>粘性标签是另一个微妙而实用的组合，它把用户界面与有意义的过渡结合起来。看看 <a href="http://edenspiekermann.com/projects" target="_blank" rel="external">Edenspiekermann’s use of this technique</a> 的运用。</p>
<p><img src="/images/post/smart-transitions/Sticky-Label.gif"></p>
<p>项目标签一直固定在内容的左侧，直到下一个项目出现。这个效果类似 iOS 地址本，它为较长区域提供了上下文。过渡效果不仅增加了方向感，而且提供了基于上下文的描述。</p>
<p><strong>要点：</strong>长区域中添加了有价值信息的摘要或者标题可以使用粘性标签。</p>
<p>##Affordance Transition （自解释的过渡效果）</p>
<p>自解释的概念源于认知心理学，指一个对象的特征，它用于引导用户。</p>
<p>在用户界面设计的上下文，EU 网站的<a href="http://ec.europa.eu/regional_policy/archive/country/commu/docevent/26112008/5_doulgerof_glossary.pdf" target="_blank" rel="external">可用性词汇</a>（PDF）中如此定义自解释性：</p>
<blockquote>
<p>“An affordance is a desirable property of a user interface — software which naturally leads people to take the correct steps to accomplish their goals.”<br>“自解释性是用户界面令人满意的特性 —— 软件很自然地引导用户，通过正确的步骤达到预期的目标。”</p>
</blockquote>
<p>Ridges（棱线）常常用于提高自解释性。按钮周围的棱线暗示按钮是可操作的。这种用户体验技术被 iOS 上的相机应用广泛推广。</p>
<p><img src="/images/post/smart-transitions/iOS_Lockscreen-500-final.jpg"></p>
<p>iOS 6 的锁屏旁边的相机图标，暗示可以拖动。Apple 在 iOS 7里移除了它，显然是因为用户习惯让它看起来更像一个独立的图标。后来是怎么做的：当你拖动按钮，锁屏弹起，相机出现在下面。这是一项将用户指向功能的很好的技术。</p>
<p><strong>要点：</strong>在界面上，给予元素高度自解释性，它会把用户指向功能。</p>
<p>##Context-Based Hiding（基于上下文隐藏）</p>
<p>iOS 上的 Google Chrome 启动后有个基于上下文隐藏功能，见下图：</p>
<p><img src="/images/post/smart-transitions/CBH.gif"></p>
<p>基本理念是当用户向下滚动页面，浏览器导航面板自动隐藏。当用户再次向上滚动页面，控制面板出现。这种方法不仅改善了上下文体验（专注于内容本身），而且增加了屏幕可用空间。屏幕空间在移动设备尤为重要。</p>
<p>首先假设<strong>用户将一直浏览关注的内容</strong>。当他们停止浏览，上下文可能改变；因此，导航面板需要重新出现。这一技术节省屏幕空间的同时，检查某种假设是否超出了你的测试用例。</p>
<p>iOS 处理的更好，当到达页面的底部时，控制面板再次出现。这是一个动态整合用户需求的绝佳的例子。</p>
<p><strong>要点：</strong>使用基于上下文的隐藏功能提高用户关注度，节省屏幕空间。</p>
<p>##Focus Transition（焦点过渡）</p>
<p>当通过键盘导航时，用户按下 Tab 键，常常搞不清焦点移动到哪里了。通过动画指引他们到达页面指定位置。过渡是微妙的，但在指引用户方面影响巨大。</p>
<p><strong>要点：</strong>为用户指明方向，不管他们如何导航。</p>
<p>##总之</p>
<p>这几个例子仅仅是九牛一毛罢了，本文要点不是秀一些最新最酷的交互技术，而是强调如何通过轻微的交互细节大大提高用户体验。</p>
<p>如果我们想设计出更好的数字产品，我们需要挑战当前的信念，看看何种交互模式更能方便用户的使用。我没说要重复造轮子，但是不要停止探索。因此，走出你的安乐窝，保持探索，勇于尝试。</p>
<p>如果你喜欢本文，可以在 Twitter 上<a href="http://www.twitter.com/webchaeschtli" target="_blank" rel="external">关注我</a> ，或者到瑞士请我一块瑞士巧克力。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://uxdesign.smashingmagazine.com/2013/10/23/smart-transitions-in-user-experience-design/">Smart Transitions In User Experience Design</a><br>译者：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<p>一些网站不仅在内容，可用性，设计，功能等方面，让人耳目一新；交互设计细节和动画更是与众不同。我们将分享一些模型的经验，分析一下这些简单的模式为什么效果很好。</p>
<p>当我们设计数码产品时，我们一般使用 Photoshop 和 Sketch 此类软件。大多数有数年行业经验的人显然明白设计不仅仅是视觉传达。尽管如此，有些人还是继续做静态设计。<a href="http://www.nytimes.com/2003/11/30/magazine/30IPOD.html?pagewanted=all">Steve Jobs 如此描述设计</a>：</p>
<blockquote>
<p>“It’s not just what it looks like and feels like. Design is how it works.“<br>“设计不仅仅是看起来和感受到的样子。设计是如何工作。”</p>
</blockquote>
<p>我们对于产品的体验和印象来源于诸多因素的集合，交互扮演一个根基的角色。我们无法想象用户界面是静态设计，随后再添加交互魔法。相反，我们需要在早期加入交互特性，把它当成天然的组成部分。</p>
<p>让我们看看一些巧妙的交互，它们是一些微妙的动画，优雅地改善了用户体验。<br>]]>
    
    </summary>
    
      <category term="交互设计" scheme="http://jinlong.github.io/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="用户体验" scheme="http://jinlong.github.io/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
      <category term="用户体验" scheme="http://jinlong.github.io/categories/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
      <category term="交互设计" scheme="http://jinlong.github.io/categories/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS 滑动门十年纪念]]></title>
    <link href="http://jinlong.github.io/2013/10/20/ten-years-of-sliding-doors-of-css/"/>
    <id>http://jinlong.github.io/2013/10/20/ten-years-of-sliding-doors-of-css/</id>
    <published>2013-10-20T10:24:00.000Z</published>
    <updated>2014-10-25T02:21:14.315Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/post/css-sliding-door/sliding_doors.png"></p>
<blockquote>
<p>看到这篇文章，真是让我心潮澎湃，仿佛看到刚接触前端的我，拿着本《<a href="http://www.amazon.cn/CSS%E8%AE%BE%E8%AE%A1%E5%BD%BB%E5%BA%95%E7%A0%94%E7%A9%B6-%E6%B8%A9%E8%B0%A6/dp/B00139O3TG/ref=sr_1_1?ie=UTF8&amp;qid=1382869723&amp;sr=8-1&amp;keywords=css%E8%AE%BE%E8%AE%A1%E5%BD%BB%E5%BA%95%E7%A0%94%E7%A9%B6" target="_blank" rel="external">CSS设计彻底研究</a>》慢慢的啃。当时看到前人发明的 CSS 滑动门，真是觉得相当惊艳，转眼间，这个技术距今已有10年。</p>
</blockquote>
<p>正是十年前的 2003年10月20日，<a href="http://alistapart.com/ Doug Bowman http://twitter.com/stop" target="_blank" rel="external">A List Apart</a> 的文章《<a href="http://alistapart.com/article/slidingdoors" target="_blank" rel="external">CSS 滑动门</a>》。</p>
<p>A List Apart 现在提醒读者“尽管它曾经辉煌，但此文不再代表当今的最佳实践”。的确是这样，但是让这个周年纪念悄悄过去心有不甘。</p>
<p>可能许多人没有从事 web 工作，他们或许想知道为什么一篇如何把无序列表修饰成标签的文章怎么会如此重要，因为我们现在可以使用支持更好的 CSS 属性达到同样的效果。</p>
<p>我们可以在单个元素使用多背景图片，而不是给列表项和锚点同时应用图片。我们可以使用圆角，多个内部盒子阴影（box shadow）创建时髦的 3d 标签。如果我们打算牺牲一点浏览器兼容性，甚至可以使用 CSS 渐变 。</p>
<p>但是在 Doug 之前，毫不夸张地说，没有人想出如何用 CSS 制作圆角标签。这是 A List Apart 一系列开创性文章的伊始，它不仅打破了 CSS 的限制，而且改变了 web ，被众人熟知。如果你还没读过<a href="http://alistapart.com/article/slidingdoors" target="_blank" rel="external">滑动门的文章</a>以及<a href="http://alistapart.com/article/slidingdoors2" target="_blank" rel="external">后续文章</a>，现在可以品味下了。</p>
<p>怀旧之情？是的，今天的我们是多么幸运，拥有成熟的 CSS 和浏览器兼容性，那些只是 2003 年时的梦想。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/post/css-sliding-door/sliding_doors.png"></p>
<blockquote>
<p>看到这篇文章，真是让我心潮澎湃，仿佛看到刚接触前端的我，拿着本《<a href="http://www.amazo]]>
    </summary>
    
      <category term="CSS" scheme="http://jinlong.github.io/tags/CSS/"/>
    
      <category term="滑动门" scheme="http://jinlong.github.io/tags/%E6%BB%91%E5%8A%A8%E9%97%A8/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/categories/CSS/"/>
    
      <category term="滑动门" scheme="http://jinlong.github.io/categories/CSS/%E6%BB%91%E5%8A%A8%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面向Node.js新手的7个技巧]]></title>
    <link href="http://jinlong.github.io/2013/10/17/7-tips-for-a-node-dot-js-padawan/"/>
    <id>http://jinlong.github.io/2013/10/17/7-tips-for-a-node-dot-js-padawan/</id>
    <published>2013-10-17T09:38:00.000Z</published>
    <updated>2014-11-21T07:17:04.698Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="https://medium.com/tech-talk/e7c0b0e5ce3c" target="_blank" rel="external">7 tips for a Node.js padawan</a><br>感谢 <a href="http://diwu.me/about/index.html" target="_blank" rel="external">Di Wu</a> 同学，参考了他的译文《<a href="http://diwu.me/2013/09/24/7-tips-for-a-node-dot-js-padawan/" target="_blank" rel="external">7 Tips for a Node.js Padawan</a>》，某些不妥的地方做了些许修改。</p>
</blockquote>
<p>####或许我刚入门时就想了解这些知识。</p>
<p>Node.js 开发相当有趣，相当令人满足。它有3万5千多个模块供君选择，总体而言，用 node 开发一个实际应用非常简单，并且扩展起来伸缩自如。</p>
<p>可是对于刚接触 Node.js 开发的同学，免不了遇到一些挫折。在这篇简短的文章中，我提到了一些学习 Node.js 时遇到的问题。</p>
<p>##技巧 1 ：开发环境使用 nodemon，生产环境使用 pm2</p>
<p>当你着手 Node.js  开发时，最突出的问题之一是，必须一次又一次的运行 <code>node [file].js</code> 。我开始学 node 时，这点相当令我抓狂。尤其是每次修改一点东西，都要 <code>control + C</code> 。</p>
<p>幸运的是我发现了一个非常棒的工具 <a href="https://github.com/remy/nodemon" target="_blank" rel="external">Nodemon</a> 。运行以下命令安装它：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> nodemon</span></span><br></pre></td></tr></table></figure>
<p>Nodemon 了不起呀，一旦全局安装了它，你可以通过 <code>nodemon [file].js</code> 运行 node.js 脚本。nodemon 会监控你的代码，以及所有依赖代码的变化。如此开发 Node.js ，开发效率瞬间提高。</p>
<p>生产环境呢？除非你用了 Heroku，Nodejitsu 或者其它不错的 Node.js 托管服务，否则你可以试试 EC2 或者其它的云服务，通过它们运行你的 Node.js 应用。如何保证 Node.js 应用一直运行呢？</p>
<p><a href="https://github.com/Unitech/pm2" target="_blank" rel="external">PM2</a> 像 nodemon ，用于在生产环境运行 node 应用。它会监控你的 app 变化并重新部署它们，不同之处在于，如果 PM2 遇到事故，它将立刻重启你的 node.js 应用。</p>
<p>当你的应用需要多核处理的时候，凸显出了 PM2 的优势。PM2 内部集成的“负载均衡”让你轻松指定 Node 应用运行几个实例。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app<span class="class">.js</span> -<span class="tag">i</span> max</span><br></pre></td></tr></table></figure>
<p><strong>-i</strong> 参数用来指定运行多少个实例，此例中 PM2 使用了一个常量 <strong>max</strong> 自动扩展你的 app 运转到最大核数，不要忘记 Node 平时只运行在单核上！<br><a id="more"></a></p>
<p>##技巧 2 ：Async 或者 Q</p>
<p>越早写 node.js 应用，越会尽早领略回调地狱之痛。如果你没见过，这有一个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">name, password, cb</span>)</span>&#123;</span><br><span class="line">  checkIfNameExists(name, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="keyword">return</span> cb(“error”);</span><br><span class="line">   &#125;</span><br><span class="line">   checkIfPasswordGood(password, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">     <span class="keyword">return</span> cb(“error”);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    createAccount(name,password, <span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="keyword">return</span> cb(“error”);</span><br><span class="line">     &#125;</span><br><span class="line">     createBlog(name, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span>&#123;</span><br><span class="line">      sendEmail(name, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span>&#123;</span><br><span class="line">       callback(result);</span><br><span class="line">      &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不怎么美的神奇代码的确存在，但你如何避免呢？</p>
<p>一种简单的方式是用 <code>events</code> ，我个人不建议这么做，它违背了一个函数的观点，可以用 <code>events</code> 调用只有一个用途的私有方法。</p>
<p>所以怎么做呢？有两个相互竞争的库：<code>async.js</code> 和 <code>Q</code> ，它们均可以避免回调地狱出现。</p>
<p><a href="https://github.com/caolan/async" target="_blank" rel="external">Async.js</a> 或者 “async”可以轻松执行连续或者平行的函数，不需要一层一层的嵌套。</p>
<p>下面是 Async 支持的模式，readme 有记录。想了解 async 支持的所有模式，看看它们的代码仓库。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">async.map([‘file1',’file2',’file3'], fs.stat, function(err, results)&#123;</span><br><span class="line">  // results is now an array of stats for each file</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">async.filter([‘file1',’file2',’file3'], fs.exists, function(results)&#123;</span><br><span class="line">// results now equals an array of the existing files</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">async.parallel([</span><br><span class="line">  function()&#123; … &#125;,</span><br><span class="line">  function()&#123; … &#125;</span><br><span class="line">  ], callback);</span><br><span class="line"> </span><br><span class="line">async.series([</span><br><span class="line">  function()&#123; … &#125;,</span><br><span class="line">  function()&#123; … &#125;</span><br><span class="line">  ]);</span><br><span class="line"> </span><br><span class="line">async.waterfall([</span><br><span class="line">  function(callback)&#123;</span><br><span class="line">   callback(null, ‘one’, ‘two’);</span><br><span class="line">  &#125;,</span><br><span class="line">  function(arg1, arg2, callback)&#123;</span><br><span class="line">   callback(null, ‘three’);</span><br><span class="line">  &#125;,</span><br><span class="line">  function(arg1, callback)&#123;</span><br><span class="line">// arg1 now equals ‘three’</span><br><span class="line">callback(null, ‘done’);</span><br><span class="line">&#125;</span><br><span class="line">], function (err, result) &#123;</span><br><span class="line">// result now equals ‘done’</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果我们用 async 的 <code>waterfall</code> 来修改之前的例子，代码将更加易读，再也不会涉及死亡金字塔了。</p>
<p>另一个很好的库是 <a href="https://github.com/kriskowal/q" target="_blank" rel="external">Q</a> ，这个库用到了 promises 的概念。Promise 是一个含有‘promise’方法的返回对象，他提供了一个最终返回值，非常优雅的将 javascripts 的异步特性和 node.js 紧密联系起来。</p>
<p>从 Q 的代码仓库页拿来的例子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promiseMeSomething()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>promise me 函数立刻返回一个对象，调用 <code>then</code> 将返回传入 value 值的函数。它也带一个回调函数，处理未能返回值的情况。</p>
<p>用非常整洁的方式避免了回调地狱。如果重写原来的例子，当 <code>then</code> 执行的时候才调用每个函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Q.fcall(checkIfNameExists)</span><br><span class="line">.then(checkIfPasswordIsGood)</span><br><span class="line">.then(createAccount)</span><br><span class="line">.then(createBlog)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Do something with the result</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Handle any error from all above steps</span></span><br><span class="line">&#125;)</span><br><span class="line">.done();</span><br></pre></td></tr></table></figure>
<p>如前面所说，我不喜欢创建单一目标函数。取而代之，用 “then”传递函数，仅传递一个匿名函数，当然选择权在你手中。</p>
<p>总之，当你掉入回调地狱时，是该关注下 async.js 或者 Q 了。</p>
<blockquote>
<p>“我个人喜好？一直是 Q！”</p>
</blockquote>
<p>##技巧 3 ：轻松调试 Node.js 应用</p>
<p>如果你从一个 IDE 重度集成的语言比如 java 或者 C# 转来调试 Node.js，你一定会感到很困扰。大多数新的 node 开发者采用 “flow”调试模式，你最好的帮手是 <code>console.log</code> 。</p>
<p>但是肯定有更便利的调试方式，Node.js 内置了一个调试器你可以叫它 node debug，不过我更喜欢的 <code>node-inspector</code> 。</p>
<p>它们的 github 仓库提到“Node Inspector 是使用了 Blink 开发工具的 node.js 调试工具界面（先前的 WebKit Web Inspector）。”</p>
<p>简而言之，无论你选择哪个编辑器和 chrome web tools ，node-inspector 都可以调试你的应用。多爽啊。</p>
<p>Node Inspector 可以做一些真正酷的东西，比如实时代码修改，单步调试，作用域注入和一堆很酷的功能。</p>
<p>它涉及到一些设置，可以按照<a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="external">这里</a> 的说明做。</p>
<p>##技巧 4 ：Nodefly</p>
<p>一旦你的应用正常运行，你可能会问自己，如何监控它的性能，如何通过分析确保它以最佳速度运行呢。最简单的回答是使用非常棒的 Nodefly 服务。</p>
<p>通过一行简单的代码，Nodefly 开始监控应用程序的内存泄露， 测量 redis 用了多久，mongo 查询和一堆其他很酷的东西。</p>
<p><a href="http://www.nodefly.com/" target="_blank" rel="external">http://www.nodefly.com/</a></p>
<p>##技巧 5 ：用 NPM 管理模块</p>
<p>node 最寻常的事情之一是通过 NPM 安装程序包。Node 有个神奇的包管理器，它会安装 package.json 清单文件里指定的模块。可是初学者都会遇到一件事情，package.json 文件中所有使用的模块如何保持最新。</p>
<p>总是打开 package.json 更新已安装模块的依赖属性似乎很痛苦，很多人不知道 npm 可以帮你做这些！</p>
<p>简单运行 npm install — save module_name ，npm 将自动更新带有正确模块和版本号的 package.json </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> —<span class="keyword">save</span> module_name</span></span><br></pre></td></tr></table></figure>
<p>##技巧 6 ：不要提交 node_modules 文件夹</p>
<p>我们一直谈论模块和 npm ，还有人不知道不该提交 <code>node_modules</code> 文件夹，最大的原因是没有必要提交。当别人检出你的代码，他们可以用 npm 安装所需模块。</p>
<p>你也许会说提交 node_modules 文件夹无伤大雅，但是如果检出你代码的人用跟你不同的操作系统呢，通过 npm 安装的模块是编译过的？你的应用会崩溃，检出你代码的人完全不知道为什么！</p>
<p>举例来说，当你安装过 bcrypt 和 sentimental 模块后，它们在主机上是编译过的，因为它们的原始组件是用 C 写的。</p>
<p>最优的作法是把 node_modules 文件夹加到 .gitignore 里，避免提交它。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .gitignore node_modules/*</span></span><br></pre></td></tr></table></figure>
<p>##技巧 7 ：不要忘记 return</p>
<p>刚入门的 node 开发者通常容易犯个错误，callback 回调函数后面忘加 return 。虽然有时候没什么影响，多数情况你会遇到奇怪的问题，callback 回调执行了两次。</p>
<p>看个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do</span>(<span class="params">err,result, callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line">callback(“error”);</span><br><span class="line">&#125;</span><br><span class="line">callback(“good”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>乍一看，没什么问题。如果有错误，把 “error”传入 callback，没错则传递“good”。但是调用 callback 以后并没有停止执行，会接着调用 callback(“good”) 。</p>
<p>在复杂的代码中，加上 return 会节约数小时的调试时间。</p>
<hr>
<p>Node.js 是个很赞的开发平台，如果你谨记这 7 条技巧，开发，调试和部署到生产环境时，可以节省不少时间，防止头发尽早变灰白。</p>
<p>需要 Node.js 咨询？联系 <a href="http://www.dynamatik.com/" target="_blank" rel="external">Dynamatik</a> 吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="https://medium.com/tech-talk/e7c0b0e5ce3c">7 tips for a Node.js padawan</a><br>感谢 <a href="http://diwu.me/about/index.html">Di Wu</a> 同学，参考了他的译文《<a href="http://diwu.me/2013/09/24/7-tips-for-a-node-dot-js-padawan/">7 Tips for a Node.js Padawan</a>》，某些不妥的地方做了些许修改。</p>
</blockquote>
<p>####或许我刚入门时就想了解这些知识。</p>
<p>Node.js 开发相当有趣，相当令人满足。它有3万5千多个模块供君选择，总体而言，用 node 开发一个实际应用非常简单，并且扩展起来伸缩自如。</p>
<p>可是对于刚接触 Node.js 开发的同学，免不了遇到一些挫折。在这篇简短的文章中，我提到了一些学习 Node.js 时遇到的问题。</p>
<p>##技巧 1 ：开发环境使用 nodemon，生产环境使用 pm2</p>
<p>当你着手 Node.js  开发时，最突出的问题之一是，必须一次又一次的运行 <code>node [file].js</code> 。我开始学 node 时，这点相当令我抓狂。尤其是每次修改一点东西，都要 <code>control + C</code> 。</p>
<p>幸运的是我发现了一个非常棒的工具 <a href="https://github.com/remy/nodemon">Nodemon</a> 。运行以下命令安装它：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> nodemon</span></span><br></pre></td></tr></table></figure>
<p>Nodemon 了不起呀，一旦全局安装了它，你可以通过 <code>nodemon [file].js</code> 运行 node.js 脚本。nodemon 会监控你的代码，以及所有依赖代码的变化。如此开发 Node.js ，开发效率瞬间提高。</p>
<p>生产环境呢？除非你用了 Heroku，Nodejitsu 或者其它不错的 Node.js 托管服务，否则你可以试试 EC2 或者其它的云服务，通过它们运行你的 Node.js 应用。如何保证 Node.js 应用一直运行呢？</p>
<p><a href="https://github.com/Unitech/pm2">PM2</a> 像 nodemon ，用于在生产环境运行 node 应用。它会监控你的 app 变化并重新部署它们，不同之处在于，如果 PM2 遇到事故，它将立刻重启你的 node.js 应用。</p>
<p>当你的应用需要多核处理的时候，凸显出了 PM2 的优势。PM2 内部集成的“负载均衡”让你轻松指定 Node 应用运行几个实例。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app<span class="class">.js</span> -<span class="tag">i</span> max</span><br></pre></td></tr></table></figure>
<p><strong>-i</strong> 参数用来指定运行多少个实例，此例中 PM2 使用了一个常量 <strong>max</strong> 自动扩展你的 app 运转到最大核数，不要忘记 Node 平时只运行在单核上！<br>]]>
    
    </summary>
    
      <category term="Node.js" scheme="http://jinlong.github.io/tags/Node-js/"/>
    
      <category term="Node.js" scheme="http://jinlong.github.io/categories/Node-js/"/>
    
      <category term="入门" scheme="http://jinlong.github.io/categories/Node-js/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用 CSS 实现客户端全文搜索]]></title>
    <link href="http://jinlong.github.io/2013/10/02/client-side-full-text-search-in-css/"/>
    <id>http://jinlong.github.io/2013/10/02/client-side-full-text-search-in-css/</id>
    <published>2013-10-02T09:04:00.000Z</published>
    <updated>2015-10-28T14:47:08.079Z</updated>
    <content type="html"><![CDATA[<p>前些天看到一篇文章《<a href="http://redotheweb.com/2013/05/15/client-side-full-text-search-in-css.html" target="_blank" rel="external">Client-side full-text search in CSS</a>》，个人感觉思路比较巧，跟大家分享一下。</p>
<p>总体思路：</p>
<p>使用 <strong>data-</strong> 属性用于索引，带 <strong>CSS3 选择器</strong>的动态样式表用于检索，主要用 CSS 简单实现了客户端的全文搜索。</p>
<a id="more"></a> 
<p>下面上代码：</p>
<p><a href="https://gist.github.com/fzaninotto/a37929724abdcebd935a#file-contacts-html" target="_blank" rel="external">搜索列表</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Data generated by Faker, see https://github.com/fzaninotto/Faker --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"contacts"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add text to the data-index attribute to enable full-text search --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Don't forget to lowercase it to make search case-insensitive --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"searchable"</span> <span class="attribute">data-index</span>=<span class="value">"onabednarschamberger.frank@wuckert.com1-265-479-1196x714"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dt</span>&gt;</span>First Name<span class="tag">&lt;/<span class="title">dt</span>&gt;</span><span class="tag">&lt;<span class="title">dd</span>&gt;</span>Ona<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dt</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="title">dt</span>&gt;</span><span class="tag">&lt;<span class="title">dd</span>&gt;</span>Bednar<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dt</span>&gt;</span>Email<span class="tag">&lt;/<span class="title">dt</span>&gt;</span><span class="tag">&lt;<span class="title">dd</span>&gt;</span>schamberger.frank@wuckert.com<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dt</span>&gt;</span>Phone<span class="tag">&lt;/<span class="title">dt</span>&gt;</span><span class="tag">&lt;<span class="title">dd</span>&gt;</span>1-265-479-1196x714<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"searchable"</span> <span class="attribute">data-index</span>=<span class="value">"newtoncronintorphy.dorothea@gmail.com(121)644-5577"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dt</span>&gt;</span>First Name<span class="tag">&lt;/<span class="title">dt</span>&gt;</span><span class="tag">&lt;<span class="title">dd</span>&gt;</span>Newton<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dt</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="title">dt</span>&gt;</span><span class="tag">&lt;<span class="title">dd</span>&gt;</span>Cronin<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dt</span>&gt;</span>Email<span class="tag">&lt;/<span class="title">dt</span>&gt;</span><span class="tag">&lt;<span class="title">dd</span>&gt;</span>torphy.dorothea@gmail.com<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dt</span>&gt;</span>Phone<span class="tag">&lt;/<span class="title">dt</span>&gt;</span><span class="tag">&lt;<span class="title">dd</span>&gt;</span>(121)644-5577<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- add as much data as you want --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://gist.github.com/fzaninotto/2da116a146457aa7e78c#file-full-text-search-css-html" target="_blank" rel="external">搜索代码</a></p>
<p>搜索非常简单：它利用了两个支持较好的 CSS3 选择器（<code>:not()</code> 和 <code>[attr*=]</code>），每当检索字符改变时重写样式表：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">placeholder</span>=<span class="value">"search"</span> <span class="attribute">id</span>=<span class="value">"search"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">id</span>=<span class="value">"search_style"</span>&gt;</span><span class="css"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">var</span> searchStyle = <span class="built_in">document</span>.getElementById(<span class="string">'search_style'</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'search'</span>).addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.value) &#123;</span><br><span class="line">    searchStyle.innerHTML = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// look ma, no indexOf!</span></span><br><span class="line">  searchStyle.innerHTML = <span class="string">".searchable:not([data-index*=\""</span> + <span class="keyword">this</span>.value.toLowerCase() + <span class="string">"\"]) &#123; display: none; &#125;"</span>;</span><br><span class="line">  <span class="comment">// beware of css injections!</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> CSS 选择器对比 JavaScript <code>indexOf()</code> 优势在于速度：每次按键仅改变了一个元素（&lt;style&gt;标签），而不是改变匹配的所有元素。 <code>:not()</code> 选择器，IE 9 + 均支持，想兼容 IE 8+ 只需用两个规则替换此规则。</p>
<p> <a href="http://jsbin.com/ijilage/8/edit" target="_blank" rel="external">完整的例子</a></p>
<p>支持情况：   </p>
<ul>
<li>Mobile：欧朋8+， UC， Chrome for Android   </li>
<li>PC：Chrome 29，Opera 16，Firefox 23</li>
</ul>
<blockquote>
<p>参考资料：   </p>
<ul>
<li><a href="http://redotheweb.com/2013/05/15/client-side-full-text-search-in-css.html" target="_blank" rel="external">Client-side full-text search in CSS</a>   </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/input" target="_blank" rel="external">javascript input 事件</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>前些天看到一篇文章《<a href="http://redotheweb.com/2013/05/15/client-side-full-text-search-in-css.html">Client-side full-text search in CSS</a>》，个人感觉思路比较巧，跟大家分享一下。</p>
<p>总体思路：</p>
<p>使用 <strong>data-</strong> 属性用于索引，带 <strong>CSS3 选择器</strong>的动态样式表用于检索，主要用 CSS 简单实现了客户端的全文搜索。</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://jinlong.github.io/tags/CSS/"/>
    
      <category term="全文搜索" scheme="http://jinlong.github.io/tags/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/categories/CSS/"/>
    
      <category term="全文搜索" scheme="http://jinlong.github.io/categories/CSS/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS 7 的 Safari 和 HTML5：问题，变化和新 API]]></title>
    <link href="http://jinlong.github.io/2013/09/23/safari-ios7-html5-problems-apis-review/"/>
    <id>http://jinlong.github.io/2013/09/23/safari-ios7-html5-problems-apis-review/</id>
    <published>2013-09-23T15:32:00.000Z</published>
    <updated>2014-11-21T07:23:39.084Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://www.mobilexweb.com/blog/safari-ios7-html5-problems-apis-review" target="_blank" rel="external">Safari on iOS 7 and HTML5: problems, changes and new APIs</a><br>译者：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a><br>感谢 <a href="http://weibo.com/cssmagic" target="_blank" rel="external">CSS魔法</a> 指正翻译问题</p>
</blockquote>
<p><img src="/images/post/ios7/safari.png"><br>这些天 Apple 已经推出了 iOS 7 以及 iPhone 5S 和 iPhone 5C 。Apple 面向 web 开发者仅仅发布了 10% 的所需信息，我可以说这是自 1.0 以来，<strong>bug 最多的 Safari 版本</strong>嘛。文本我将介绍新的 API 和特性，以及如果你有网站或 webapp ，马上需要处理的大多数问题。</p>
<p>##简而言之</p>
<p>没有时间读这篇长文？  </p>
<ul>
<li><strong>UI 变化</strong>：工具栏色彩，新的全屏导航问题，新的主屏图标尺寸；iPhone 未使用 <code>&lt;title&gt;</code>；可能与新手势冲突。    </li>
<li><strong>新设备</strong>：对 web 开发者而言没有任何新东西，跟 iPhone 5 相同。    </li>
<li><strong>HTML 5 标签</strong>：视频轨道，<code>&lt;progress&gt;</code>，移除对 <code>input type=datetime</code> 的支持。    </li>
<li><strong>HTML 5 API</strong> ：Page Visibility（页面可见性），AirPlay API，canvas 增强，移除对共享 Workers 的支持，Web Speech 综合 API， 无前缀的 Web Audio 和 Animation Timing， Mutation Observer 和其它小调整。WebSQL 使用超过 5Mb 的大问题。    </li>
<li><strong>CSS</strong> ：Regions，Sticky 定位， FlexBox，ClipPath，无前缀的 Transitions 和 其它优化。    </li>
<li><strong>主屏 webapps</strong> ：一些严重的问题（比如，不支持 <code>alert</code> ！）    </li>
<li><strong>原生 webapps</strong> ：Web View 分页，原生 app 的 JavaScript 运行时，以及视频播放新功能。<a id="more"></a>
##新浏览器</li>
</ul>
<p>Safari ，像其它原生应用一样，在用户界面和体验方面已经迎来大幅更新。这些变化会影响用户与网站的交互，以及 webapp 的反应。</p>
<p>###工具栏色彩</p>
<p>Safari 的工具栏已经着色（iPhone 上的 URL 条和底部工具条），颜色基于：<br>a) 加载页面时的背景色<br>b) 当滚动页面时，工具条后面的当前主色</p>
<p>如果你想“hack”初始颜色，与 body 背景不同，并不需要往 HTML 里面加无用的东西（比如新容器），仅需使用下面的 CSS hack:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line"><span class="rule"><span class="attribute">background-color</span>:<span class="value"> blue</span></span>; <span class="comment">/* 用于着色 */</span></span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(to bottom, green <span class="number">0%</span>, green <span class="number">100%</span>)</span></span>; <span class="comment">/* 用于 body */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我们定义了背景色和背景图像；内容将用图像（本例是渐变，也可以是 data URI 1px 图像）。以下例子，前两个用了同样的颜色（仅用背景），最后一个工具栏颜色和 body 颜色不同。<br><img src="/images/post/ios7/tint.png"></p>
<p>###全屏和 HTML 5 应用、游戏的大问题</p>
<p>如今 iPhone 和 iPod touch 上的网页浏览总是全屏。当用户在垂直模式（portrait ）滚动页面时，底部工具栏将消失，URL 栏变成一个小的半透明的条出现在顶部。水平模式（landscape），用户滚动页面底部工具栏和主域名栏同时消失，变成完整的全屏模式。</p>
<p>工具栏和完整的 URL 栏将再次出现：<br>1) 用户轻击页面顶部，或者<br>2) 用户把页面滚回顶部</p>
<p>下面图片显示了水平和垂直模式，滚动页面前后的 UI 变化：<br><img src="/images/post/ios7/fullscreen2.png"></p>
<p>问题是：  </p>
<ul>
<li>当工具栏出现/消失时，<code>resize</code> 事件不会触发   </li>
<li>我们无法探测 JavaScript 或者 media queries 的变化    </li>
<li>老技巧 <code>window.scrollTo</code> 隐藏地址栏不再工作；因此，没有用户介入滚动页面，没有办法隐藏地址栏或工具栏了。  </li>
<li>如果没有使用原生的滚动，会遇到问题（细节见下面）。   </li>
<li>9月19日更新: canvas 底部无法交互（细节如下）</li>
</ul>
<p>如果你使用“非原生”的滚动布局，比如 iframe，<code>overflow:scroll</code> ，或者基于 JavaScript 的滚动组件，工具栏永远不会隐藏。更大的问题是，用户一旦进入全屏模式，将无法返回正常模式。比如，以水平模式看 Twitter 网站（使用 <code>overflow:scroll</code>），滚动区域少于屏幕的 50%时，工具栏再也不会消失。</p>
<p><img src="/images/post/ios7/twitter-300x171.png"></p>
<p>说实话，如果你从垂直模式切换到水平模式，有时会变成全屏无法滚动，但是你无法避免。你需要测试它们找到解决办法。</p>
<p>滚动出现工具栏的问题同样出现在 HTML5 游戏。Beta 1 期间, Apple 论坛就有许多人反馈这个问题，比如：</p>
<ul>
<li><strong>Richard Davey</strong>：对我们而言这的确是个问题，我们 BBC 网站上的所有游戏显示都出了问题（试下上面的<a href="http://www.bbc.co.uk/cbeebies/" target="_blank" rel="external">所有例子</a>）。移除了全屏按钮，废弃了’hack’，我们无法让游戏全屏。游戏挤在 iPhone 浏览器中间的一个小窗口。(…) 水平模式打开页面，仅有 2/3 的屏幕可用，控制区域占用了 1/3 的屏幕。(…) </li>
<li><strong>TheFlashGuy</strong>：在水平模式，我们需要控制浏览器工具栏的显示/隐藏。用户点击屏幕顶部或底部，太容易进入这个模式了，此模式破坏了许多网站和 web app，因为它们主要的 ui 导航元素习惯放在内容区域的顶部或底部。</li>
</ul>
<blockquote>
<p>“你的网站无法获得真正的全屏体验。这点反而成了 iOS 6 喜人的一面了，失去这点是主要的倒退。Richard Davey”</p>
</blockquote>
<p><img src="/images/post/ios7/catchme.png"></p>
<p>##底部工具栏和交互元素（9月19日 更新 ）</p>
<p>一旦进入全屏模式，页面底部就不可交互。此问题影响到全屏模式（滚动以后）视口底部的任何工具栏，链接或者表单项。比如，底部固定的工具栏。</p>
<p>当你点击视口的这部分，仅仅触发了全屏驳回动作。因此，Safari 工具栏出现，需要再次点击交互项触发动作，因此两次点击才触发一个按钮。可以在<a href="http://view.jquerymobile.com/master/demos/widgets/fixed-toolbars/footer-persist-a.php" target="_blank" rel="external">这</a> 测试，滚动然后点击底部工具栏。</p>
<p>比如，你想点击相册下一张图片，仅仅打开了 Safari 工具栏，你需要再次点击相册执行相应操作。<br><img src="/images/post/ios7/bottom-toolbar.png"></p>
<p>###标题</p>
<p>下一个巨大的变化是 iPhone 的 Safari UI 的 title 标题区域。iPhone 的页面标题被当前的域名取代（见下图），页面标题只在浏览选项卡时可用。<br><img src="/images/post/ios7/page-title.png"></p>
<blockquote>
<p>“在 iPhone iOS 7 上，当用户浏览网页时，页面的 <code>&lt;title&gt;</code> 将被忽略。”</p>
</blockquote>
<p>iPad 没有全屏模式；工具栏和标题栏总是可见。</p>
<p>###添加到主页按钮</p>
<p><img src="/images/post/ios7/share.png"></p>
<p>整个 UI 已经改变，包括新图标取代<strong>分享图标</strong>，因此每个网站都推荐用户添加到书签，或者添加到主屏，它们需要更新图标。</p>
<p>###手势</p>
<p>操作系统和 Safari 如今提供新的手势，如果你自己检测手势的话，新手势可能影响你的网站。   </p>
<p>A) <strong>控制中心</strong>：当你从屏幕底部向上滑时出现。这一版，由于全屏，屏幕底部可能是网站的一部分，而不是 Safari 工具栏。因此，<strong>建议用户从 canvas 的底部向上滑时，需要多加小心</strong>。<br>B) <strong>历史手势</strong>：第二个可能有问题的手势是从边界左滑，右滑；Safari 将触发浏览历史的后退和前进动作，像 Windows 8 模式的 IE。如果你引导用户左滑或右滑，并且边缘没有一点边距的话，历史手势可能与网站手势发生冲突（不过说实话，Chrome 存在同样的问题）。</p>
<p>在单页 webapp （Safari 内）中，当使用 History API 或者 hash 技术管理应用状态时，此问题相当严重。当用户使用后退手势时，他将看到同一应用的两个图像，可是用户在同一个应用中。当你使用 side-by-side （并排）滚动手势时，比如 Yahoo! 主页，如果用户从边界触发手势（它甚至触发了 touch 事件），可能有使用问题 ：</p>
<p><img src="/images/post/ios7/gestures.png"></p>
<p>当用户手势返回时，手势和回退动画（向右滑）也会跟一些 UI 框架发送冲突，比如 jQuery Mobile 或者 Sencha Touch，两种动画都会渲染（浏览器动画，然后是框架动画）。此外，当前一页在左侧并滚动到特定位置，滑动动画的快照是正常的，但是页面从顶部加载，并未保持原来的滚动位置。</p>
<p>没有办法阻止这些手势，因为它们是由 OS （操作系统）或者浏览器自身管理的。</p>
<p>非常希望，历史手势在主屏 webapp 或 UIWebViews （比如 PhoneGap 应用）上是禁用的。</p>
<p>###图标尺寸</p>
<p>在 7.0 中，新的系统图标比前一版本大 5% ，比如在 Retina iPhone 设备用 120x120 代替先前的 114x114 。如今，系统图标也变成扁平化，不再需要闪亮的效果，因此我们可能想更新图标匹配新设计。我们可以用同样的带新尺寸的 <strong>apple-touch-icon</strong> link 。</p>
<p><strong>apple-touch-icon</strong> precomposed 版仍旧支持，只不过图标没有闪亮的效果了。如果我们定义两种，precomposed 版优先。</p>
<p>iOS 7 可用的图标尺寸是：   </p>
<ul>
<li>iPhone / iPod Touch 视网膜屏: <strong>120x120</strong>    </li>
<li>iPad 非视网膜屏（iPad 2 和 iPad mini）: <strong>76x76</strong>    </li>
<li>iPad 视网膜屏: <strong>152x152</strong></li>
</ul>
<p>我们需要记住所有非视网膜屏的 iPhone-因子设备无法使用 iOS 7 。如果我们没提供新的图标尺寸，设备还会用 iOS 6 相关的图标。如果我们想覆盖所有可能的 iOS 图标，使用下面的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非视网膜 iPhone 低于 iOS 7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"icon57.png"</span> <span class="attribute">sizes</span>=<span class="value">"57x57"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 非视网膜 iPad 低于 iOS 7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"icon72.png"</span> <span class="attribute">sizes</span>=<span class="value">"72x72"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 非视网膜 iPad iOS 7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"icon76.png"</span> <span class="attribute">sizes</span>=<span class="value">"76x76"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视网膜 iPhone 低于 iOS 7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"icon114.png"</span> <span class="attribute">sizes</span>=<span class="value">"114x114"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视网膜 iPhone iOS 7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"icon120.png"</span> <span class="attribute">sizes</span>=<span class="value">"120x120"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视网膜 iPad 低于 iOS 7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"icon144.png"</span> <span class="attribute">sizes</span>=<span class="value">"144x144"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视网膜 iPad iOS 7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"icon152.png"</span> <span class="attribute">sizes</span>=<span class="value">"152x152"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>###书签和收藏夹</p>
<p>书签也用了新图标（看下面左侧的图），貌似无法修改这些图标和文字。</p>
<p>当你点击地址栏时出现收藏夹（下面右侧图），看起来像是用了 <strong>apple-touch-icon</strong> link ，但是没有遵循任何尺寸原则，并且我发现了怪异现象，比如一些带正确的 link 元素的网站，收藏夹却不显示图标。XXXX</p>
<p><img src="/images/post/ios7/favorites2.png"></p>
<p>##新设备</p>
<p>过几天，iPhone 5S 和 iPhone 5C 就可以在市场上买到了，从 web 开发的观点看，好消息是它们确实跟 iPhone 5 一模一样。同样的屏幕尺寸，同样的像素密度，同样的功能。它们也许快一些，但是从编码的角度，完全不必担心。</p>
<p>新的 Touch ID 特性（指纹识别），网站还无法使用，以 JavaScript 开发者的观点看，64位 CPU 不会改变什么。也就是说，iOS 模拟器有能力模拟 64位 CPU。</p>
<p>##HTML5 标记支持</p>
<p>###视频轨道</p>
<p>HTML5 video 元素现在支持 <strong>track</strong> 子元素，用于subtitles （字幕）或者关闭 captions （解说字幕）。支持多语言，可以通过视频播放器的一个选择器选择它。用户可以改变语言，或者在轨道选择器禁用 captions （解说字幕）。</p>
<p><img src="/images/post/ios7/cc1.png"></p>
<p>对于所有可能的轨道类型（<code>kind</code> 属性），仅支持 captions（解说字幕） 和 subtitles（字幕），我们必须在 <code>srclang</code> 属性以 <a href="http://en.wikipedia.org/wiki/ISO_639-1" target="_blank" rel="external">ISO 格式</a> （比如 English 是 en）定义语言。当用户可以听到声音但不理解语言时，字幕非常有用。当用户无法听到声音时，解说字幕很有用，它包含了当前发生情况的额外信息（比如背景音乐正在播放）。</p>
<p><img src="/images/post/ios7/cc2ch.png"></p>
<p>定义轨道的 <code>label</code> 属性毫无价值，因为 iOS 忽视它，如果 kind 值使用 captions 代替 subtitles ，菜单中带有可选的 CC 后缀的语言名取代了 label。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">source</span> <span class="attribute">src</span>=<span class="value">"myvideo.mp4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">track</span> <span class="attribute">kind</span>=<span class="value">"captions"</span> <span class="attribute">src</span>=<span class="value">"my-captions-en.vtt"</span> <span class="attribute">srclang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">track</span> <span class="attribute">kind</span>=<span class="value">"subtitles"</span> <span class="attribute">src</span>=<span class="value">"my-captions-fr.vtt"</span> <span class="attribute">srclang</span>=<span class="value">"fr"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以通过 JavaScript API 访问轨道，我们可以遍历所有轨道文件。这点可能仅对 iPad 有用，在 iPad 上，我们可以在 web canvas 里真正嵌入一段视频，iPhone 上永远是全屏模式。</p>
<p>track 元素遵循跨域策略，默认情况，视频和轨道必须是同源。使用 JavaScript 可以探测 track 是否可用，用到 webkitHasClosedCaptions ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCC = <span class="built_in">document</span>.querySelector(<span class="string">"video"</span>).webkitHasClosedCaptions;</span><br></pre></td></tr></table></figure>
<p>还可以通过 <code>webkitClosedCaptionsVisible</code> （布尔属性）改变每个 video 元素的 captions （解说字幕）的可见性。</p>
<p>字幕样式</p>
<p>iOS 7 支持新的 <strong>::cue</strong> 伪元素，我们仅可以改变 text-shadow, opacity 和 outline。所有其它属性比如颜色和字体样式不支持。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="pseudo">::cue</span> <span class="rules">&#123; <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0.8</span> </span></span></span>&#125;</span><br></pre></td></tr></table></figure>
<p>更多关于 <a href="http://www.html5rocks.com/en/tutorials/track/basics/" target="_blank" rel="external">Track 元素和 API</a> （记住 Safari 并非支持所有 API）。</p>
<p>###PROGRESS 和 OUTPUT 元素</p>
<p>已支持 <code>&lt;progress&gt;</code> 元素，基于 max 和 value 创建进度条。如同其它浏览器，不支持模糊进度，当我们知道明确的进度值时才适用。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;progress <span class="built_in">max</span>=<span class="string">"100"</span> <span class="built_in">value</span>=<span class="string">"40"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>已支持 <code>&lt;output&gt;</code> 元素，没感觉有什么特别 :) 。</p>
<p>貌似支持 <code>&lt;meter&gt;</code> ，所有内容会被忽略，我感觉有 bug 。</p>
<p>###移除：datetime input type</p>
<p>追随 Google Chrome ，iOS Safari <strong>不再支持 datetime 的 input 类型</strong>，它将退化成 text 。这个类型将被标准废弃，标准赞成使用两个 input ， date 和 time 达到同样的目的。问题是 datetime 兼容 iOS 5.0 至 iOS 6.1 ；如果使用它要多加小心！</p>
<p>week input 类型仍没支持，回退成 text 类型，渲染成一个不可交互的控件。</p>
<p><img src="/images/post/ios7/datetime.png"></p>
<blockquote>
<p>“如果你正在使用 input type=’datetime’ ，你应该马上采取行动，因为它被渲染成 text 类型。”</p>
</blockquote>
<p>###无缝 iframe</p>
<p>在 iOS 7 上，新的布尔属性 <code>seamless</code> 用于创建无边界的 iframe 。iframe 将没有滚动条，默认情况，它会取到内部内容的高度，作为 DOM 中其它块级元素的使用空间。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">seamless</span> <span class="attribute">src</span>=<span class="value">"mypage.html"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>##HTML5 JavaScript API</p>
<p>先以坏新闻开头：<strong>未支持 WebGL，FullScreen，WebRTC， getUserMedia 或者 IndexedDB</strong> 。</p>
<p>可用的新 API ：   </p>
<ul>
<li>Page Visibility API   </li>
<li>XHR 2.0 完全实现   </li>
<li>Video tracks API (已覆盖)   </li>
<li>AirPlay API   </li>
<li>CSS Regions API    </li>
<li>Canvas 增强   </li>
<li>移除对 Shared Workers （共享 Workers ） 的支持   </li>
<li>WebSpeech 合成 API</li>
</ul>
<p>iOS 7 的 Page Visibility API 带有 -webkit- 前缀，用于探测 tab 标签在前台还是后台。你可以测试<a href="http://mobilexweb.com/ts/api/page.html" target="_blank" rel="external">这个 demo</a> 。XMLHttpRequest 2.0 规范完全兼容意味着我们可以把 ‘<strong>blob</strong>‘ 作为响应。Video tracks API 已经快速覆盖，意味着我们可以检索和导航所有媒体元素的所有轨道内容。</p>
<p>CSS Regions API 作为 CSS Regions 规范的一部分，主要带前缀的 <code>webkitGetFlowByName</code> 函数对每个 DOM 元素都可用。</p>
<p>Canvas 2D Drawing API，canvas context 现在有 <code>globalCompositeOperation</code> 属性，当绘制不同的层时，我们可以定义混合模式（比如正片叠底）。已有新的 Path 构造器，在 canvas context 绘制的路径可以保存，用于后期使用，避免直接画在画布上。</p>
<p>###AirPlay API</p>
<p>AirPlay API 需要解释。AirPlay 是 Apple 的无线流媒体解决方案，可以在不同设备间传递流媒体内容，Apple TV 已经使用。Safari 已经支持 <strong>x-webkit-airplay</strong> HTML 属性，用于定义是否使用 AirPlay ，之前我们无法通过 HTML5 定制体验。</p>
<p>API 可以通过 AirPlay 定制播放器，获取流的内容和事件。每个 video 元素都有 <strong>webkitplaybacktargetavailabilitychanged</strong> 和 <strong>webkitcurrentplaybacktargetiswirelesschanged</strong> 。让我们见识下不用下划线，驼峰或者其它方式命名事件有多可怕 :S 。当新的 AirPlay 对象（比如 Apple TV）启用，或者禁用，第一个事件触发；当重放状态改变时，第二个事件触发。</p>
<blockquote>
<p>“我认为 <strong>webkitcurrentplaybacktargetiswirelesschanged</strong> 创造了记录：迄今最长的 JavaScript 事件名。”</p>
</blockquote>
<p>如果有个流对象可用，我们可以提供一个按钮，选择后调用视频的 <strong>webkitShowPlaybackTargetPicker</strong> 函数。</p>
<p>仍旧没有官方的 API 文档，你可以看这视频 <a href="https://developer.apple.com/wwdc/videos/index.php?id=600" target="_blank" rel="external">‘What’s New in Safari and WebKit for Web Developers’</a> ，WWDC 会议的视频提到了这个话题。</p>
<p>###后台执行</p>
<p>有几个后台执行的用例：   </p>
<ul>
<li>如果用户切换了 tab （标签选择屏），你的代码仍旧执行，但是图像静止了   </li>
<li>如果用户切换了应用（多任务模式），你的代码仍旧执行，图像更新   </li>
<li>如果 Safari 在前台，你的网站在后端标签，你的代码冻结，Safari 有最新执行的快照用于 UI 显示   </li>
<li>Safari 在后台你的代码冻结</li>
</ul>
<p>###WebSpeech 合成 API</p>
<p>9月19日更新：API 能起作用，因此是官方支持。</p>
<p>WebSpeech API 可以让网站记录和转录音频，还可以把文字合成到声音中，使用操作系统内部声音播放。</p>
<p>iOS Safari 仅包含合成 API（文字到语音），没有从麦克风听音频的 API 。使用 <code>speechSynthesis.getVoices()</code> ，你可以在一个真实设备，查询所有不同语言的可用声音，它返回 36 种声音（有时刷新页面返回 0，感觉像 bug ）。在英语方面，使用 <code>en-US</code> 是女声，使用 <code>en-GB</code> 是男声。在语音识别方面我不是专家，但是感觉声音 API 不同于 Siri ，iOS 7 的 Siri 听起来更自然。</p>
<p>让 JavaScript 通过你的网站开口说话，可以使用默认语言的快捷版，或者定义不同的属性像以下例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">speechSynthesis.speak(<span class="keyword">new</span> SpeechSynthesisUtterance(<span class="string">"Hello, this is my voice on a webpage"</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> speech = <span class="keyword">new</span> SpeechSynthesisUtterance();</span><br><span class="line">speech.text = <span class="string">"Hello"</span>;</span><br><span class="line">speech.volume = <span class="number">1</span>; <span class="comment">// 0 to 1</span></span><br><span class="line">speech.rate = <span class="number">1</span>; <span class="comment">// 0.1 to 9</span></span><br><span class="line">speech.pitch = <span class="number">1</span>; <span class="comment">// 0 to 2, 1=normal</span></span><br><span class="line">speech.lang = <span class="string">"en-US"</span>;</span><br><span class="line">speechSynthesis.speak(speech);</span><br></pre></td></tr></table></figure>
<p>通过 <code>SpeechSynthesisUtterance</code> 对象可以绑定一些事件，比如 start 和 end ，但是不要在事件内部用 alert ，你的 Safari 将未响应（不要问我为什么）。</p>
<p>可以说出来的字符串可以是无格式的文本，标准也支持 <a href="http://www.w3.org/TR/speech-synthesis/" target="_blank" rel="external">SSML 格式（语音合成标记语言）</a>  的 XML 文档，iOS Safari 仅阅读 XML :) 。</p>
<p>记住 <strong>Speech 合成 API 仅作用于用户明确的行为</strong>，比如点击一个按钮，因此你不能在 onload 或者基于时间坐标发起语音。用 iOS 7 设备试试这个<a href="http://mobilexweb.com/ts/api/speech.html" target="_blank" rel="external">在线 demo</a> 。</p>
<p>###其它变化</p>
<ul>
<li>MutationObserver   </li>
<li>无前缀的 Animation Timing API （也被称为 requestAnimationFrame）   </li>
<li>无前缀的 <strong>transitionend</strong> 事件名    </li>
<li>无前缀 URL（?）   </li>
<li>无前缀 WebAudio API 及新的高级功能   </li>
<li>新的 DOM 属性 <code>hidden</code> 和 <code>visibilityState</code></li>
<li>支持 window.doNotTrack</li>
</ul>
<p>###WebSQL bug</p>
<p>使用 <strong>WebSQL API</strong> ，当创建的数据库大于 5Mb 时，会有大问题（DOMException）。先前版本，用户许可限制是 50Mb。因为 bug ，仅仅使用 5Mb ，用户将收到许可对话框。尽管用户给予权限占用更多容量，但它的确是一个<strong>很大的 bug</strong>。</p>
<p>9月19日更新: 根据纽约时报的 tarobomb ，当你首次创建数据库，如果请求容量小于 5Mb，然后想存更多数据（大于 50Mb）时，合适的确认框出现（首次 10Mb，然后 25Mb，最终 50Mb），你最终能储存超过 5Mb 的数据。</p>
<p>##CSS 支持</p>
<p>支持新的规范（大部分有 webkit 前缀）：</p>
<ul>
<li>Sticky 定位   </li>
<li>CSS Regions   </li>
<li>CSS Grid Layout (not working)   </li>
<li>CSS FlexBox    </li>
<li>动态字体类型</li>
</ul>
<p>###Sticky 定位</p>
<p>Sticky 定位是新的实验特性，可以在视口中固定一个元素，当它的父容器移出可视区域时消失（通常在滚动操作后触发）。它像是混合定位：当 static 定位元素移出视口时变成 position: fixed 。如果有多个 sticky 元素，它们会聚集到同一区域（定义同样位置属性的话），当滚动到类似原生 UITableView 部分时，可以做个不错的效果。</p>
<p>9月19日更新：<a href="https://twitter.com/zachleat/status/362588551847755776" target="_blank" rel="external">一些报告</a> 显示这一特性在 6.1 就可用了（但是在社区没有找到资料，因此我在这提一下）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">h1</span> <span class="rules">&#123; <span class="rule"><span class="attribute">position</span>:<span class="value"> -webkit-sticky</span></span>;   <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">10px</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<p>你可以试试这个 <a href="http://html5-demos.appspot.com/static/css/sticky.html" target="_blank" rel="external">demo</a> 。<br><img src="/images/post/ios7/sticky1.png"></p>
<p>###CSS Regions</p>
<p><a href="http://dev.w3.org/csswg/css-regions/" target="_blank" rel="external">CSS Regions</a> 规范是 Adobe 提的，我们可以创建类似杂志设计，通过不同的容器排版内容。由于屏幕尺寸的性质，针对 iPad 网站和 webapp，我们将使用新的流原理。</p>
<p>在 iOS 上，选择不同区域的内容是不允许的。CSS Exclusions 可以定义区域的形状，通常情况下，它和 CSS Regions 是好伙伴，但它还不可用。</p>
<p>你可以试试这些<a href="http://codepen.io/collection/jabto" target="_blank" rel="external">在线 demo</a> 。</p>
<p>###CSS Grid Layout</p>
<p><a href="http://dev.w3.org/csswg/css-grid/" target="_blank" rel="external">CSS Grid Layout</a> 是 W3C 的新布局规范（由微软提出，IE 10 已经实现）。所有新的 CSS 属性（-webkit-grid-X）都可用，但我无法使用 display: grid 或者 display: -webkit-grid 。我不确定是否有其它方式启用它，或者它未完全实现。</p>
<p>###CSS FlexBox</p>
<p>CSS FlexBox 的最终规范出来了，水平/垂直定位元素时，我们可以不用浮动和清除浮动了。使用时我们应该给容器加个 <strong>display: -webkit-flex</strong>，然后应用不同的属性。</p>
<p>###动态字体</p>
<p>iOS 7 支持动态字体这种新字体类型，用于调整粗细，字间距和行距，基于当前字体提升易读性。我们可以把此新特性用于 HTML，使用新的 <strong>-apple-</strong> 前缀（也许因为 webkit 将来不打算使用前缀？）。有一长串的常量，比如 -apple-system-headline1，-apple-system-body 和 -apple-system-caption1 。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">h1</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font</span>:<span class="value"> -apple-system-headline1 </span></span></span>&#125;</span><br><span class="line"><span class="tag">p</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font</span>:<span class="value"> -apple-system-body </span></span></span>&#125;</span><br></pre></td></tr></table></figure>
<p>###其它 CSS 改进</p>
<p>media queries 的 <strong>resolution</strong> 属性还是没支持，有些新东西，比如可以查询 <strong>min-color-index</strong> 和 <strong>max-color-index</strong> ，虽然没什么用吧 :) </p>
<p>还有一些次要更新，包括：</p>
<ul>
<li>无前缀的 CSS Transitions （和 <code>transitionend</code> 事件）   </li>
<li>CSS Clip Path 基于形状剪裁内容，包括圆形，矩形和多边形 </li>
<li>字体的 Kerning 和 Ligatures 默认启用 </li>
<li>Background  背景属性更兼容不同的值 </li>
<li>box-decoration-break: slice/clone </li>
<li>tab-size 样式 </li>
<li>overflow-wrap: normal/hypernate/break-word </li>
<li>支持 ch 和 vmax 单位 </li>
<li>mask-type: alpha </li>
<li>新的伪元素 ::cue 在 video 轨道部分已提到 </li>
<li>-webkit-background-composite 属性（但是我试了不起作用）</li>
</ul>
<p>##主屏 webapp</p>
<blockquote>
<p>“如果你正在用主屏 webapp ，有个不幸的消息：此平台的此版本有太多 bug 了。”</p>
</blockquote>
<p>唯一的好消息是，当全屏时，貌似没有 WebSQL 存储限制了；不需要用户的许可。</p>
<p>大问题<br>主屏 webapp 有不少大问题：</p>
<ul>
<li><strong>标准的对话框无法使用了</strong>，比如 <code>alert</code>, <code>confirm</code> 或 <code>prompt</code> 。 </li>
<li><strong>webapp 无法打开外部的 URI</strong> ，比如 Safari 里的网站，打电话，打开 AppStore 等。任何 URI 都会忽略。 </li>
<li><strong>如果安装超过4个 app ，主屏会发生奇怪的事情</strong>，比如一个 webapp 取代了另一个。你会看到同样 webapp 的副本。同一时间打开不同的 webapp 时也发生同样的事情。在你的设备试试访问 app.ft.com，安装 webapp ；到 pattern.dk/sun，安装 webapp ；重复操作几次，你会发现主屏乱了。重启设备貌似可以解决问题。 </li>
<li>垂直模式输入文本，select 或者 日期控件获得焦点，media queries 将把方向变成水平，resize 事件触发。此情况出现在主屏 webapp 和 Web Views ，Safari 没事（bug?）。 </li>
<li>9月19日更新：如果使用 Application Cache ，通过 hash 或其它技术管理状态，历史对象将不保存你的导航历史，因此 <code>history.back()</code> 将不起作用，<code>history.length</code> 永远是 1 。（多谢 10+ 以上的人报告此问题！）</li>
<li>9月19日更新：当你安装图标到主屏，你的网站和 webapp 之间的 Cookies 无法互通（出于身份验证的目的）。直到 6.1 才有的功能现在没有了。（感谢 Joseph Pearson 报告此问题；<a href="http://test.monoclejs.com/test/bugs/ios-cookies/" target="_blank" rel="external">测试用例在此</a> ）</li>
</ul>
<p>###状态栏</p>
<p>如果你没有提供 <strong>apple-mobile-web-app-status-bar-style</strong> meta 标签，或者你提供了一个默认值，状态栏将变黑，因此… 屏幕只会有个黑色区域（一些设备仅有电池图标）。用户无法看到状态栏的时钟和其它图标。</p>
<p>黑色值并不是 iOS 7 全屏模式的新样式，如果你定义 <strong>apple-mobile-web-app-status-bar-style</strong> 的值为 <strong>black-translucent</strong> ，它不再是黑的，遵循 app 全屏模式，它变得完全透明。不幸的是， 貌似没有办法定义背景清除还是黑色，因此我们需要测试图标和时间跟背景好不好区分。更新：文字貌似总是白的。</p>
<p>下面的图片可以看到默认状态栏，black 值和 black-translucent 值在 iOS 7 的效果。<br><img src="/images/post/ios7/statusbar2.png"></p>
<p>###启动图片和多任务管理</p>
<p>对于新的多任务系统，有主屏 webapp 时，系统用白色图片，而不是启动图片，并不是 app 当前状态的预览。唯一例外是，当 webapp 仍旧是激活状态时 ，你可以看正确的快照。以下例子，我们可以看到 Financial Times webapp 有白色快照，只有当它是激活状态时才有正确的启动图片。<br><img src="/images/post/ios7/multitask.png"></p>
<p>幸运的是 iPhone 5 的主屏 webapp 没 bug ，它们是 letterboxing 应用（它被发现后的一年）。我们不再需要视口 hack 解决方案了。</p>
<p>##原生 webapp 开发</p>
<p>如果你开发 hybrid 混合（原生 webapp ）应用，比如 Apache Cordova (PhoneGap) 应用，有一些消息告诉你。首先，还没有 Nitro 引擎。</p>
<p>###Paginate （随意翻阅）模式</p>
<p>当在原生应用中，使用 UIWebView 实现丰富内容时，或者对于原生 webapp （hybrid），我们可以为了电子书阅读体验使用 <strong>Paginate</strong> （随意翻阅）特性，避免出现垂直滚动条（类似 Windows 8 应用体验）。如果应用显示动态加载内容，这一特性是完美的，我们不能预先优化分页。有不同的 Objective-C 属性配置分页过程。要启用它，需要这么做：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myWebView.paginationMode = UIWebPaginationModeLeftToRight<span class="comment">;</span></span><br><span class="line">myWebView.paginationBreakingMode = UIWebPaginationBreakingModePage<span class="comment">;</span></span><br><span class="line">myWebView.gapBetweenPages = 50<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这些属性将把 web view 里的 HTML 文档转换成分页模式（分成水平方向页面）。</p>
<p>###其它改进</p>
<ul>
<li>对于原生开发（不一定使用 Web View），iOS SDK 现在包含了 JavaScript 运行时：JavaScript Core 框架，把 Objective-C 包装成标准的 JavaScript  对象。我们可以用这个框架运行 JavaScript 代码，解析 JSON 。 </li>
<li>Web View 新属性，HTML 5 视频现在有了内联回放模式，代替默认的全屏模式。 </li>
<li>Web View 新属性，在原生 webapp 里，可以启用视频自动播放。 </li>
<li>iOS 7 也有 SafariServices 框架，以编程方式添加 URL 到 Safari 阅读列表比较有用。</li>
</ul>
<p>##远程调试</p>
<p>如果你有 MacOS 就可以和 iOS 设备进行远程调试，必须更新 Safari 到 6.1 ，更新 iTunes 到 11.1 ，才能和 iOS 7 设备通讯。写此文时，Safari 6.1 仅仅是<a href="https://developer.apple.com/downloads/index.action?name=Safari%206.1" target="_blank" rel="external">预览版</a> 。</p>
<p>内部调试的功能和先前版本一致，用户界面变了许多，设计更简洁。<br><img src="/images/post/ios7/Screen-Shot-2013-09-18-at-4.02.56-PM.png"></p>
<p>##还未支持</p>
<p>列表很庞大，因此我列举一些 Mac 版 Safari 7 公布的特性，但是 iOS Safari 没支持的特性：</p>
<ul>
<li>Web Speech API （支持，但在 iOS 无法良好工作）</li>
<li>网站推送通知。对 iOS 而言将是很好的补充，但是仅有 Mac OS 支持。</li>
<li>背景混合模式 </li>
<li>Grid Layout （栅格布局）（支持，但在 iOS 无法良好工作）</li>
</ul>
<p>##除此之外？</p>
<p>本文大部分的 bug 和问题是数月前在私人论坛提出的，许多人已经发送 bug 报告，他们拼命在论坛找解决方案。难以置信 Apple 并没有给 web 开发者答复，他们没有执行一些基本的测试套件，从中发现一些 API bug 。</p>
<p>你是否发现其它的 API 或支持情况？其它 bug ？欢迎在下方随意添加评论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://www.mobilexweb.com/blog/safari-ios7-html5-problems-apis-review">Safari on iOS 7 and HTML5: problems, changes and new APIs</a><br>译者：<a href="http://weibo.com/newwave">涂鸦码龙</a><br>感谢 <a href="http://weibo.com/cssmagic">CSS魔法</a> 指正翻译问题</p>
</blockquote>
<p><img src="/images/post/ios7/safari.png" /><br>这些天 Apple 已经推出了 iOS 7 以及 iPhone 5S 和 iPhone 5C 。Apple 面向 web 开发者仅仅发布了 10% 的所需信息，我可以说这是自 1.0 以来，<strong>bug 最多的 Safari 版本</strong>嘛。文本我将介绍新的 API 和特性，以及如果你有网站或 webapp ，马上需要处理的大多数问题。</p>
<p>##简而言之</p>
<p>没有时间读这篇长文？  </p>
<ul>
<li><strong>UI 变化</strong>：工具栏色彩，新的全屏导航问题，新的主屏图标尺寸；iPhone 未使用 <code>&lt;title&gt;</code>；可能与新手势冲突。    </li>
<li><strong>新设备</strong>：对 web 开发者而言没有任何新东西，跟 iPhone 5 相同。    </li>
<li><strong>HTML 5 标签</strong>：视频轨道，<code>&lt;progress&gt;</code>，移除对 <code>input type=datetime</code> 的支持。    </li>
<li><strong>HTML 5 API</strong> ：Page Visibility（页面可见性），AirPlay API，canvas 增强，移除对共享 Workers 的支持，Web Speech 综合 API， 无前缀的 Web Audio 和 Animation Timing， Mutation Observer 和其它小调整。WebSQL 使用超过 5Mb 的大问题。    </li>
<li><strong>CSS</strong> ：Regions，Sticky 定位， FlexBox，ClipPath，无前缀的 Transitions 和 其它优化。    </li>
<li><strong>主屏 webapps</strong> ：一些严重的问题（比如，不支持 <code>alert</code> ！）    </li>
<li><strong>原生 webapps</strong> ：Web View 分页，原生 app 的 JavaScript 运行时，以及视频播放新功能。]]>
    
    </summary>
    
      <category term="HTML5" scheme="http://jinlong.github.io/tags/HTML5/"/>
    
      <category term="Safari" scheme="http://jinlong.github.io/tags/Safari/"/>
    
      <category term="iOS7" scheme="http://jinlong.github.io/tags/iOS7/"/>
    
      <category term="iOS7" scheme="http://jinlong.github.io/categories/iOS7/"/>
    
      <category term="Safari" scheme="http://jinlong.github.io/categories/iOS7/Safari/"/>
    
      <category term="HTML5" scheme="http://jinlong.github.io/categories/iOS7/Safari/HTML5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 中的变量和函数提升]]></title>
    <link href="http://jinlong.github.io/2013/09/11/var-and-fun-hoisting/"/>
    <id>http://jinlong.github.io/2013/09/11/var-and-fun-hoisting/</id>
    <published>2013-09-11T03:12:00.000Z</published>
    <updated>2014-10-25T02:22:49.278Z</updated>
    <content type="html"><![CDATA[<p>直入主题，JavaScript 中的变量和函数提升，有时还是容易错的，记录一下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReferenceError: noSuchVariable is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(noSuchVariable);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Outputs: undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(declaredLater);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> declaredLater = <span class="string">"Now it's defined!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: "Now it's defined!"</span></span><br><span class="line"><span class="built_in">console</span>.log(declaredLater);</span><br></pre></td></tr></table></figure>
<p>JavaScript 解释器“前瞻性”查找所有变量定义，把它们“提升”到函数顶部。等价于：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> declaredLater;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(declaredLater);</span><br><span class="line"></span><br><span class="line">declaredLater = <span class="string">"Now it's defined!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: "Now it's defined!"</span></span><br><span class="line"><span class="built_in">console</span>.log(declaredLater);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Baggins"</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Outputs: "Original name was undefined"</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Original name was "</span> + name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"Underhill"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Outputs: "New name is Underhill"</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"New name is "</span> + name);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>内部作用域定义了 name ， name 变量提升，为 undefined。<br>由于此原因一些 JavaScript 风格指南，建议把所有变量定义放到函数的头部。</p>
<p>函数定义不仅提升了函数名，也提升了真正的函数定义。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Outputs: "Yes!"</span></span><br><span class="line">isItHoisted();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isItHoisted</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Yes!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数定义提升仅仅作用于函数定义，而不是函数表达式。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Outputs: "Definition hoisted!"</span></span><br><span class="line">definitionHoisted();</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeError: undefined is not a function</span></span><br><span class="line">definitionNotHoisted();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">definitionHoisted</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Definition hoisted!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> definitionNotHoisted = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Definition not hoisted!"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们看到了两种不同类型的提升，变量 definitionNotHoisted 定义提升（因此结果是 undefined ），但是函数定义未提升（因此 TypeError）。</p>
<p>你可能想知道使用命名函数表达式会怎样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReferenceError: funcName is not defined</span></span><br><span class="line">funcName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeError: undefined is not a function</span></span><br><span class="line">varName();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> varName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Definition not hoisted!"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如你所见，如果函数的名字是函数表达式的一部分，它不会得到提升。</p>
<blockquote>
<p>参考资料：<br><a href="http://designpepper.com/blog/drips/variable-and-function-hoisting" target="_blank" rel="external">Variable and Function Hoisting in JavaScript</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>直入主题，JavaScript 中的变量和函数提升，有时还是容易错的，记录一下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReferenceError: noSuchVariable is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(noSuchVariable);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Outputs: undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(declaredLater);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> declaredLater = <span class="string">"Now it's defined!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: "Now it's defined!"</span></span><br><span class="line"><span class="built_in">console</span>.log(declaredLater);</span><br></pre></td></tr></table></figure>
<p>JavaScript 解释器“前瞻性”查找所有变量定义，把它们“提升”到函数顶部。等价于：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> declaredLater;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(declaredLater);</span><br><span class="line"></span><br><span class="line">declaredLater = <span class="string">"Now it's defined!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: "Now it's defined!"</span></span><br><span class="line"><span class="built_in">console</span>.log(declaredLater);</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浏览器开发工具的秘密]]></title>
    <link href="http://jinlong.github.io/2013/08/29/devtoolsecrets/"/>
    <id>http://jinlong.github.io/2013/08/29/devtoolsecrets/</id>
    <published>2013-08-29T03:32:00.000Z</published>
    <updated>2014-11-21T07:33:32.133Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>源网站：<a href="http://devtoolsecrets.com/" target="_blank" rel="external">Secrets of the Browser Developer Tools</a><br>译者：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码农</a></p>
</blockquote>
<p>##目录</p>
<ul>
<li>常规<ol>
<li><a href="#findDevTools">找到开发工具</a></li>
<li><a href="#latest">用最新的开发版</a></li>
<li><a href="#dockTools">移动开发工具位置</a></li>
<li><a href="#debugRWD">开发工具调试响应式设计</a></li>
<li><a href="#shortcut">学习快捷键</a></li>
</ol>
</li>
<li>Console 控制台<ol>
<li><a href="#console">Log, Info, Debug, Warn, Error</a></li>
<li><a href="#consoleTable">输出数据表格</a></li>
<li><a href="#assert">Assert</a> </li>
<li><a href="#timer">使用控制台定时器</a></li>
<li><a href="#persistent">持久控制台</a></li>
<li><a href="#rerun">重新运行命令</a></li>
<li><a href="#openConsole">任意 Tab 打开控制台</a></li>
<li><a href="#focusFrame">改变框架焦点</a></li>
<li><a href="#reference">引用当前和前一个元素</a></li>
<li><a href="#eval">最终求值表达式</a></li>
</ol>
</li>
<li>检查<ol>
<li><a href="#breadcrumb">通过面包屑导航 DOM</a></li>
<li><a href="#searchDom">搜索 DOM 节点</a></li>
<li><a href="#fonts">检查字体</a></li>
<li><a href="#viewRWD">浏览你的响应式网站</a></li>
<li><a href="#3Dview">3D 视图</a></li>
</ol>
</li>
<li>编辑<ol>
<li><a href="#changeVal">改变 CSS 值</a></li>
<li><a href="#changeSta">改变 :active， :hover， :focus， :visited 状态样式</a></li>
<li><a href="#dragEl">拖拽重排元素</a></li>
<li><a href="#sass">使用 SASS Source Maps</a></li>
</ol>
</li>
<li>调试<ol>
<li><a href="#debugger">用 debugger; 调试</a></li>
<li><a href="#conditional">条件断点</a></li>
<li><a href="#domBreakpoint">DOM 断点</a></li>
<li><a href="#xhr">XHR 断点</a></li>
<li><a href="#breakpointScope">检查断点的作用域</a> </li>
<li><a href="#inspectVal">监控值</a></li>
<li><a href="#minimize">调试压缩后的 JavaScript</a> </li>
<li><a href="#sourceMap">使用 JavaScript Source Maps</a></li>
<li><a href="#useragent">模拟User Agent</a></li>
<li><a href="#emulateTouch">模拟触控设备</a></li>
<li><a href="#geo">覆盖地理位置</a></li>
<li><a href="#orientation">重写设备方向</a></li>
<li><a href="#canvasDebug">调试 Canvas 元素</a></li>
<li><a href="#snippet">运行代码片段</a></li>
</ol>
</li>
<li>性能<ol>
<li><a href="#disableCache">禁用浏览器缓存</a></li>
<li><a href="#networkBottleneck">排序网络请求找到瓶颈</a></li>
<li><a href="#harFile">网络时间轴导出为 HAR 文件</a></li>
<li><a href="#loadEvent">检查 DOMContentLoad 和 Load 事件</a></li>
<li><a href="#resendXHR">重发送 XHR 请求</a></li>
<li><a href="#fps">测量渲染性能和 FPS</a></li>
</ol>
</li>
<li>移动端<ol>
<li><a href="#devIOS">开发工具调试 IOS</a> </li>
<li><a href="#devAndroid">开发工具调试 Android</a> </li>
</ol>
</li>
<li>扩展<ol>
<li><a href="#geoPlugin">覆盖地理位置</a></li>
</ol>
</li>
</ul>
<a id="more"></a>
<p>##常规</p>
<p><div id="findDevTools"></div></p>
<p>###找到开发工具</p>
<p>快捷方式：</p>
<ul>
<li>“F12”（Windows）</li>
<li>“Cmd”⌘ +“Option” +“I”（Mac）</li>
<li>右键选择“Inspect Element 检查元素”</li>
<li>Safari 需要在 首选项 &gt; 高级 &gt; 显示开发菜单，启用开发工具</li>
<li>Firebug 是 Firefox 扩展，需要<a href="http://getfirebug.com/" target="_blank" rel="external">在此</a>安装 </li>
</ul>
<p><div id="latest"></div></p>
<p>###用最新的开发版</p>
<p>开发工具会不断完善，在开发版可以体验。<br><a href="https://www.google.com/intl/zh-CN/chrome/browser/canary.html" target="_blank" rel="external">Chrome Canary</a> 是 Chrome 实验版，Canary 和 Chrome 可以同时安装。<br>你可以通过 <code>chrome://flags</code> 进一步加强你的 Chrome 开发工具 ，启用“Enable Developer Tools experiments （启用开发工具实验）”。不要忘了点击页面底部的“现在重启”按钮。</p>
<p><img src="/images/post/devtoolsecrets/c.png"></p>
<p><a href="http://www.mozilla.org/en-US/firefox/aurora/" target="_blank" rel="external">Firefox Aurora</a> 提供 Firefox 最新特性预览。不幸的是，Aurora 不能和 Firefox 同时打开。</p>
<p><img src="/images/post/devtoolsecrets/f.png"></p>
<p><a href="http://nightly.webkit.org/" target="_blank" rel="external">Webkit Nightly</a>  是 Safari 测试版，因此有些不稳定。Webkit Nightly 可以和 Safari 同时运行。</p>
<p><img src="/images/post/devtoolsecrets/s.png"></p>
<p><a href="http://www.opera.com/zh-cn/computer/next" target="_blank" rel="external">Opera Next</a> 是 Opera 最新改良版，会提供一些新的功能和特性。</p>
<p><img src="/images/post/devtoolsecrets/o.png"></p>
<p>现在浏览器的发布周期为12周，浏览器自动更新，变化是增量的。</p>
<p><div id="dockTools"></div></p>
<p>###移动开发工具位置</p>
<p>有时候不想让我们的工具在屏幕底部，大部分的开发工具提供了配置选项。</p>
<p>Chrome 开发工具，左下角图标允许改变停靠设置。快速点击它，会在底部和右侧切换。长按可以选择停靠选项（独立窗口打开），你也可以点击并拖拽移动开发工具。</p>
<p>Firefox 和 Safari 开发工具，停靠选项在右上角临近关闭按钮的位置，可以新窗口打开。</p>
<p>要改变停靠位置，可点击左上角小虫子，选择 Firebug 界面位置（上/下/左/右）。Firebug 右上角可以快速选择：最小化，新窗口，关闭。</p>
<p><div id="debugRWD"></div></p>
<p>###开发工具调试响应式设计</p>
<p>当调试移动站点的时候，停靠在右侧可充分利用空间，并且可以快速调整浏览器视口和开发工具的宽度，调试不同网页宽度。</p>
<p>在 Chrome 开发工具左下角，点击按钮可切换下侧或右侧停靠位置。</p>
<p><img src="/images/post/devtoolsecrets/dock.png"></p>
<p>在 Chrome 开发工具右下角，点击并选择“General”标签，你可以改变工具的外观，停靠右侧时可以垂直显示面板。</p>
<p><div id="shortcut"></div></p>
<p>###学习快捷键</p>
<p>Chrome 的快捷键列在设置菜单里，点击右下“齿轮”图标，可以看到“Shortcuts”标签。</p>
<p>IE 的快捷键是<a href="http://msdn.microsoft.com/en-us/library/dd565630(v=vs.85" target="_blank" rel="external">在线的</a>.aspx) 。</p>
<p>Opera 的快捷键也在设置按钮里。</p>
<p>##Console 控制台</p>
<p><div id="console"></div></p>
<p>###Log, Info, Debug, Warn, Error</p>
<p>不必用 alert 时，console.log() 是个极其有用的输出调试工具；</p>
<p>console.log() 是 printf 风格，因此你可以这么做：<code>console.log(&quot;%s is %d years old.&quot;, &quot;Bob&quot;, 42)</code>。</p>
<p>可以用 <code>console.info()</code> 输出提示信息；<code>console.debug()</code> 输出调试信息；<code>console.warn()</code> 输出警示信息；<code>console.error()</code> 输出错误信息。</p>
<p>你还可以用 %c 模式，把第二个变量作为样式格式参数。例如：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console<span class="class">.log</span>("%cThis is green <span class="value">text</span> on <span class="tag">a</span> yellow <span class="attribute">background</span>.", "<span class="attribute">color</span><span class="value">:green;</span> <span class="attribute">background-color</span><span class="value">:yellow<span class="string">");</span></span></span><br></pre></td></tr></table></figure></p>
<p>Firebug 只不过显示的图标不同，消息的背景色是一致的。</p>
<p>根据  MDN 的消息，他们不赞成使用 console.debug() ，因此没有图标标识，赞成用 console.log() 代替。</p>
<p>Chrome 和 Safari（nightly）用 info 时不显示图标，用 debug 时显示蓝图标；用 warn 时显示黄图标；用 error 时显示红图标。</p>
<p>你可以输出多个值，用逗号隔开即可，方便在同一行输出对象和数组，例如：<code>console.log(&#39;Kings: &#39;, kings);</code></p>
<p><div id="consoleTable"></div></p>
<p>###输出数据表格</p>
<p>console.table() 可以用来输出数组或者对象列表，以一种合适的表格形式显示。</p>
<p>例如：<code>console.table([[10, true, &quot;blue&quot;],[5, false]])</code> 将输出以下格式：</p>
<p><img src="/images/post/devtoolsecrets/chrome-table.png"></p>
<p>如果元素的数量不匹配，表格将显示 <code>undefined</code> 表示没有数据。</p>
<p>自定义列名，属性名必须在对象中指定元素。自定义（<code>index</code>）的值，可以给每个属性命名。</p>
<p>第二个可选的变量允许你明确指定哪一列要输出。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.table(&#123;</span><br><span class="line">	<span class="string">"London"</span>:&#123;<span class="string">population:</span><span class="number">8173194</span>, <span class="string">country:</span><span class="string">"UK"</span>, <span class="string">elevation:</span><span class="string">"24m"</span>&#125;,</span><br><span class="line">	<span class="string">"New York"</span>:&#123;<span class="string">population:</span><span class="number">8336697</span>, <span class="string">country:</span><span class="string">"USA"</span>, <span class="string">elevation:</span><span class="string">"10m"</span>&#125;&#125;,</span><br><span class="line">	[<span class="string">"population"</span>, <span class="string">"country"</span>])</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="/images/post/devtoolsecrets/chrome-table-custom-headings.png"></p>
<p><div id="assert"></div></p>
<p>###Assert </p>
<p>console.assert() 用于测试表达式的真假。</p>
<p>它有两个参数：表达式和显示信息。如果表达式是 FALSE 时，信息将会显示。</p>
<p>例如：<code>console.assert(!true, &#39;This is not true&#39;);</code> 输出”This is not true”。<code>console.assert(true, &#39;This is not true&#39;);</code> 什么也不输出。</p>
<p><div id="timer"></div></p>
<p>###使用控制台定时器</p>
<p>使用 <code>console.time(label)</code>，定时器在控制台启动。字符串 <code>label</code> 是必须的，我们想停止它时，有个定时器引用。调用 <code>console.timeEnd(label)</code> 定时器停止，控制台输出定时器执行的毫秒数（通过 label 识别）。</p>
<p><div id="persistent"></div></p>
<p>###持久控制台</p>
<p>有时页面加载时，你需要保留控制台信息。有时在点击或离开页面时，我们需要这个作为参考或者用来查看日志。</p>
<p>在 Chrome 里，右键点击控制台，显示菜单里有“Preserve Log upon Navigation”，选择它将保存你的控制台内容。</p>
<p>Firefox 默认会保存控制台信息。你可以点击右上角“清除”按钮清除控制台日志，或者打开/关闭工具。</p>
<p>在 Firebug 里，有个显著的按钮用来保持控制台内容，就在控制台的上部。</p>
<p>Opera 默认保存控制台内容，你可以右键选择“clear console”清除控制台日志或者重开工具。</p>
<p><div id="rerun"></div></p>
<p>###重新运行命令</p>
<p>如果已经在 JavaScript 控制台输入过命令，你想重新运行它，简单点一下“上”箭头即可翻看原先的命令列表。</p>
<p><div id="openConsole"></div></p>
<p>###任意 Tab 打开控制台</p>
<p>在 Chrome ，尽管控制台有自己的 tab ，在任意 tab 按下“ESC”键即可打开控制台，因此不必切换 tab 了。</p>
<p>Safari 控制台在开发工具的底部，“ESC”键用来切换控制台日志的可见性。在命令行执行一个命令也将打开控制台日志。</p>
<p>在 Firefox ，快速切换到控制台：“Ctrl + Shift + K ”（Windows），“Cmd ⌘ + Option ⌥ + K ”（Mac）。</p>
<p><div id="focusFrame"></div></p>
<p>###改变框架焦点</p>
<p>用命令行运行 JavaScript 非常实用，但是如果页面有 iframe ，你又不知道如何定位框架，就不好办了。</p>
<p>在 Firebug ，你可以用下面的命令聚焦框架：<br>cd(window.frames[‘frameName’]);</p>
<p>Chrome 可以在控制台底部的下拉列表中改变框架。</p>
<p>Opera 在“Console 控制台”和“Documents 文档” 有个改变框架的下拉菜单。</p>
<p>你可以通过 <code>document.getElementsByTagName(&quot;iframe&quot;);</code> 获得 iframe 列表。</p>
<p><div id="reference"></div></p>
<p>###引用当前和前一个元素</p>
<p>如果你的“Elements”标签选择了一个元素，你可以用 <code>$0</code> 调用它。输入 <code>$0.innerHTML</code> 试试看。</p>
<p>在 Firebug 和 Opera，你可以用 <code>$1</code> 选择前一个元素。</p>
<p>在 Chrome 和 Safari，你可以通过 <code>$1 - $4</code> 选择更靠前的元素。</p>
<p>在 Firebug ，你可以通过 <code>$n(2) - $n(5)</code> 选择更靠前的元素。</p>
<p><div id="eval"></div></p>
<p>###最终求值表达式</p>
<p>如果你需要先前表达式的结果用于后面的求值，你可以使用便利 <code>$_</code> ，最终表达式结果自动展示给你。</p>
<p>Firebug 1.12 开始支持。</p>
<p>##检查</p>
<p><div id="breadcrumb"></div></p>
<p>###通过面包屑导航 DOM</p>
<p>当你检查 DOM 树的节点时，节点的 DOM 路径面包屑列表显示在开发工具里。</p>
<p>Chrome 和 Opera，显示在 DOM 检查器的底部。</p>
<p><img src="/images/post/devtoolsecrets/chrome-breadcrumbs.png"></p>
<p>Firebug，Firefox 和 Safari，显示在 DOM 检查器的顶部。</p>
<p><img src="/images/post/devtoolsecrets/firefox-breadcrumbs.png"></p>
<p>你可以直接点击节点，或者按箭头键导航面包屑。按左箭头是父节点，按右箭头是第一个子项。上下箭头导航到下一个或前一个子节点。没有更多子节点，上下箭头导航回到 DOM 树。</p>
<p>在 Firefox ，你可以右击面包屑看兄弟节点列表，可以快速导航到兄弟节点。</p>
<p>在 Safari，你可以左击面包屑看兄弟节点。</p>
<p><div id="searchDom"></div></p>
<p>###搜索 DOM 节点</p>
<p>在 Firefox ，你可以在“检查器”面板搜索特别的节点。面包屑右边有个小的搜索框有同样作用。</p>
<p><img src="/images/post/devtoolsecrets/firefox-inspect-search-for-dom-nodes-small.png"></p>
<p>聚焦时搜索框变大。</p>
<p><img src="/images/post/devtoolsecrets/firefox-inspect-search-for-dom-nodes-large.png"></p>
<p>输入一个匹配的选择器， DOM 树将自动高亮它。</p>
<p>在 Chrome ，你可以按 Ctrl-F 打开对话框，CSS 选择器如期工作。</p>
<p><img src="/images/post/devtoolsecrets/L4xYPvn.png"></p>
<p><div id="fonts"></div></p>
<p>###检查字体</p>
<p>Firefox 有个字体检查器，可以查看当前元素使用的字体。</p>
<p><img src="/images/post/devtoolsecrets/firefox-inspect-fonts.png"></p>
<p>你可以修改默认的“Abc”文字，在字体列表底部有个按钮，可以显示页面所有字体。</p>
<p><div id="viewRWD"></div></p>
<p>###浏览你的响应式网站</p>
<p>在响应式设计时代，最重要的是如何在任意尺寸的设备查看我们的网站。尽管我们可以调整浏览器大小，开发工具里还是有一些其它的工具可用。</p>
<p>在 Chrome 开发工具的“设置”面板（工具右下角点击齿轮），在“Overrides”标签，你会发现“Device Metrics 设备指标”选项，你可以指定宽度和高度，以及字体缩放尺寸。你可以把开发工具停靠在右侧，然后调整页面大小测试。</p>
<p>Firefox 开发工具内置一个‘响应式设计模式’工具，此工具在开发工具的右上角。它包含一些预设的尺寸，你可以添加需要的尺寸。Firefox  也提供旋转的选项，你可以测试 landscape 和 portrait 模式。</p>
<p><div id="3Dview"></div></p>
<p>###3D 视图</p>
<p>Firefox 开发工具可以 3D 视图查看你的网站，可以方便地查看元素嵌套关系，点击开发工具右上角立方体图标可以启动它。</p>
<p>##编辑</p>
<p><div id="changeVal"></div></p>
<p>###改变 CSS 值</p>
<p>如果有个元素需要修改 margin，padding，width 或者 height，可以使用方向键增加/减少尺寸。简单使用上下方向键增加/减少1个单位。</p>
<p>“Shift” + 上下方向键，可以增加/减少10个单位；“Alt” + 上下方向键，可以增加/减少0.1个单位。</p>
<p>“Shift” + Page-Up / Page-Down，可以增加/减少100个单位。</p>
<p>当你矫正尺寸时，这些快捷键非常实用。</p>
<p><div id="changeSta"></div></p>
<p>###改变 :active， :hover， :focus， :visited 状态样式</p>
<p>在开发工具里修改 CSS 非常爽，但是碰到 hover 之类的伪类就有点挠头了。恰好有解决方案。</p>
<p>Chrome 有个按钮是干这用的，在“Elements”标签右手边看到一个虚线框和光标在一起的图标，它可以切换其它状态。</p>
<p><img src="/images/post/devtoolsecrets/chrome-active-hover-focus-visited.png"></p>
<p>Firebug 的 HTML 标签右侧，点击样式小箭头，可以选择想要的状态。Firebug 并没提供 :visited 状态选项。</p>
<p><img src="/images/post/devtoolsecrets/firebug-active-hover-focus-visited.png"></p>
<p>Firefox 为你选择的  DOM 元素提供一个下拉菜单，右键选择“查看元素”可以看到它，Firefox 同样没提供 :visited 状态选项。</p>
<p><img src="/images/post/devtoolsecrets/firefox-active-hover-focus-visited.png"></p>
<p>在 Opera，“样式”标签有个像列表的图标，Opera 提供了 :link 和 ::selection 选项。在新版 Opera ，位置跟 Chrome 一致了。</p>
<p><img src="/images/post/devtoolsecrets/opera-active-hover-focus-visited.png"></p>
<p>在 Safari，DOM 上右击一个元素，显示一个菜单，里面有“Force Psuedo-Classes”选项。</p>
<p><img src="/images/post/devtoolsecrets/safari-active-hover-focus-visited.png"></p>
<p><div id="dragEl"></div></p>
<p>###拖拽重排元素</p>
<p>在 Chrome 和 Safari 里，，“Elements”标签下，可以拖拽重排元素顺序。简单点击拖动元素即可，目标位置会出现一条线。</p>
<p><div id="sass"></div></p>
<p>###使用 SASS Source Maps</p>
<p>使用 CSS 预处理器有许多优势，但是在浏览器开发工具中修改比较困难。例如，当你再次运行 SASS 时， 在开发工具中保存的编译后CSS 可能被覆盖，不太理想。SASS 3.3 以上（可以安装使用‘sass gem install sass –pre’），为 SASS 文件创建映射很容易，你可以很容易的保存修改。</p>
<p>首先，为 SASS watch 命令增加 <code>--sourcemap</code> ，像这样：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch scss/devtoolsecrets<span class="class">.scss</span>:css/devtoolsecrets<span class="class">.min</span><span class="class">.css</span> --style compressed --sourcemap</span><br></pre></td></tr></table></figure></p>
<p>然后在 SASS 文件底部添加映射文件的名字（sourceMappingURL）：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span>@ sourceMappingURL=devtoolsecrets.css.map <span class="keyword">*</span>/</span><br></pre></td></tr></table></figure>
<p>然后，你需要启用“Experiments 实验”。地址栏输入 <strong>chrome://flags</strong> 启用“启用开发者工具实验”选项，点击页面底部“马上重启”按钮应用改变。在 Chrome 开发工具的右下角，点击齿轮按钮打开“设置”面板。</p>
<p>点击“General 常规”标签，激活“Enable Source Maps 启用 Source Maps”。点击“Experiments 实验”标签，检查“Support for SASS 支持 SASS ”选项。</p>
<p>重启浏览器，你可以直接查看 SASS 文件的行号了。</p>
<p>##调试</p>
<p><div id="debugger"></div></p>
<p>###用 debugger; 调试</p>
<p>添加此行代码：<code>debugger;</code> 可以自动创建断点，当开发工具打开时运行，断点会自动创建。</p>
<p>尽管快速添加断点很方便，不用在开发工具一行一行找，小心不要把 debugger; 提交到线上环境。</p>
<p><div id="conditional"></div></p>
<p>###条件断点</p>
<p>不必每次生效时，条件断点很有用。例如，你知道你的代码在最后一项有 bug，你可以用条件判断在最后一项时激活 debugger。条件满足，断点触发。</p>
<p>在 Chrome 中创建条件断点，先创建个正常的断点，然后右击断点选择“编辑断点”添加条件。</p>
<p>在 Firebug ，先创建常规断点，然后右击出现输入框，可以添加条件。</p>
<p>在 Firefox ，右击想创建断点的行，选择“增加条件断点”。</p>
<p>在 IE，先创建常规断点，然后右击断点，选择“条件…”。</p>
<p>在 Opera，先创建常规断点，然后右击断点，选择“添加条件”。</p>
<p>在 Safari，确保脚本和“调试器”面板都打开，创建一个断点，然后在“调试器”面板右击同样的断点，选择“编辑断点”。</p>
<p><div id="domBreakpoint"></div></p>
<p>###DOM 断点</p>
<p>如果特定的 DOM 改变，你的页面会被破坏，或者你只想找出元素属性或子元素改变，哪些代码生效，Chrome 和 Firebug 均可以在 DOM 修改时设置断点，你可以找到代码问题的根源。简单点击你想监控的元素，右击选择“break on”选项。</p>
<p><div id="xhr"></div></p>
<p>###XHR 断点</p>
<p>在 Chrome ，可以为 XmlHttpRequest 设置断点，你可以调试 AJAX 请求。到“Sources”标签选择“XHR 断点”，点击右侧加号图标，输入部分或所有你想添加断点的 URL 。一旦请求返回，断点将生效，你可以看到返回的数据，并可单步调试后续操作。</p>
<p>取消勾选可以关掉断点，右键选择“Delete Breakpoint 删除断点”删除断点。</p>
<p>在 Firebug ，到网络标签选择“在 XHR 时中断”按钮，或者右键选择“在 XHR 时中断”，你也可以随意选择中断条件。</p>
<p><div id="breakpointScope"></div></p>
<p>###检查断点的作用域 </p>
<p>在 Chrome ，Javascript 在断点处暂停时，你可以查看当前作用域的所有变量和对象，既可以悬浮查看，也可以通过控制台查看。</p>
<p>Firebug 有同样的选项，但是需要在 DOM 菜单选择“show closures”。<br>如果断点设置恰当，这个强大的属性让你很容易查看闭包里的变量。</p>
<p>Firebug 有额外的功能，无需在断点停止，即可访问隐藏的闭包变量。看此例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123; </span><br><span class="line">	<span class="keyword">this</span>.introduce = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"Hello, my name is %s"</span>, name); </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// create an instance of Person: var someone = new Person("Arthur"); </span></span><br><span class="line"><span class="comment">// we call a closure! someone.introduce(); </span></span><br><span class="line"><span class="comment">// prints "Hello, my name is Arthur"</span></span><br></pre></td></tr></table></figure>
<p>代码访问以下闭包变量：<br><strong>closure.%variable</strong><br>以上例子，你将用这个表达式访问 name：<br><strong>someone.introduce.%name // ==&gt; “Arthur”</strong><br>注意你也可以改变值：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someone.introduce.%name = <span class="string">"Trillian"</span>; someone.introduce(); <span class="regexp">//</span> prints <span class="string">"Hello, my name is Trillian"</span></span><br></pre></td></tr></table></figure></p>
<p>Firebug 中，需要 JavaScript 的地方，同样的语法都会生效，例如监控面板和条件断点。</p>
<p><div id="inspectVal"></div></p>
<p>###监控值</p>
<p>在“脚本”标签的右上角，监控变量相当容易，只有输入变量名，“监控”将让它的值保持更新。</p>
<p><div id="minimize"></div></p>
<p>###调试压缩后的 JavaScript </p>
<p>下断点让 JavaScript 调试更容易，但是如果代码已经放到生成环境，很可能已被压缩。如何调试最小化的代码呢？庆幸的是一些浏览器已经支持解压你的 JavaScript 。</p>
<p>在 Chrome 和 Safari ，选择“脚本”标签，找到相应的文件，然后点击“{}”图标（pretty print，在面板底部）。</p>
<p>在 IE ，点击工具图标选择下拉菜单，找到格式化 JavaScript 选项。</p>
<p>Opera 自动格式化压缩的 JavaScript 。</p>
<p><div id="sourceMap"></div></p>
<p>###使用 JavaScript Source Maps</p>
<p>当我们部署代码到生产环境时，比较明智的是压缩代码减少加载时间。压缩去除了无用的字符（比如注释），空行和空格。可是压缩后很难调试，无法单步调试，代码不易读。JavaScript source maps 调试压缩后 JavaScript 文件非常有用，它提供一个映射关联到未压缩文件。</p>
<p>创建 JavaScript source maps ，下载  <a href="https://code.google.com/p/closure-compiler/" target="_blank" rel="external">Google Closure Compiler</a> ，它帮你生成 .map 文件。</p>
<p>运行带 Source Map 属性的 Closure Compiler ：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar compiler<span class="class">.jar</span> --js common<span class="class">.js</span> --create_source_map ./common<span class="class">.js</span><span class="class">.map</span> --source_map_format=V3 --js_output_file common<span class="class">.min</span><span class="class">.js</span></span><br></pre></td></tr></table></figure>
<p>在压缩后的 JS 文件底部加上映射文件的名字： sourceMappingURL </p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ sourceMappingURL=common.js.map</span></span><br></pre></td></tr></table></figure>
<p>在 Chrome 开发工具，，“Settings 设置”菜单 -&gt; “General 常规”标签，激活“Enable Source Maps 启用 Source Maps ”。</p>
<p>现在，当你调试 JavaScript 时，可以用未压缩的版本查找问题所在。</p>
<p><div id="useragent"></div></p>
<p>###模拟User Agent</p>
<p>有时伪装成不同的浏览器或设备用于调试，特别是某个网站用到了设备探测。</p>
<p>在 Chrome ，打开设置菜单（右下角齿轮图标），选择“Overrides”选项，找到 “User Agent”选项。你可以选择内置的选项，也可以选择“Other”自己添加。如果你选择移动或平板设备， Chrome 将调整浏览器尺寸 - 取消勾选“Device Metrics”，很容易关掉此功能。</p>
<p>在 Opera ，点击浏览器左下“面板”箭头（开发工具以上），选择 + ，然后选择“自定义”，到“按钮”标签选择“首选项”，然后拖住“识别为 Opera ”下拉框，拖到浏览器工具栏。</p>
<p><div id="emulateTouch"></div></p>
<p>###模拟触控设备</p>
<p>Chrome 可以伪装成支持触控的设备，直接在浏览器模拟 touch 事件。在设置面板（Chrome 开发工具右下角齿轮图标），选择“Overrides”选项，选择“Emulate Touch Events 模拟触控事件”。</p>
<p>在 Chrome Canary ，用个圆形代替了光标，可以用于区分处于哪种模式。</p>
<p><div id="geo"></div></p>
<p>###覆盖地理位置</p>
<p>如果你的应用用到了 Geolocation ，模拟不同的位置会非常有用。在 Chrome ，“设置”菜单，选择“Overrides”标签，这里可以模拟不同的经度纬度，也可以模拟不可用的位置。</p>
<p>在 <a href="https://maps.google.com/maps?showlabs=1" target="_blank" rel="external">Google Maps Labs</a> 启用了坐标提示，你就可以从 Google Maps 获得位置的经纬度。</p>
<p><div id="orientation"></div></p>
<p>###重写设备方向</p>
<p>设备方向改变可以在 Chrome 中模拟。“Settings ”-&gt; “Overrides”，选择“Override Device Orientation”，在输入框输入新值。</p>
<p>Alpha 代表沿 z 轴 0-360 度。<br>Beta 代表沿 x 轴 -180 到 180 度 - 前到后运动<br>Gamma 代表沿 y 轴 -90 到 90 度 - 左到右运动</p>
<p>改变值将触发 <strong>deviceorientation</strong> 事件。</p>
<p><div id="canvasDebug"></div></p>
<p>###调试 Canvas 元素</p>
<p>Chrome 可以用开发工具调试 canvas 元素，可用于 2D 和 WebGL canvas 项目。</p>
<p>首先启用“Experiments”标签，地址栏输入 chrome://flags ，启用“Enable Developer Tools experiments”，按下“Relaunch Now”按钮应用改变。到设置面板，找到“Experiments”标签，选择“Canvas inspection”选项。</p>
<p>现在访问“Profile”标签，你可以看到“Capture Canvas Frame 捕获 Canvas 帧”选项。使用期间可能需要重载页面。按下“Start 开始”捕获 canvas 应用的单个帧。你也可以点击下面的框，切换到“Consecutive Frames 连续帧”，你可以捕获多帧。</p>
<p>每次访问 canvas Chrome 会创建日志，提供每次访问上下文的列表以及快照。你可以点击一个日志项重播那帧，看看哪些命令被调用，及它们在哪一行。</p>
<p><div id="snippet"></div></p>
<p>###运行代码片段</p>
<p>如果你发现同样的代码需要重复的运行，Chrome Canary（Chrome 29 已有此功能） 提供了便捷的“Snippets 片段”区域，你可以保存代码。</p>
<p>在“Source”标签，“Sources”和“Content scripts”后面有个“Snippets ”标签，右键点击空区域，点“New”创建新的片段，写入一些代码，无论何时再想运行它时，右键点击选择“Run 运行”即可。</p>
<p>Firefox 6 + 的代码片段速记器（开发工具右上角小本子图标）跟这很类似。</p>
<p>##性能</p>
<p><div id="disableCache"></div></p>
<p>###禁用浏览器缓存</p>
<p>每个浏览器都可以禁用网页的缓存，确保资源每次都从服务器加载。</p>
<p>Chrome ，设置小齿轮里找，“General”-&gt; “Disable cache”。</p>
<p> IE 菜单栏的“Cache 缓存”下面。</p>
<p>Opera，点击网络标签清除缓存，选择“网络选项”-&gt; “禁用所有缓存”</p>
<p>Firebug，网络标签 -&gt; 下拉菜单“禁用浏览器缓存”</p>
<p>在任何浏览器呼出清除缓存对话框，Ctrl + Shift + Delete（Windows），Shift + Cmd + Backspace（Mac）。</p>
<p><div id="networkBottleneck"></div></p>
<p>###排序网络请求找到瓶颈</p>
<p>在网络标签按顺序显示每个请求的资源，点击每列的标题可以重新排序。</p>
<p>大部分的浏览器在网络标签共享公共字段，你可以通过文件名；域名；资源类型；HTTP 状态；方法和资源大小这些字段排序。</p>
<p>在 IE 中，文件名和域名字段合并了。</p>
<p>Chrome 更进一步，点击“Timeline”字段显示额外的排序选项：</p>
<ul>
<li>Start Time 默认选项，按每个请求开始时间排序</li>
<li>Response Time 按网络请求获得响应的时间排序</li>
<li>End Time 按请求完成时间排序</li>
<li>Duration 按请求完成花费时间排序</li>
<li>Latency 浏览器初始请求到接收响应的时间总和。以等待时间排序，可以看看哪个资源占用了大量时间等待响应。等待时间依赖于用户距服务器的距离，设置 Content Delivery Networks （CDN）可以改善此时间。合并 CSS 和 JavaScript 文件，图像拼接可以减少资源请求数，因此减少总延迟。</li>
</ul>
<p><div id="harFile"></div></p>
<p>###网络时间轴导出为 HAR 文件</p>
<p>HAR（HTTP 存档）文件可以用于各种性能分析技术和调试。测试提 bug 时可以附上 HAR 文件 - 开发人员可以在本地运行 HAR 数据查找问题原因。</p>
<p>我们可以用 Chrome 开发工具导出网络标签时间轴，右键点击网络输入，选择“Save as HAR with Content”。</p>
<p>Firebug 需要另安装插件 Net-export，此工具由 Firebug 开发主管和 HAR 格式创造者开发。</p>
<p><a href="http://ericduran.github.io/chromeHAR/" target="_blank" rel="external">chromeHAR</a> 是个在线工具，提供跟 Chrome 一样的时间轴界面，功能类似。</p>
<p><div id="loadEvent"></div></p>
<p>###检查 DOMContentLoad 和 Load 事件</p>
<p>Chrome 和 Safari （以及 Firebug 网络面板）的网络时间轴显示网页加载有多快，用一条线标记 DOMContentLoaded 和 load 事件触发的时机。</p>
<ul>
<li>当浏览器解析文档完毕（但是其他资源比如图像，样式表可能未下载完毕）DOMContentLoaded 触发，它用蓝线标识。</li>
<li>当所有初始资源（图像，样式表，JavaScript）加载完毕，load 事件触发一次，它用红线标识。</li>
<li>当两个事件同时触发，标识线是紫色的。</li>
</ul>
<p><img src="/images/post/devtoolsecrets/chrome-checking-domcontentloaded-and-loadevent.png"></p>
<p>在 Safari ，标识线是虚线。</p>
<p><div id="resendXHR"></div></p>
<p>###重发送 XHR 请求</p>
<p>如果希望重发送 XHR 请求，但不想刷新页面或重触发事件，可以右键点击资源，选择“Replay XHR”（Firebug 叫“Resend”）。</p>
<p><div id="fps"></div></p>
<p>###测量渲染性能和 FPS</p>
<p>Chrome 提供了帧率时间轴，可以逐帧调试网站。</p>
<p>要创建帧时间轴，首先打开 Chrome 开发工具，选择“Timeline”标签，底部黑色的圆形代表“record 记录”，按下开始时间轴记录，按第二次停止记录。记录的同时，你可以跟网页正常交互，帧模式会记录所有帧的行为。</p>
<p><img src="/images/post/devtoolsecrets/fps1.png"></p>
<p>时间轴图表每一条代表单帧动画，不同的颜色表示如下：<br>蓝色表示加载任务，黄色表示脚本任务，紫色表示渲染任务，绿色表示绘制任务，白色区域代表空闲时间。</p>
<p><img src="/images/post/devtoolsecrets/fps2.png"></p>
<p>时间轴图表下面是网页性能的瀑布图，帧显示在标题列，标题单元格还包含画这帧花费的毫秒数；相应的动作也记录在左侧。</p>
<p>你可以拖动两个灰色的鼠标滑块，改变你想检查的帧的数量。</p>
<p>悬停在时间轴的标题行显示帧的持续时间；FPS 数值；CPU 时间和与帧交互的合计时间。</p>
<p>悬停在左侧的记录上面，可以看到每个任务的持续时间；还有其它有用信息。如果有页面相关的部分，则会高亮，有些任务被分组了，点击瀑布图的箭头查看。</p>
<p>##移动端</p>
<p><div id="devIOS"></div></p>
<p>###开发工具调试 IOS </p>
<p>把 IOS 设备连接到可用的 Mac，打开 Mac 和 IOS 设备的 Safari 。</p>
<p>找到 Safari 的“Develop 开发”菜单，第一个菜单分隔线的后面应该是你要连接的 IOS 设备的名字。在子菜单选择你想调试的页面。</p>
<p>Safari 的开发工具将以弹出窗口的式出现，你可以调试移动设备的站点了。</p>
<p><div id="devAndroid"></div></p>
<p>###开发工具调试 Android </p>
<p>你可以用Mac 上的 Chrome Canary 开发工具调试安卓设备上的公共和本地网站，你可以在手机上访问 Chrome 开发工具的广泛的特性集。</p>
<p>首先，需要在安卓设备安装 <a href="https://play.google.com/store/apps/details?id=com.chrome.beta&amp;hl=en" target="_blank" rel="external">Chrome BETA</a> 。</p>
<p>然后，需要下载 <a href="https://github.com/repenaxa/ADBPlugin/raw/master/out/npADBPlugin-crx.crx" target="_blank" rel="external">ADB 插件扩展</a>，安装到 Chrome Canary 上。从未在 Google Play 商店下载过的话，需要拖拽文件到扩展页 （<a href="chrome://extensions/" target="_blank" rel="external">chrome://extensions/</a>）。</p>
<p>确保已经在 <a href="chrome://flags" target="_blank" rel="external">chrome://flags</a> 里面打开“Enable Developer Tools experiments 启用开发工具实验”。  </p>
<p>手机用 USB 线插到电脑上，在手机找到“设置”，选择“开发人员选项”，确保“USB 调试”选上。如果它已经选上，而你以前从未用过 USB 调试，取消选择，重选一次，确保它有此计算机的 MAC 地址。</p>
<p><img src="/images/post/devtoolsecrets/adroid.png"></p>
<p>现在到安卓上的 Chrome BETA ，点击菜单图标和“Settings 设置”，确保“Enable USB Web debugging 启用 USB Web 调试”启用。打开新标签。</p>
<p><img src="/images/post/devtoolsecrets/android-chrome.png"></p>
<p>在 Chrome Canary ，点击 ADB 插件图标，点击“Start ADB”，需要重启浏览器。</p>
<p><img src="/images/post/devtoolsecrets/1.png"></p>
<p>访问检查页（chrome://inspect ），找到设备（需要 Chrome Canary 28 +），找到要调试的标签。点击页面 URL 右侧的“Inspect 检查”链接。</p>
<p><img src="/images/post/devtoolsecrets/2.png"></p>
<p>弹出“Settings 设置”窗口，点击“Experiments 实验”标签，启用“Reverse Port Forwarding ”，你需要关闭窗口重启开发工具，“Port Forwarding”标签出现之前，再点“Inspect  查看”链接。</p>
<p><img src="/images/post/devtoolsecrets/3.png"></p>
<p>在 Port Forwarding 标签，输入想转发的端口（例如 9000），地址，应该可以映射到本地的电脑了。现在，在移动设备输入 localhost:端口号（如 localhost:9000），本地的站点应该加载到移动设备上了，并且可以调试了。</p>
<p><img src="/images/post/devtoolsecrets/4.png"></p>
<p>##扩展</p>
<p><div id="geoPlugin"></div></p>
<p>###覆盖地理位置</p>
<p>在 Firefox ，位置 API 可以像 Chrome 一样覆盖，需要 <a href="https://addons.mozilla.org/fr/firefox/addon/geolocater/" target="_blank" rel="external">Geolocater 扩展</a> 。</p>
<p>安装后到“Tools”工具菜单，“Geolocater”，“Manage 管理”，在这你可以通过浏览地图或搜索位置，直接添加“伪造的”地理位置。你可以覆盖先前预设的地理位置。可以到 <a href="http://html5demos.com/geo" target="_blank" rel="external">html5demos for Geolocation</a> 页试试。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>源网站：<a href="http://devtoolsecrets.com/">Secrets of the Browser Developer Tools</a><br>译者：<a href="http://weibo.com/newwave">涂鸦码农</a></p>
</blockquote>
<p>##目录</p>
<ul>
<li>常规<ol>
<li><a href="#findDevTools">找到开发工具</a></li>
<li><a href="#latest">用最新的开发版</a></li>
<li><a href="#dockTools">移动开发工具位置</a></li>
<li><a href="#debugRWD">开发工具调试响应式设计</a></li>
<li><a href="#shortcut">学习快捷键</a></li>
</ol>
</li>
<li>Console 控制台<ol>
<li><a href="#console">Log, Info, Debug, Warn, Error</a></li>
<li><a href="#consoleTable">输出数据表格</a></li>
<li><a href="#assert">Assert</a> </li>
<li><a href="#timer">使用控制台定时器</a></li>
<li><a href="#persistent">持久控制台</a></li>
<li><a href="#rerun">重新运行命令</a></li>
<li><a href="#openConsole">任意 Tab 打开控制台</a></li>
<li><a href="#focusFrame">改变框架焦点</a></li>
<li><a href="#reference">引用当前和前一个元素</a></li>
<li><a href="#eval">最终求值表达式</a></li>
</ol>
</li>
<li>检查<ol>
<li><a href="#breadcrumb">通过面包屑导航 DOM</a></li>
<li><a href="#searchDom">搜索 DOM 节点</a></li>
<li><a href="#fonts">检查字体</a></li>
<li><a href="#viewRWD">浏览你的响应式网站</a></li>
<li><a href="#3Dview">3D 视图</a></li>
</ol>
</li>
<li>编辑<ol>
<li><a href="#changeVal">改变 CSS 值</a></li>
<li><a href="#changeSta">改变 :active， :hover， :focus， :visited 状态样式</a></li>
<li><a href="#dragEl">拖拽重排元素</a></li>
<li><a href="#sass">使用 SASS Source Maps</a></li>
</ol>
</li>
<li>调试<ol>
<li><a href="#debugger">用 debugger; 调试</a></li>
<li><a href="#conditional">条件断点</a></li>
<li><a href="#domBreakpoint">DOM 断点</a></li>
<li><a href="#xhr">XHR 断点</a></li>
<li><a href="#breakpointScope">检查断点的作用域</a> </li>
<li><a href="#inspectVal">监控值</a></li>
<li><a href="#minimize">调试压缩后的 JavaScript</a> </li>
<li><a href="#sourceMap">使用 JavaScript Source Maps</a></li>
<li><a href="#useragent">模拟User Agent</a></li>
<li><a href="#emulateTouch">模拟触控设备</a></li>
<li><a href="#geo">覆盖地理位置</a></li>
<li><a href="#orientation">重写设备方向</a></li>
<li><a href="#canvasDebug">调试 Canvas 元素</a></li>
<li><a href="#snippet">运行代码片段</a></li>
</ol>
</li>
<li>性能<ol>
<li><a href="#disableCache">禁用浏览器缓存</a></li>
<li><a href="#networkBottleneck">排序网络请求找到瓶颈</a></li>
<li><a href="#harFile">网络时间轴导出为 HAR 文件</a></li>
<li><a href="#loadEvent">检查 DOMContentLoad 和 Load 事件</a></li>
<li><a href="#resendXHR">重发送 XHR 请求</a></li>
<li><a href="#fps">测量渲染性能和 FPS</a></li>
</ol>
</li>
<li>移动端<ol>
<li><a href="#devIOS">开发工具调试 IOS</a> </li>
<li><a href="#devAndroid">开发工具调试 Android</a> </li>
</ol>
</li>
<li>扩展<ol>
<li><a href="#geoPlugin">覆盖地理位置</a></li>
</ol>
</li>
</ul>]]>
    
    </summary>
    
      <category term="Debug" scheme="http://jinlong.github.io/tags/Debug/"/>
    
      <category term="开发工具" scheme="http://jinlong.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="浏览器" scheme="http://jinlong.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="Debug" scheme="http://jinlong.github.io/categories/Debug/"/>
    
      <category term="浏览器" scheme="http://jinlong.github.io/categories/Debug/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="开发工具" scheme="http://jinlong.github.io/categories/Debug/%E6%B5%8F%E8%A7%88%E5%99%A8/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS 居中大全]]></title>
    <link href="http://jinlong.github.io/2013/08/13/centering-all-the-directions/"/>
    <id>http://jinlong.github.io/2013/08/13/centering-all-the-directions/</id>
    <published>2013-08-13T10:00:00.000Z</published>
    <updated>2014-11-21T07:36:14.514Z</updated>
    <content type="html"><![CDATA[<p>我看最近微博流行 CSS 居中技术，老外码农争相写相关的文章，一篇赛一篇的长啊，我把几篇归纳总结了一下，算是笔记。<br>孔乙己曾说：“茴香豆的回字有四种写法”，万一哪天有个面试官问你：“居中一共有几种写法”呢，哈哈，先备着吧~~<br>各种方法各有利弊，大家自己权衡吧，至少在需要居中时多个思路。</p>
<p>##&lt;center&gt;</p>
<p>不建议用了。</p>
<p>##text-align:center</p>
<p>在父容器里水平居中 inline 文字，或 inline 元素</p>
<p>##vertical-align:middle</p>
<p>垂直居中 inline 文字，inline 元素，配合 <code>display:table</code> ，<code>display:table-cell</code>，有奇效。</p>
<p>##line-height</p>
<p>与 height 联手，垂直居中文字</p>
<p>##margin:auto</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">  <span class="id">#ex2_container</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">200px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value">yellow</span></span>; &#125;</span></span><br><span class="line">  <span class="id">#ex2_content</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0px</span> auto</span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value">gray</span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value">white</span></span>; <span class="rule"><span class="attribute">display</span>:<span class="value">table</span></span>; &#125;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ex2_container"</span>&gt;</span><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ex2_content"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>##hacks, hacks（小技巧）</p>
<p>有许多 <a href="http://blog.themeforest.net/tutorials/vertical-centering-with-css/" target="_blank" rel="external">hacks</a> ，负 margin，<a href="http://css-tricks.com/centering-in-the-unknown/" target="_blank" rel="external">影子元素</a> ::before 等。如果你的内容不是固定大小的话，它们大部分是很脆弱的。</p>
<p>##translate(-50%,-50%)</p>
<p>用 position 加 translate<br>translate(-50%,-50%) 比较奇特，百分比计算不是以父元素为基准，而是以自己为基准。</p>
<p>参考文章：<a href="http://jinlong.github.io/blog/2013/07/08/centering-percentage-widthheight-elements/">居中百分比宽高的元素</a></p>
<p>示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">  <span class="id">#ex3_container</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">200px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">200px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value">yellow</span></span>; <span class="rule"><span class="attribute">position</span>:<span class="value">relative</span></span>; &#125;</span></span><br><span class="line">  <span class="id">#ex3_content</span> <span class="rules">&#123; <span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">50%</span></span></span>; <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">50%</span></span></span>; <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>; <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value">gray</span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value">white</span></span>; <span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>; &#125;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ex3_container"</span>&gt;</span><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ex3_content"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这个技巧相当嚣张，同样适用于没固定大小的内容，<code>min-width</code>，<code>max-height</code>，<code>overflow:scroll</code> 等。</p>
<a id="more"></a>
<p>##绝对定位居中</p>
<p>父容器元素：<code>position: relative</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Absolute-Center</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：高度必须定义，建议加 <code>overflow: auto</code>，防止内容溢出。</strong></p>
<p>####视口居中</p>
<p>内容元素：<code>position: fixed</code>，<code>z-index: 999</code>，记住父容器元素 <code>position: relative</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Absolute-Center</span><span class="class">.is-Fixed</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">999</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/shshaw/full/gEiDt#Fixed" target="_blank" rel="external">模态窗口实例</a></p>
<p>####响应式</p>
<p>百分比宽高，最大、最小宽度均可以，加 padding 也可以</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Absolute-Center</span><span class="class">.is-Responsive</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">60%</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">60%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">400px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">500px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>####偏移</p>
<p>只要 <code>margin: auto;</code> 在，内容块将垂直居中，top, left, bottom, right 可以设置偏移。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Absolute-Center</span><span class="class">.is-Right</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> auto</span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">text-align</span>:<span class="value"> right</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>####溢出</p>
<p>居中内容比父容器高时，防止溢出，加 <code>overflow: auto</code> （没有任何 padding 时，也可以加 <code>max-height: 100%;</code>）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Absolute-Center</span><span class="class">.is-Overflow</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>####调整尺寸</p>
<p><strong>resize</strong> 属性可以让尺寸可调。<br>设置 <strong>min- /max-</strong> 限制尺寸，确定加了 <code>overflow: auto</code> 。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Absolute-Center</span><span class="class">.is-Resizable</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">20%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">80%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">20%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-height</span>:<span class="value"> <span class="number">80%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">resize</span>:<span class="value"> both</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>####图像</p>
<p>图像同样适用，设置 <code>height: auto;</code> </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Absolute-Center</span><span class="class">.is-Image</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>####可变高度</p>
<p>高度必须定义，但可以是百分比或 max-height。不想定义高度的话，用 <code>display: table</code> （需要考虑 Table-Cell 兼容性）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Absolute-Center</span><span class="class">.is-Variable</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>##负 margin</p>
<p>确切知道宽高，负 margin 是宽和高的一半。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.is-Negative</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">170px</span></span></span>; <span class="comment">/* (width + padding)/2 */</span></span><br><span class="line">        <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> -<span class="number">120px</span></span></span>; <span class="comment">/* (height + padding)/2 */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>##Table-Cell</p>
<p>参考文章：<a href="http://www.456bereastreet.com/archive/201103/flexible_height_vertical_centering_with_css_beyond_ie7/" target="_blank" rel="external">Flexible height vertical centering with CSS, beyond IE7</a></p>
<p>结构：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"Pos-Container is-Table"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"Table-Cell"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"Center-Block"</span>&gt;</span></span><br><span class="line">    &amp;lt!-- CONTENT --&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Pos-Container</span><span class="class">.is-Table</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>; &#125;</span></span><br><span class="line"><span class="class">.is-Table</span> <span class="class">.Table-Cell</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> table-cell</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> middle</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.is-Table</span> <span class="class">.Center-Block</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>##FlexBox</p>
<p>参考文章：<a href="http://coding.smashingmagazine.com/2013/05/22/centering-elements-with-flexbox/" target="_blank" rel="external">Designing CSS Layouts With Flexbox Is As Easy As Pie</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.Pos-Container</span><span class="class">.is-Flexbox</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> -webkit-box</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> -moz-box</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> -ms-flexbox</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> -webkit-flex</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-box-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">     <span class="rule"><span class="attribute">-moz-box-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">     <span class="rule"><span class="attribute">-ms-flex-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-align-items</span>:<span class="value"> center</span></span>;</span><br><span class="line">          <span class="rule"><span class="attribute">align-items</span>:<span class="value"> center</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-box-pack</span>:<span class="value"> center</span></span>;</span><br><span class="line">     <span class="rule"><span class="attribute">-moz-box-pack</span>:<span class="value"> center</span></span>;</span><br><span class="line">     <span class="rule"><span class="attribute">-ms-flex-pack</span>:<span class="value"> center</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-justify-content</span>:<span class="value"> center</span></span>;</span><br><span class="line">          <span class="rule"><span class="attribute">justify-content</span>:<span class="value"> center</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考资料：   </p>
<ul>
<li><a href="http://coding.smashingmagazine.com/2013/08/09/absolute-horizontal-vertical-centering-css/" target="_blank" rel="external">Absolute Horizontal And Vertical Centering In CSS</a>   </li>
<li><a href="http://codepen.io/shshaw/full/gEiDt" target="_blank" rel="external">Absolute Centering in CSS</a>   </li>
<li><a href="http://html5hub.com/centering-all-the-directions/#i.n590rnl9he4uud" target="_blank" rel="external">CENTERING ALL THE DIRECTIONS</a>   </li>
<li><a href="http://demosthenes.info/blog/723/Six-Ways-of-Centering-With-CSS" target="_blank" rel="external">Seven Ways of Centering With CSS</a>   </li>
<li><a href="http://designshack.net/articles/css/how-to-center-anything-with-css" target="_blank" rel="external">How to Center Anything With CSS</a>   </li>
<li><a href="http://blog.themeforest.net/tutorials/vertical-centering-with-css/" target="_blank" rel="external">Vertical Centering With CSS</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>我看最近微博流行 CSS 居中技术，老外码农争相写相关的文章，一篇赛一篇的长啊，我把几篇归纳总结了一下，算是笔记。<br>孔乙己曾说：“茴香豆的回字有四种写法”，万一哪天有个面试官问你：“居中一共有几种写法”呢，哈哈，先备着吧~~<br>各种方法各有利弊，大家自己权衡吧，至少在需要居中时多个思路。</p>
<p>##&lt;center&gt;</p>
<p>不建议用了。</p>
<p>##text-align:center</p>
<p>在父容器里水平居中 inline 文字，或 inline 元素</p>
<p>##vertical-align:middle</p>
<p>垂直居中 inline 文字，inline 元素，配合 <code>display:table</code> ，<code>display:table-cell</code>，有奇效。</p>
<p>##line-height</p>
<p>与 height 联手，垂直居中文字</p>
<p>##margin:auto</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">  <span class="id">#ex2_container</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">200px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value">yellow</span></span>; &#125;</span></span><br><span class="line">  <span class="id">#ex2_content</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0px</span> auto</span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value">gray</span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value">white</span></span>; <span class="rule"><span class="attribute">display</span>:<span class="value">table</span></span>; &#125;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ex2_container"</span>&gt;</span><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ex2_content"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>##hacks, hacks（小技巧）</p>
<p>有许多 <a href="http://blog.themeforest.net/tutorials/vertical-centering-with-css/">hacks</a> ，负 margin，<a href="http://css-tricks.com/centering-in-the-unknown/">影子元素</a> ::before 等。如果你的内容不是固定大小的话，它们大部分是很脆弱的。</p>
<p>##translate(-50%,-50%)</p>
<p>用 position 加 translate<br>translate(-50%,-50%) 比较奇特，百分比计算不是以父元素为基准，而是以自己为基准。</p>
<p>参考文章：<a href="http://jinlong.github.io/blog/2013/07/08/centering-percentage-widthheight-elements/">居中百分比宽高的元素</a></p>
<p>示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">  <span class="id">#ex3_container</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">200px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">200px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value">yellow</span></span>; <span class="rule"><span class="attribute">position</span>:<span class="value">relative</span></span>; &#125;</span></span><br><span class="line">  <span class="id">#ex3_content</span> <span class="rules">&#123; <span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">50%</span></span></span>; <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">50%</span></span></span>; <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>; <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value">gray</span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value">white</span></span>; <span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>; &#125;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ex3_container"</span>&gt;</span><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ex3_content"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这个技巧相当嚣张，同样适用于没固定大小的内容，<code>min-width</code>，<code>max-height</code>，<code>overflow:scroll</code> 等。</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://jinlong.github.io/tags/CSS/"/>
    
      <category term="垂直居中" scheme="http://jinlong.github.io/tags/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    
      <category term="水平居中" scheme="http://jinlong.github.io/tags/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    
      <category term="CSS" scheme="http://jinlong.github.io/categories/CSS/"/>
    
      <category term="水平居中" scheme="http://jinlong.github.io/categories/CSS/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    
      <category term="垂直居中" scheme="http://jinlong.github.io/categories/CSS/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Promises]]></title>
    <link href="http://jinlong.github.io/2013/08/13/javascript-promises/"/>
    <id>http://jinlong.github.io/2013/08/13/javascript-promises/</id>
    <published>2013-08-13T05:13:00.000Z</published>
    <updated>2015-10-28T14:48:49.576Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://wildermuth.com/2013/8/3/JavaScript_Promises" target="_blank" rel="external">JavaScript Promises</a><br>译者：<a href="http://weibo.com/newwave" target="_blank" rel="external">涂鸦码龙</a></p>
</blockquote>
<p>不，我不是要谈论 JavaScript 会解决一切问题的承诺。我甚至也不相信这点;) 我想谈谈几个JavaScript 库（包括 <a href="http://angularjs.org/" target="_blank" rel="external">AngularJS</a>，<a href="http://jquery.com/" target="_blank" rel="external">jQuery</a>，<a href="http://dojotoolkit.org/" target="_blank" rel="external">Dojo</a> 和 <a href="http://msdn.microsoft.com/en-us/library/windows/apps/br229773.aspx" target="_blank" rel="external">WinJS</a>）用到的约定对象（promise object）的概念。</p>
<p>promise 是处理异步操作的模式。问题是当你开始一个异步操作，操作完成时需要执行一些代码。异步代码非常普遍，大部分的库已经找到了解决方案，传入回调函数。但是，每个库的作法很少有共性。让我们看看 jQuery 的例子：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/cuXqF/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<a id="more"></a>
<p>此例中我们可以看到 jQuery 使用配置对象的 <code>success</code> 属性指定回调函数。这不是一个 promise，而是一种传入回调函数的方式。当 ajax 调用完成，它会调用 <code>success</code> 函数。依靠这个库做异步操作，你可能会传一组回调函数（比如 success 或者 failure）。有很多方法可以实现这一点。</p>
<p>约定模式（promise pattern）着手简化这个过程。异步操作简单返回一个对象叫一个约定（promise） 。promise 允许你调用 <strong>then</strong> 方法，让你指定一个或多个回调函数。让我们看看如何用 jQuery 建立一个 promise：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/FDg6d/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>比较有趣的是，<strong>ajax</strong> 返回 <strong>xhr</strong> 对象实现了 promise 模式，因此我们可以调用 <strong>then</strong> 。这样做的优势是你可以链式调用，实现独立操作，完成操作时调用 <strong>done</strong>，如下所示 ：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/kWrpq/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>由于许多库开始着手实现 promise 模式，处理异步操作应该会更简单，不管你写什么代码（比如 NodeJS，in-browser JS 等）。promise 从另一个侧面看像什么呢？</p>
<p>这个模式的关键点是 <strong>then</strong> 函数可以接收两个函数，第一个用于成功回调；第二个用于失败回调，像这样：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/SwzkK/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>注意到我们用了 <strong>always</strong> 指定成功或失败时的回调函数。</p>
<p>再看一个 AngularJS 的例子：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/s35B9/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>AngularJS 使用 <code>$q</code> 变量，开始调用 <code>defer()</code>，返回对象包含成功或失败的条件，还有 promise 本身。注意 <code>_callMe</code> 函数，<code>d</code> 变量是调用 <code>$q.defer()</code> 创建的，<code>d.promise</code> 是函数返回的，因此调用者（caller） 可以调用 promise 方法（比如 <code>then</code>）。当真正的异步操作执行时（此时嘲笑一下 <code>setTimeout</code> ），我们可以在 d 对象使用 <code>resolve</code> 方法，告诉 promise 我们成功完成（因此在 <code>then</code> 方法后面调用第一个函数）。如果我们调用 <code>reject</code> ，第二个方法将被调用（失败回调）。</p>
<p>你可以在 JSFiddle 里玩一下这些例子，看看会发生什么。Promises 的确是又简单又酷的处理异步操作的方式。我非常喜欢它，它可以简化你的代码。</p>
<blockquote>
<p>更多介绍：<a href="http://www.promisejs.org/" target="_blank" rel="external">www.promisejs.org</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://wildermuth.com/2013/8/3/JavaScript_Promises">JavaScript Promises</a><br>译者：<a href="http://weibo.com/newwave">涂鸦码龙</a></p>
</blockquote>
<p>不，我不是要谈论 JavaScript 会解决一切问题的承诺。我甚至也不相信这点;) 我想谈谈几个JavaScript 库（包括 <a href="http://angularjs.org/">AngularJS</a>，<a href="http://jquery.com/">jQuery</a>，<a href="http://dojotoolkit.org/">Dojo</a> 和 <a href="http://msdn.microsoft.com/en-us/library/windows/apps/br229773.aspx">WinJS</a>）用到的约定对象（promise object）的概念。</p>
<p>promise 是处理异步操作的模式。问题是当你开始一个异步操作，操作完成时需要执行一些代码。异步代码非常普遍，大部分的库已经找到了解决方案，传入回调函数。但是，每个库的作法很少有共性。让我们看看 jQuery 的例子：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/cuXqF/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://jinlong.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移植 Chrome 扩展至 Opera]]></title>
    <link href="http://jinlong.github.io/2013/07/23/porting-chrome-extension-to-opera/"/>
    <id>http://jinlong.github.io/2013/07/23/porting-chrome-extension-to-opera/</id>
    <published>2013-07-23T09:23:00.000Z</published>
    <updated>2014-11-21T07:38:33.970Z</updated>
    <content type="html"><![CDATA[<p><strong>准备工作：</strong></p>
<p>下载：<a href="https://getfirebug.com/firebuglite" target="_blank" rel="external">firebuglite 源码</a>   </p>
<p>我下载的<a href="https://getfirebug.com/releases/lite/latest/firebug-lite.tar.tgz" target="_blank" rel="external">稳定版</a></p>
<p>解压源码，找到 <code>firebug-lite/build/chrome-extension</code> 目录，这就是 Chrome 的 firebug-lite 扩展啦。按照常理呢，Chrome 和 Opera 15+ 内核一致，扩展应该直接通用，结果一试，bug 百出啊，跑不起来……</p>
<p>我感觉原因可能是：</p>
<ol>
<li><a href="http://dev.opera.com/extension-docs/" target="_blank" rel="external">Opera extension API</a> 暂时没有 <a href="https://developer.chrome.com/extensions/api_index.html" target="_blank" rel="external">Chrome extension API</a> 支持的多</li>
<li>firebug-lite 的 Chrome 扩展开发的比较早，有些 API 已更新</li>
</ol>
<p>下面记录移植过程的一些要点：</p>
<p>地址栏输入 <code>opera:opera://extensions</code> 或者 “<strong>Ctrl + Shift + E</strong>`”打开扩展页，右上角点击“<strong>开发者模式</strong>”；</p>
<p>点击“<strong>载入解压后的扩展…</strong>”，选择刚刚下载的 Chrome 扩展（firebug-lite/build/chrome-extension ）；</p>
<p>哈，第一个报错来了：</p>
<p><img src="/images/post/firebuglite/1.png"></p>
<p>意思是说“<code>manifest_version</code>”值必须是 2 ，不能有引号，解释参见<a href="http://dev.opera.com/extension-docs/manifest.html#manifest_version" target="_blank" rel="external">这里</a> 。<br><a id="more"></a><br>扩展目录找到“<strong>manifest.json</strong>”文件，加入“<code>&quot;manifest_version&quot;: 2,</code>”。</p>
<p>再加载扩展目录试试，扩展加进来了，可是又报错了……</p>
<p><img src="/images/post/firebuglite/2.png"></p>
<p>“<strong>manifest.json</strong>”文件里的“<code>background_page</code>”项替换成 <code>&quot;background&quot;: {&quot;scripts&quot;: [&quot;background.js&quot;]}</code> ，<strong>background.html</strong> 转换成 <strong>background.js</strong> 格式，删除没用的 <code>&lt;script&gt;</code> 标签。</p>
<p>点击“重新载入”试试，(⊙o⊙)哦，不报错啦？打开个网页测试一下，打开 Chrome devTools ，看看 console 吧：</p>
<p><img src="/images/post/firebuglite/3.png"></p>
<p>果然不出所料，还是报错，好事是浏览器右上角出现“小虫子”啦，嚯嚯~~</p>
<p>有事问 Google ，找啊找，看到<a href="http://stackoverflow.com/questions/9106519/port-error-could-not-establish-connection-receiving-end-does-not-exist-in-chr" target="_blank" rel="external">一篇帖子</a> ，很像我遇到的问题。</p>
<p>找到“<code>contentScript.js</code>”文件，把所有 “<code>sendRequest()</code>”替换成“<code>sendMessage()</code>”，所有“<code>onRequest</code>”替换成“<code>onMessage</code>”，原因是原来的 API 已过时，<a href="http://dev.opera.com/extension-docs/tut_message_passing.html" target="_blank" rel="external">详细见文档</a>。</p>
<p>“重新载入”扩展再试，有报错，关键的 “<code>firebug-lite.js</code>”没加载成功，要命：</p>
<p><img src="/images/post/firebuglite/4.png"></p>
<p>继续问谷哥，见到<a href="http://stackoverflow.com/questions/10527625/google-chrome-extension-script-injections" target="_blank" rel="external">一篇帖子</a></p>
<p>在 “<strong>manifest.json</strong>”里增加：“<code>&quot;web_accessible_resources&quot;: [&quot;firebug-lite.js&quot;]</code>”，大概意思是资源可以通过“<code>opera-extension://[PACKAGE ID]/[PATH]</code>”取到啦，<a href="http://dev.opera.com/extension-docs/manifest.html#web_accessible_resources" target="_blank" rel="external">详细见文档</a>。</p>
<p>再“重新载入”扩展试一试，激动啊…… “<strong>F12</strong>”Firebug 神奇的出现了，哈哈。</p>
<p><img src="/images/post/firebuglite/5.png"></p>
<p>不过还是有错，一些小图标资源加载不出来……</p>
<p>坑爹的，找了半天原因，发现“<code>firebug-lite.js</code>”文件中，图标的目录有错误“chrome-extension://bmagokdooijbeehmkpknfglimnifench/skin/xp/sprite.png”。把乱码“bmagokdooijbeehmkpknfglimnifench”批量替换成你的扩展 ID 即可。</p>
<p>艾玛，眼泪哗哗的……经过不懈的折腾，终于看到 “firebug-lite”出现在 Opera 15 中了，哈哈哈（不会觉得我无聊吧……）。</p>
<p><img src="/images/post/firebuglite/6.png"></p>
<p>正当狂喜之际，打包时遇到问题，JS 文件需要加载本地图片，需要用到扩展 ID（随机生成），本地测试好的扩展 ID 跟打包完的不一致，导致图片资源加载不出来。</p>
<p>content scripts 可以获取扩展 ID：</p>
<p><code>chrome.i18n.getMessage(&#39;@@extension_id&#39;);</code><br><code>chrome.runtime.id</code><br>获取相对路径： <code>chrome.extension.getURL(&quot;&quot;)</code></p>
<p>我把动态获取的扩展 ID 存到 <code>localStorage</code> 里，然后在注入的其它 JS 可以调用这个扩展 ID 了，搞定收工。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>准备工作：</strong></p>
<p>下载：<a href="https://getfirebug.com/firebuglite">firebuglite 源码</a>   </p>
<p>我下载的<a href="https://getfirebug.com/releases/lite/latest/firebug-lite.tar.tgz">稳定版</a></p>
<p>解压源码，找到 <code>firebug-lite/build/chrome-extension</code> 目录，这就是 Chrome 的 firebug-lite 扩展啦。按照常理呢，Chrome 和 Opera 15+ 内核一致，扩展应该直接通用，结果一试，bug 百出啊，跑不起来……</p>
<p>我感觉原因可能是：</p>
<ol>
<li><a href="http://dev.opera.com/extension-docs/">Opera extension API</a> 暂时没有 <a href="https://developer.chrome.com/extensions/api_index.html">Chrome extension API</a> 支持的多</li>
<li>firebug-lite 的 Chrome 扩展开发的比较早，有些 API 已更新</li>
</ol>
<p>下面记录移植过程的一些要点：</p>
<p>地址栏输入 <code>opera:opera://extensions</code> 或者 “<strong>Ctrl + Shift + E</strong>`”打开扩展页，右上角点击“<strong>开发者模式</strong>”；</p>
<p>点击“<strong>载入解压后的扩展…</strong>”，选择刚刚下载的 Chrome 扩展（firebug-lite/build/chrome-extension ）；</p>
<p>哈，第一个报错来了：</p>
<p><img src="/images/post/firebuglite/1.png" /></p>
<p>意思是说“<code>manifest_version</code>”值必须是 2 ，不能有引号，解释参见<a href="http://dev.opera.com/extension-docs/manifest.html#manifest_version">这里</a> 。<br>]]>
    
    </summary>
    
      <category term="Chrome Extensions" scheme="http://jinlong.github.io/tags/Chrome-Extensions/"/>
    
      <category term="Firebug" scheme="http://jinlong.github.io/tags/Firebug/"/>
    
      <category term="Opera Extensions" scheme="http://jinlong.github.io/tags/Opera-Extensions/"/>
    
      <category term="Opera Extensions" scheme="http://jinlong.github.io/categories/Opera-Extensions/"/>
    
      <category term="Chrome Extensions" scheme="http://jinlong.github.io/categories/Opera-Extensions/Chrome-Extensions/"/>
    
      <category term="Firebug" scheme="http://jinlong.github.io/categories/Opera-Extensions/Chrome-Extensions/Firebug/"/>
    
  </entry>
  
</feed>
